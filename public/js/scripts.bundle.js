/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/scripts.js":
/*!*********************************!*\
  !*** ./resources/js/scripts.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Keenthemes' plugins\nwindow.KTUtil = __webpack_require__(/*! ../metronic/js/components/util.js */ \"./resources/metronic/js/components/util.js\");\nwindow.KTApp = __webpack_require__(/*! ../metronic/js/components/app.js */ \"./resources/metronic/js/components/app.js\");\nwindow.KTCard = __webpack_require__(/*! ../metronic/js/components/card.js */ \"./resources/metronic/js/components/card.js\");\nwindow.KTCookie = __webpack_require__(/*! ../metronic/js/components/cookie.js */ \"./resources/metronic/js/components/cookie.js\");\nwindow.KTDialog = __webpack_require__(/*! ../metronic/js/components/dialog.js */ \"./resources/metronic/js/components/dialog.js\");\nwindow.KTHeader = __webpack_require__(/*! ../metronic/js/components/header.js */ \"./resources/metronic/js/components/header.js\");\nwindow.KTImageInput = __webpack_require__(/*! ../metronic/js/components/image-input.js */ \"./resources/metronic/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! ../metronic/js/components/menu.js */ \"./resources/metronic/js/components/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ../metronic/js/components/offcanvas.js */ \"./resources/metronic/js/components/offcanvas.js\");\nwindow.KTScrolltop = __webpack_require__(/*! ../metronic/js/components/scrolltop.js */ \"./resources/metronic/js/components/scrolltop.js\");\nwindow.KTToggle = __webpack_require__(/*! ../metronic/js/components/toggle.js */ \"./resources/metronic/js/components/toggle.js\");\nwindow.KTWizard = __webpack_require__(/*! ../metronic/js/components/wizard.js */ \"./resources/metronic/js/components/wizard.js\");\n__webpack_require__(/*! ../metronic/js/components/datatable/core.datatable.js */ \"./resources/metronic/js/components/datatable/core.datatable.js\");\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.checkbox.js */ \"./resources/metronic/js/components/datatable/datatable.checkbox.js\");\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.rtl.js */ \"./resources/metronic/js/components/datatable/datatable.rtl.js\");\n\n// Metronic layout base js\nwindow.KTLayoutAside = __webpack_require__(/*! ../metronic/js/layout/base/aside.js */ \"./resources/metronic/js/layout/base/aside.js\");\nwindow.KTLayoutAsideMenu = __webpack_require__(/*! ../metronic/js/layout/base/aside-menu.js */ \"./resources/metronic/js/layout/base/aside-menu.js\");\nwindow.KTLayoutAsideToggle = __webpack_require__(/*! ../metronic/js/layout/base/aside-toggle.js */ \"./resources/metronic/js/layout/base/aside-toggle.js\");\nwindow.KTLayoutBrand = __webpack_require__(/*! ../metronic/js/layout/base/brand.js */ \"./resources/metronic/js/layout/base/brand.js\");\nwindow.KTLayoutContent = __webpack_require__(/*! ../metronic/js/layout/base/content.js */ \"./resources/metronic/js/layout/base/content.js\");\nwindow.KTLayoutFooter = __webpack_require__(/*! ../metronic/js/layout/base/footer.js */ \"./resources/metronic/js/layout/base/footer.js\");\nwindow.KTLayoutHeader = __webpack_require__(/*! ../metronic/js/layout/base/header.js */ \"./resources/metronic/js/layout/base/header.js\");\nwindow.KTLayoutHeaderMenu = __webpack_require__(/*! ../metronic/js/layout/base/header-menu.js */ \"./resources/metronic/js/layout/base/header-menu.js\");\nwindow.KTLayoutHeaderTopbar = __webpack_require__(/*! ../metronic/js/layout/base/header-topbar.js */ \"./resources/metronic/js/layout/base/header-topbar.js\");\nwindow.KTLayoutStickyCard = __webpack_require__(/*! ../metronic/js/layout/base/sticky-card.js */ \"./resources/metronic/js/layout/base/sticky-card.js\");\nwindow.KTLayoutStretchedCard = __webpack_require__(/*! ../metronic/js/layout/base/stretched-card.js */ \"./resources/metronic/js/layout/base/stretched-card.js\");\nwindow.KTLayoutSubheader = __webpack_require__(/*! ../metronic/js/layout/base/subheader.js */ \"./resources/metronic/js/layout/base/subheader.js\");\n\n// Metronic layout extended js\nwindow.KTLayoutChat = __webpack_require__(/*! ../metronic/js/layout/extended/chat.js */ \"./resources/metronic/js/layout/extended/chat.js\");\nwindow.KTLayoutDemoPanel = __webpack_require__(/*! ../metronic/js/layout/extended/demo-panel.js */ \"./resources/metronic/js/layout/extended/demo-panel.js\");\nwindow.KTLayoutExamples = __webpack_require__(/*! ../metronic/js/layout/extended/examples.js */ \"./resources/metronic/js/layout/extended/examples.js\");\nwindow.KTLayoutQuickActions = __webpack_require__(/*! ../metronic/js/layout/extended/quick-actions.js */ \"./resources/metronic/js/layout/extended/quick-actions.js\");\nwindow.KTLayoutQuickCartPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-cart.js */ \"./resources/metronic/js/layout/extended/quick-cart.js\");\nwindow.KTLayoutQuickNotifications = __webpack_require__(/*! ../metronic/js/layout/extended/quick-notifications.js */ \"./resources/metronic/js/layout/extended/quick-notifications.js\");\nwindow.KTLayoutQuickPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-panel.js */ \"./resources/metronic/js/layout/extended/quick-panel.js\");\nwindow.KTLayoutQuickSearch = __webpack_require__(/*! ../metronic/js/layout/extended/quick-search.js */ \"./resources/metronic/js/layout/extended/quick-search.js\");\nwindow.KTLayoutQuickUser = __webpack_require__(/*! ../metronic/js/layout/extended/quick-user.js */ \"./resources/metronic/js/layout/extended/quick-user.js\");\nwindow.KTLayoutScrolltop = __webpack_require__(/*! ../metronic/js/layout/extended/scrolltop.js */ \"./resources/metronic/js/layout/extended/scrolltop.js\");\nwindow.KTLayoutSearch = window.KTLayoutSearchOffcanvas = __webpack_require__(/*! ../metronic/js/layout/extended/search.js */ \"./resources/metronic/js/layout/extended/search.js\");\n__webpack_require__(/*! ../metronic/js/layout/initialize.js */ \"./resources/metronic/js/layout/initialize.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvc2NyaXB0cy5qcz9iOGQ4Il0sIm5hbWVzIjpbIndpbmRvdyIsIktUVXRpbCIsInJlcXVpcmUiLCJLVEFwcCIsIktUQ2FyZCIsIktUQ29va2llIiwiS1REaWFsb2ciLCJLVEhlYWRlciIsIktUSW1hZ2VJbnB1dCIsIktUTWVudSIsIktUT2ZmY2FudmFzIiwiS1RTY3JvbGx0b3AiLCJLVFRvZ2dsZSIsIktUV2l6YXJkIiwiS1RMYXlvdXRBc2lkZSIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIktUTGF5b3V0QnJhbmQiLCJLVExheW91dENvbnRlbnQiLCJLVExheW91dEZvb3RlciIsIktUTGF5b3V0SGVhZGVyIiwiS1RMYXlvdXRIZWFkZXJNZW51IiwiS1RMYXlvdXRIZWFkZXJUb3BiYXIiLCJLVExheW91dFN0aWNreUNhcmQiLCJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJLVExheW91dFN1YmhlYWRlciIsIktUTGF5b3V0Q2hhdCIsIktUTGF5b3V0RGVtb1BhbmVsIiwiS1RMYXlvdXRFeGFtcGxlcyIsIktUTGF5b3V0UXVpY2tBY3Rpb25zIiwiS1RMYXlvdXRRdWlja0NhcnRQYW5lbCIsIktUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zIiwiS1RMYXlvdXRRdWlja1BhbmVsIiwiS1RMYXlvdXRRdWlja1NlYXJjaCIsIktUTGF5b3V0UXVpY2tVc2VyIiwiS1RMYXlvdXRTY3JvbGx0b3AiLCJLVExheW91dFNlYXJjaCIsIktUTGF5b3V0U2VhcmNoT2ZmY2FudmFzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBQSxNQUFNLENBQUNDLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxxRkFBbUMsQ0FBQztBQUM1REYsTUFBTSxDQUFDRyxLQUFLLEdBQUdELG1CQUFPLENBQUMsbUZBQWtDLENBQUM7QUFDMURGLE1BQU0sQ0FBQ0ksTUFBTSxHQUFHRixtQkFBTyxDQUFDLHFGQUFtQyxDQUFDO0FBQzVERixNQUFNLENBQUNLLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyx5RkFBcUMsQ0FBQztBQUNoRUYsTUFBTSxDQUFDTSxRQUFRLEdBQUdKLG1CQUFPLENBQUMseUZBQXFDLENBQUM7QUFDaEVGLE1BQU0sQ0FBQ08sUUFBUSxHQUFHTCxtQkFBTyxDQUFDLHlGQUFxQyxDQUFDO0FBQ2hFRixNQUFNLENBQUNRLFlBQVksR0FBR04sbUJBQU8sQ0FBQyxtR0FBMEMsQ0FBQztBQUN6RUYsTUFBTSxDQUFDUyxNQUFNLEdBQUdQLG1CQUFPLENBQUMscUZBQW1DLENBQUM7QUFDNURGLE1BQU0sQ0FBQ1UsV0FBVyxHQUFHUixtQkFBTyxDQUFDLCtGQUF3QyxDQUFDO0FBQ3RFRixNQUFNLENBQUNXLFdBQVcsR0FBR1QsbUJBQU8sQ0FBQywrRkFBd0MsQ0FBQztBQUN0RUYsTUFBTSxDQUFDWSxRQUFRLEdBQUdWLG1CQUFPLENBQUMseUZBQXFDLENBQUM7QUFDaEVGLE1BQU0sQ0FBQ2EsUUFBUSxHQUFHWCxtQkFBTyxDQUFDLHlGQUFxQyxDQUFDO0FBQ2hFQSxtQkFBTyxDQUFDLDZIQUF1RCxDQUFDO0FBQ2hFQSxtQkFBTyxDQUFDLHFJQUEyRCxDQUFDO0FBQ3BFQSxtQkFBTyxDQUFDLDJIQUFzRCxDQUFDOztBQUUvRDtBQUNBRixNQUFNLENBQUNjLGFBQWEsR0FBR1osbUJBQU8sQ0FBQyx5RkFBcUMsQ0FBQztBQUNyRUYsTUFBTSxDQUFDZSxpQkFBaUIsR0FBR2IsbUJBQU8sQ0FBQyxtR0FBMEMsQ0FBQztBQUM5RUYsTUFBTSxDQUFDZ0IsbUJBQW1CLEdBQUdkLG1CQUFPLENBQUMsdUdBQTRDLENBQUM7QUFDbEZGLE1BQU0sQ0FBQ2lCLGFBQWEsR0FBR2YsbUJBQU8sQ0FBQyx5RkFBcUMsQ0FBQztBQUNyRUYsTUFBTSxDQUFDa0IsZUFBZSxHQUFHaEIsbUJBQU8sQ0FBQyw2RkFBdUMsQ0FBQztBQUN6RUYsTUFBTSxDQUFDbUIsY0FBYyxHQUFHakIsbUJBQU8sQ0FBQywyRkFBc0MsQ0FBQztBQUN2RUYsTUFBTSxDQUFDb0IsY0FBYyxHQUFHbEIsbUJBQU8sQ0FBQywyRkFBc0MsQ0FBQztBQUN2RUYsTUFBTSxDQUFDcUIsa0JBQWtCLEdBQUduQixtQkFBTyxDQUFDLHFHQUEyQyxDQUFDO0FBQ2hGRixNQUFNLENBQUNzQixvQkFBb0IsR0FBR3BCLG1CQUFPLENBQUMseUdBQTZDLENBQUM7QUFDcEZGLE1BQU0sQ0FBQ3VCLGtCQUFrQixHQUFHckIsbUJBQU8sQ0FBQyxxR0FBMkMsQ0FBQztBQUNoRkYsTUFBTSxDQUFDd0IscUJBQXFCLEdBQUd0QixtQkFBTyxDQUFDLDJHQUE4QyxDQUFDO0FBQ3RGRixNQUFNLENBQUN5QixpQkFBaUIsR0FBR3ZCLG1CQUFPLENBQUMsaUdBQXlDLENBQUM7O0FBRTdFO0FBQ0FGLE1BQU0sQ0FBQzBCLFlBQVksR0FBR3hCLG1CQUFPLENBQUMsK0ZBQXdDLENBQUM7QUFDdkVGLE1BQU0sQ0FBQzJCLGlCQUFpQixHQUFHekIsbUJBQU8sQ0FBQywyR0FBOEMsQ0FBQztBQUNsRkYsTUFBTSxDQUFDNEIsZ0JBQWdCLEdBQUcxQixtQkFBTyxDQUFDLHVHQUE0QyxDQUFDO0FBQy9FRixNQUFNLENBQUM2QixvQkFBb0IsR0FBRzNCLG1CQUFPLENBQUMsaUhBQWlELENBQUM7QUFDeEZGLE1BQU0sQ0FBQzhCLHNCQUFzQixHQUFHNUIsbUJBQU8sQ0FBQywyR0FBOEMsQ0FBQztBQUN2RkYsTUFBTSxDQUFDK0IsMEJBQTBCLEdBQUc3QixtQkFBTyxDQUFDLDZIQUF1RCxDQUFDO0FBQ3BHRixNQUFNLENBQUNnQyxrQkFBa0IsR0FBRzlCLG1CQUFPLENBQUMsNkdBQStDLENBQUM7QUFDcEZGLE1BQU0sQ0FBQ2lDLG1CQUFtQixHQUFHL0IsbUJBQU8sQ0FBQywrR0FBZ0QsQ0FBQztBQUN0RkYsTUFBTSxDQUFDa0MsaUJBQWlCLEdBQUdoQyxtQkFBTyxDQUFDLDJHQUE4QyxDQUFDO0FBQ2xGRixNQUFNLENBQUNtQyxpQkFBaUIsR0FBR2pDLG1CQUFPLENBQUMseUdBQTZDLENBQUM7QUFDakZGLE1BQU0sQ0FBQ29DLGNBQWMsR0FBR3BDLE1BQU0sQ0FBQ3FDLHVCQUF1QixHQUFHbkMsbUJBQU8sQ0FBQyxtR0FBMEMsQ0FBQztBQUU1R0EsbUJBQU8sQ0FBQyx5RkFBcUMsQ0FBQyIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9zY3JpcHRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gS2VlbnRoZW1lcycgcGx1Z2luc1xyXG53aW5kb3cuS1RVdGlsID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy91dGlsLmpzJyk7XHJcbndpbmRvdy5LVEFwcCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvYXBwLmpzJyk7XHJcbndpbmRvdy5LVENhcmQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2NhcmQuanMnKTtcclxud2luZG93LktUQ29va2llID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9jb29raWUuanMnKTtcclxud2luZG93LktURGlhbG9nID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kaWFsb2cuanMnKTtcclxud2luZG93LktUSGVhZGVyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9oZWFkZXIuanMnKTtcclxud2luZG93LktUSW1hZ2VJbnB1dCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvaW1hZ2UtaW5wdXQuanMnKTtcclxud2luZG93LktUTWVudSA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvbWVudS5qcycpO1xyXG53aW5kb3cuS1RPZmZjYW52YXMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL29mZmNhbnZhcy5qcycpO1xyXG53aW5kb3cuS1RTY3JvbGx0b3AgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3Njcm9sbHRvcC5qcycpO1xyXG53aW5kb3cuS1RUb2dnbGUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3RvZ2dsZS5qcycpO1xyXG53aW5kb3cuS1RXaXphcmQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3dpemFyZC5qcycpO1xyXG5yZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9jb3JlLmRhdGF0YWJsZS5qcycpO1xyXG5yZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUuY2hlY2tib3guanMnKTtcclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcycpO1xyXG5cclxuLy8gTWV0cm9uaWMgbGF5b3V0IGJhc2UganNcclxud2luZG93LktUTGF5b3V0QXNpZGUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9hc2lkZS5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRBc2lkZU1lbnUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9hc2lkZS1tZW51LmpzJyk7XHJcbndpbmRvdy5LVExheW91dEFzaWRlVG9nZ2xlID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzJyk7XHJcbndpbmRvdy5LVExheW91dEJyYW5kID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanMnKTtcclxud2luZG93LktUTGF5b3V0Q29udGVudCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMnKTtcclxud2luZG93LktUTGF5b3V0Rm9vdGVyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzJyk7XHJcbndpbmRvdy5LVExheW91dEhlYWRlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRIZWFkZXJNZW51ID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyVG9wYmFyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRTdGlja3lDYXJkID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanMnKTtcclxud2luZG93LktUTGF5b3V0U3RyZXRjaGVkQ2FyZCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN1YmhlYWRlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N1YmhlYWRlci5qcycpO1xyXG5cclxuLy8gTWV0cm9uaWMgbGF5b3V0IGV4dGVuZGVkIGpzXHJcbndpbmRvdy5LVExheW91dENoYXQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvY2hhdC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXREZW1vUGFuZWwgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvZGVtby1wYW5lbC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRFeGFtcGxlcyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9leGFtcGxlcy5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja0FjdGlvbnMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stYWN0aW9ucy5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja0NhcnRQYW5lbCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1jYXJ0LmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1ub3RpZmljYXRpb25zLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrUGFuZWwgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stcGFuZWwuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tTZWFyY2ggPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stc2VhcmNoLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrVXNlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay11c2VyLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFNjcm9sbHRvcCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9zY3JvbGx0b3AuanMnKTtcclxud2luZG93LktUTGF5b3V0U2VhcmNoID0gd2luZG93LktUTGF5b3V0U2VhcmNoT2ZmY2FudmFzID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3NlYXJjaC5qcycpO1xyXG5cclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2luaXRpYWxpemUuanMnKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/scripts.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/app.js":
/*!*************************************************!*\
  !*** ./resources/metronic/js/components/app.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTApp = function () {\n  /** @type {object} colors State colors **/\n  var settings = {};\n  var _initTooltip = function initTooltip(el) {\n    var theme = el.data('theme') ? 'tooltip-' + el.data('theme') : '';\n    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n    var trigger = el.data('trigger') ? el.data('trigger') : 'hover';\n    $(el).tooltip({\n      trigger: trigger,\n      template: '<div class=\"tooltip ' + theme + ' ' + width + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <div class=\"tooltip-inner\"></div>\\\r\n            </div>'\n    });\n  };\n  var _initTooltips = function initTooltips() {\n    // init bootstrap tooltips\n    $('[data-toggle=\"tooltip\"]').each(function () {\n      _initTooltip($(this));\n    });\n  };\n  var _initPopover = function initPopover(el) {\n    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    el.popover({\n      trigger: triggerValue,\n      template: '\\\r\n            <div class=\"popover ' + skin + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <h3 class=\"popover-header\"></h3>\\\r\n                <div class=\"popover-body\"></div>\\\r\n            </div>'\n    });\n  };\n  var _initPopovers = function initPopovers() {\n    // init bootstrap popover\n    $('[data-toggle=\"popover\"]').each(function () {\n      _initPopover($(this));\n    });\n  };\n  var initFileInput = function initFileInput() {\n    // init bootstrap popover\n    $('.custom-file-input').on('change', function () {\n      var fileName = $(this).val();\n      $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n    });\n  };\n  var initScroll = function initScroll() {\n    $('[data-scroll=\"true\"]').each(function () {\n      var el = $(this);\n      KTUtil.scrollInit(this, {\n        mobileNativeScroll: true,\n        handleWindowResize: true,\n        rememberPosition: el.data('remember-position') == 'true' ? true : false\n      });\n    });\n  };\n  var initAlerts = function initAlerts() {\n    // init bootstrap popover\n    $('body').on('click', '[data-close=alert]', function () {\n      $(this).closest('.alert').hide();\n    });\n  };\n  var _initCard = function initCard(el, options) {\n    // init card tools\n    var el = $(el);\n    var card = new KTCard(el[0], options);\n  };\n  var _initCards = function initCards() {\n    // init card tools\n    $('[data-card=\"true\"]').each(function () {\n      var el = $(this);\n      var options = {};\n      if (el.data('data-card-initialized') !== true) {\n        _initCard(el, options);\n        el.data('data-card-initialized', true);\n      }\n    });\n  };\n  var initStickyCard = function initStickyCard() {\n    if (typeof Sticky === 'undefined') {\n      return;\n    }\n    var sticky = new Sticky('[data-sticky=\"true\"]');\n  };\n  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {\n    var dropdownMenu;\n    if (!context) {\n      return;\n    }\n    $('body').on('show.bs.dropdown', context, function (e) {\n      dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    }).on('hide.bs.dropdown', context, function (e) {\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {\n    $('body').on('show.bs.dropdown', function (e) {\n      // e.target is always parent (contains toggler and menu)\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n      if ($toggler.length === 0) {\n        return;\n      }\n      var $dropdownMenu = $(e.target).find('.dropdown-menu');\n      // save detached menu\n      var $detachedDropdownMenu = $dropdownMenu.detach();\n      // save reference to detached menu inside data of toggler\n      $toggler.data('dropdown-menu', $detachedDropdownMenu);\n      $('body').append($detachedDropdownMenu);\n      $detachedDropdownMenu.css('display', 'block');\n      $detachedDropdownMenu.position({\n        my: 'right top',\n        at: 'right bottom',\n        of: $(e.relatedTarget)\n      });\n    });\n    $('body').on('hide.bs.dropdown', function (e) {\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n      if ($toggler.length === 0) {\n        return;\n      }\n      // access to reference of detached menu from data of toggler\n      var $detachedDropdownMenu = $toggler.data('dropdown-menu');\n      // re-append detached menu inside parent\n      $(e.target).append($detachedDropdownMenu.detach());\n      // hide dropdown\n      $detachedDropdownMenu.hide();\n    });\n  };\n  return {\n    init: function init(settingsArray) {\n      if (settingsArray) {\n        settings = settingsArray;\n      }\n      KTApp.initComponents();\n    },\n    initComponents: function initComponents() {\n      initScroll();\n      _initTooltips();\n      _initPopovers();\n      initAlerts();\n      initFileInput();\n      _initCards();\n      initStickyCard();\n      initAbsoluteDropdowns();\n    },\n    initTooltips: function initTooltips() {\n      _initTooltips();\n    },\n    initTooltip: function initTooltip(el) {\n      _initTooltip(el);\n    },\n    initPopovers: function initPopovers() {\n      _initPopovers();\n    },\n    initPopover: function initPopover(el) {\n      _initPopover(el);\n    },\n    initCard: function initCard(el, options) {\n      _initCard(el, options);\n    },\n    initCards: function initCards() {\n      _initCards();\n    },\n    initSticky: function (_initSticky) {\n      function initSticky() {\n        return _initSticky.apply(this, arguments);\n      }\n      initSticky.toString = function () {\n        return _initSticky.toString();\n      };\n      return initSticky;\n    }(function () {\n      initSticky();\n    }),\n    initAbsoluteDropdown: function initAbsoluteDropdown(context) {\n      _initAbsoluteDropdown(context);\n    },\n    block: function block(target, options) {\n      var el = $(target);\n      options = $.extend(true, {\n        opacity: 0.05,\n        overlayColor: '#000000',\n        type: '',\n        size: '',\n        state: 'primary',\n        centerX: true,\n        centerY: true,\n        message: '',\n        shadow: true,\n        width: 'auto'\n      }, options);\n      var html;\n      var version = options.type ? 'spinner-' + options.type : '';\n      var state = options.state ? 'spinner-' + options.state : '';\n      var size = options.size ? 'spinner-' + options.size : '';\n      var spinner = '<span class=\"spinner ' + version + ' ' + state + ' ' + size + '\"></span';\n      if (options.message && options.message.length > 0) {\n        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n        html = '<div class=\"' + classes + '\"><span>' + options.message + '</span>' + spinner + '</div>';\n        var el = document.createElement('div');\n        $('body').prepend(el);\n        KTUtil.addClass(el, classes);\n        el.innerHTML = html;\n        options.width = KTUtil.actualWidth(el) + 10;\n        KTUtil.remove(el);\n        if (target == 'body') {\n          html = '<div class=\"' + classes + '\" style=\"margin-left:-' + options.width / 2 + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        }\n      } else {\n        html = spinner;\n      }\n      var params = {\n        message: html,\n        centerY: options.centerY,\n        centerX: options.centerX,\n        css: {\n          top: '30%',\n          left: '50%',\n          border: '0',\n          padding: '0',\n          backgroundColor: 'none',\n          width: options.width\n        },\n        overlayCSS: {\n          backgroundColor: options.overlayColor,\n          opacity: options.opacity,\n          cursor: 'wait',\n          zIndex: target == 'body' ? 1100 : 10\n        },\n        onUnblock: function onUnblock() {\n          if (el && el[0]) {\n            KTUtil.css(el[0], 'position', '');\n            KTUtil.css(el[0], 'zoom', '');\n          }\n        }\n      };\n      if (target == 'body') {\n        params.css.top = '50%';\n        $.blockUI(params);\n      } else {\n        var el = $(target);\n        el.block(params);\n      }\n    },\n    unblock: function unblock(target) {\n      if (target && target != 'body') {\n        $(target).unblock();\n      } else {\n        $.unblockUI();\n      }\n    },\n    blockPage: function blockPage(options) {\n      return KTApp.block('body', options);\n    },\n    unblockPage: function unblockPage() {\n      return KTApp.unblock('body');\n    },\n    getSettings: function getSettings() {\n      return settings;\n    }\n  };\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n}\n\n// Initialize KTApp class on document ready\n$(document).ready(function () {\n  KTApp.init(KTAppSettings);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/app.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/card.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/card.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTCard = function KTCard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    toggleSpeed: 400,\n    sticky: {\n      releseOnReverse: false,\n      offset: 300,\n      zIndex: 101\n    }\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('card')) {\n        the = KTUtil.data(element).get('card');\n      } else {\n        // reset menu\n        Plugin.init(options);\n\n        // build menu\n        Plugin.build();\n        KTUtil.data(element).set('card', the);\n      }\n      return the;\n    },\n    /**\r\n     * Init card\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.header = KTUtil.child(element, '.card-header');\n      the.footer = KTUtil.child(element, '.card-footer');\n      if (KTUtil.child(element, '.card-body')) {\n        the.body = KTUtil.child(element, '.card-body');\n      } else if (KTUtil.child(element, '.form')) {\n        the.body = KTUtil.child(element, '.form');\n      }\n    },\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Remove\n      var remove = KTUtil.find(the.header, '[data-card-tool=remove]');\n      if (remove) {\n        KTUtil.addEvent(remove, 'click', function (e) {\n          e.preventDefault();\n          Plugin.remove();\n        });\n      }\n\n      // Reload\n      var reload = KTUtil.find(the.header, '[data-card-tool=reload]');\n      if (reload) {\n        KTUtil.addEvent(reload, 'click', function (e) {\n          e.preventDefault();\n          Plugin.reload();\n        });\n      }\n\n      // Toggle\n      var toggle = KTUtil.find(the.header, '[data-card-tool=toggle]');\n      if (toggle) {\n        KTUtil.addEvent(toggle, 'click', function (e) {\n          e.preventDefault();\n          Plugin.toggle();\n        });\n      }\n    },\n    /**\r\n     * Enable stickt mode\r\n     */\n    initSticky: function initSticky() {\n      var lastScrollTop = 0;\n      var offset = the.options.sticky.offset;\n      if (!the.header) {\n        return;\n      }\n      window.addEventListener('scroll', Plugin.onScrollSticky);\n    },\n    /**\r\n     * Window scroll handle event for sticky card\r\n     */\n    onScrollSticky: function onScrollSticky(e) {\n      var offset = the.options.sticky.offset;\n      if (isNaN(offset)) return;\n      var st = KTUtil.getScrollTop();\n      if (st >= offset && KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        Plugin.eventTrigger('stickyOn');\n        KTUtil.addClass(body, 'card-sticky-on');\n        Plugin.updateSticky();\n      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'card-sticky-on')) {\n        // Back scroll mode\n        Plugin.eventTrigger('stickyOff');\n        KTUtil.removeClass(body, 'card-sticky-on');\n        Plugin.resetSticky();\n      }\n    },\n    updateSticky: function updateSticky() {\n      if (!the.header) {\n        return;\n      }\n      var top;\n      if (KTUtil.hasClass(body, 'card-sticky-on')) {\n        if (the.options.sticky.position.top instanceof Function) {\n          top = parseInt(the.options.sticky.position.top.call(this, the));\n        } else {\n          top = parseInt(the.options.sticky.position.top);\n        }\n        var left;\n        if (the.options.sticky.position.left instanceof Function) {\n          left = parseInt(the.options.sticky.position.left.call(this, the));\n        } else {\n          left = parseInt(the.options.sticky.position.left);\n        }\n        var right;\n        if (the.options.sticky.position.right instanceof Function) {\n          right = parseInt(the.options.sticky.position.right.call(this, the));\n        } else {\n          right = parseInt(the.options.sticky.position.right);\n        }\n        KTUtil.css(the.header, 'z-index', the.options.sticky.zIndex);\n        KTUtil.css(the.header, 'top', top + 'px');\n        KTUtil.css(the.header, 'left', left + 'px');\n        KTUtil.css(the.header, 'right', right + 'px');\n      }\n    },\n    resetSticky: function resetSticky() {\n      if (!the.header) {\n        return;\n      }\n      if (KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        KTUtil.css(the.header, 'z-index', '');\n        KTUtil.css(the.header, 'top', '');\n        KTUtil.css(the.header, 'left', '');\n        KTUtil.css(the.header, 'right', '');\n      }\n    },\n    /**\r\n     * Remove card\r\n     */\n    remove: function remove() {\n      if (Plugin.eventTrigger('beforeRemove') === false) {\n        return;\n      }\n      KTUtil.remove(element);\n      Plugin.eventTrigger('afterRemove');\n    },\n    /**\r\n     * Set content\r\n     */\n    setContent: function setContent(html) {\n      if (html) {\n        the.body.innerHTML = html;\n      }\n    },\n    /**\r\n     * Get body\r\n     */\n    getBody: function getBody() {\n      return the.body;\n    },\n    /**\r\n     * Get self\r\n     */\n    getSelf: function getSelf() {\n      return element;\n    },\n    /**\r\n     * Reload\r\n     */\n    reload: function reload() {\n      Plugin.eventTrigger('reload');\n    },\n    /**\r\n     * Toggle\r\n     */\n    toggle: function toggle() {\n      if (KTUtil.hasClass(element, 'card-collapse') || KTUtil.hasClass(element, 'card-collapsed')) {\n        Plugin.expand();\n      } else {\n        Plugin.collapse();\n      }\n    },\n    /**\r\n     * Collapse\r\n     */\n    collapse: function collapse() {\n      if (Plugin.eventTrigger('beforeCollapse') === false) {\n        return;\n      }\n      KTUtil.slideUp(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterCollapse');\n      });\n      KTUtil.addClass(element, 'card-collapse');\n    },\n    /**\r\n     * Expand\r\n     */\n    expand: function expand() {\n      if (Plugin.eventTrigger('beforeExpand') === false) {\n        return;\n      }\n      KTUtil.slideDown(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterExpand');\n      });\n      KTUtil.removeClass(element, 'card-collapse');\n      KTUtil.removeClass(element, 'card-collapsed');\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Remove card\r\n   */\n  the.remove = function () {\n    return Plugin.remove(html);\n  };\n\n  /**\r\n   * Init sticky card\r\n   */\n  the.initSticky = function () {\n    return Plugin.initSticky();\n  };\n\n  /**\r\n   * Rerender sticky layout\r\n   */\n  the.updateSticky = function () {\n    return Plugin.updateSticky();\n  };\n\n  /**\r\n   * Reset the sticky\r\n   */\n  the.resetSticky = function () {\n    return Plugin.resetSticky();\n  };\n\n  /**\r\n   * Destroy sticky card\r\n   */\n  the.destroySticky = function () {\n    Plugin.resetSticky();\n    window.removeEventListener('scroll', Plugin.onScrollSticky);\n  };\n\n  /**\r\n   * Reload card\r\n   */\n  the.reload = function () {\n    return Plugin.reload();\n  };\n\n  /**\r\n   * Set card content\r\n   */\n  the.setContent = function (html) {\n    return Plugin.setContent(html);\n  };\n\n  /**\r\n   * Toggle card\r\n   */\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n\n  /**\r\n   * Collapse card\r\n   */\n  the.collapse = function () {\n    return Plugin.collapse();\n  };\n\n  /**\r\n   * Expand card\r\n   */\n  the.expand = function () {\n    return Plugin.expand();\n  };\n\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n  the.getBody = function () {\n    return Plugin.getBody();\n  };\n\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n  the.getSelf = function () {\n    return Plugin.getSelf();\n  };\n\n  /**\r\n   * Attach event\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  // Construct plugin\n  Plugin.construct.apply(the, [options]);\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/card.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/cookie.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/cookie.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// DOCS: https://javascript.info/cookie\n\n// Component Definition\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    getCookie: function getCookie(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    setCookie: function setCookie(name, value, options) {\n      if (!options) {\n        options = {};\n      }\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n      for (var optionKey in options) {\n        if (!options.hasOwnProperty(optionKey)) {\n          continue;\n        }\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n      document.cookie = updatedCookie;\n    },\n    // To delete a cookie, we can call it with a negative expiration date:\n    deleteCookie: function deleteCookie(name) {\n      setCookie(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9jb29raWUuanM/MTlhMiJdLCJuYW1lcyI6WyJLVENvb2tpZSIsImdldENvb2tpZSIsIm5hbWUiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJjb29raWUiLCJtYXRjaCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ1bmRlZmluZWQiLCJzZXRDb29raWUiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiZXhwaXJlcyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInVwZGF0ZWRDb29raWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcHRpb25LZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvblZhbHVlIiwiZGVsZXRlQ29va2llIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2I7O0FBRUE7QUFDQSxJQUFJQSxRQUFRLEdBQUcsWUFBVztFQUN4QixPQUFPO0lBQ0w7SUFDQTtJQUNBQyxTQUFTLEVBQUUsbUJBQVNDLElBQUksRUFBRTtNQUN4QixJQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUM1QyxVQUFVLEdBQUdMLElBQUksQ0FBQ00sT0FBTyxDQUFDLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FDL0UsQ0FBQztNQUNGLE9BQU9MLE9BQU8sR0FBR00sa0JBQWtCLENBQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHTyxTQUFTO0lBQzdELENBQUM7SUFDRDtJQUNBO0lBQ0FDLFNBQVMsRUFBRSxtQkFBU1QsSUFBSSxFQUFFVSxLQUFLLEVBQUVDLE9BQU8sRUFBRTtNQUN4QyxJQUFJLENBQUNBLE9BQU8sRUFBRTtRQUNWQSxPQUFPLEdBQUcsQ0FBQyxDQUFDO01BQ2hCO01BRUFBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFBQ0MsSUFBSSxFQUFFO01BQUcsQ0FBQyxFQUFFSCxPQUFPLENBQUM7TUFFakQsSUFBSUEsT0FBTyxDQUFDSSxPQUFPLFlBQVlDLElBQUksRUFBRTtRQUNuQ0wsT0FBTyxDQUFDSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDRSxXQUFXLEVBQUU7TUFDakQ7TUFFQSxJQUFJQyxhQUFhLEdBQUdDLGtCQUFrQixDQUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHbUIsa0JBQWtCLENBQUNULEtBQUssQ0FBQztNQUU5RSxLQUFLLElBQUlVLFNBQVMsSUFBSVQsT0FBTyxFQUFFO1FBQzdCLElBQUksQ0FBQ0EsT0FBTyxDQUFDVSxjQUFjLENBQUNELFNBQVMsQ0FBQyxFQUFFO1VBQ3RDO1FBQ0Y7UUFDQUYsYUFBYSxJQUFJLElBQUksR0FBR0UsU0FBUztRQUNqQyxJQUFJRSxXQUFXLEdBQUdYLE9BQU8sQ0FBQ1MsU0FBUyxDQUFDO1FBQ3BDLElBQUlFLFdBQVcsS0FBSyxJQUFJLEVBQUU7VUFDeEJKLGFBQWEsSUFBSSxHQUFHLEdBQUdJLFdBQVc7UUFDcEM7TUFDRjtNQUVBcEIsUUFBUSxDQUFDQyxNQUFNLEdBQUdlLGFBQWE7SUFDakMsQ0FBQztJQUNEO0lBQ0FLLFlBQVksRUFBRSxzQkFBU3ZCLElBQUksRUFBRTtNQUMzQlMsU0FBUyxDQUFDVCxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO01BQ2QsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDO0FBQ0gsQ0FBQyxFQUFFOztBQUVIO0FBQ0EsSUFBSSxLQUE2QixJQUFJLE9BQU93QixNQUFNLENBQUNDLE9BQU8sS0FBSyxXQUFXLEVBQUU7RUFDMUVELE1BQU0sQ0FBQ0MsT0FBTyxHQUFHM0IsUUFBUTtBQUMzQiIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2Nvb2tpZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBET0NTOiBodHRwczovL2phdmFzY3JpcHQuaW5mby9jb29raWVcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVENvb2tpZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICAvLyByZXR1cm5zIHRoZSBjb29raWUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSxcclxuICAgIC8vIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcclxuICAgIGdldENvb2tpZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKFxyXG4gICAgICAgIFwiKD86Xnw7IClcIiArIG5hbWUucmVwbGFjZSgvKFtcXC4kPyp8e31cXChcXClcXFtcXF1cXFxcXFwvXFwrXl0pL2csICdcXFxcJDEnKSArIFwiPShbXjtdKilcIlxyXG4gICAgICApKTtcclxuICAgICAgcmV0dXJuIG1hdGNoZXMgPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG4gICAgLy8gUGxlYXNlIG5vdGUgdGhhdCBhIGNvb2tpZSB2YWx1ZSBpcyBlbmNvZGVkLFxyXG4gICAgLy8gc28gZ2V0Q29va2llIHVzZXMgYSBidWlsdC1pbiBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24gdG8gZGVjb2RlIGl0LlxyXG4gICAgc2V0Q29va2llOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtwYXRoOiAnLyd9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5leHBpcmVzID0gb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB1cGRhdGVkQ29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuICAgICAgZm9yICh2YXIgb3B0aW9uS2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uS2V5KSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xyXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IG9wdGlvbnNbb3B0aW9uS2V5XTtcclxuICAgICAgICBpZiAob3B0aW9uVmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XHJcbiAgICB9LFxyXG4gICAgLy8gVG8gZGVsZXRlIGEgY29va2llLCB3ZSBjYW4gY2FsbCBpdCB3aXRoIGEgbmVnYXRpdmUgZXhwaXJhdGlvbiBkYXRlOlxyXG4gICAgZGVsZXRlQ29va2llOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHNldENvb2tpZShuYW1lLCBcIlwiLCB7XHJcbiAgICAgICAgJ21heC1hZ2UnOiAtMVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufSgpO1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBLVENvb2tpZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/cookie.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/core.datatable.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/core.datatable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  var util = KTUtil;\n  var app = KTApp;\n  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName);\n\n  // plugin setup\n  $.fn[pluginName] = function (options) {\n    if ($(this).length === 0) {\n      console.warn('No ' + pluginName + ' element exist.');\n      return;\n    }\n\n    // global variables\n    var datatable = this;\n\n    // debug enabled?\n    // 1) state will be cleared on each refresh\n    // 2) enable some logs\n    // 3) etc.\n    datatable.debug = false;\n    datatable.API = {\n      record: null,\n      value: null,\n      params: null\n    };\n    var Plugin = {\n      /********************\r\n       ** PRIVATE METHODS\r\n       ********************/\n      isInit: false,\n      cellOffset: 110,\n      iconOffset: 15,\n      stateId: 'meta',\n      ajaxParams: {},\n      pagingObject: {},\n      init: function init(options) {\n        var isHtmlTable = false;\n        // data source option empty is normal table\n        if (options.data.source === null) {\n          Plugin.extractTable();\n          isHtmlTable = true;\n        }\n        Plugin.setupBaseDOM.call();\n        Plugin.setupDOM(datatable.table);\n\n        // on event after layout had done setup, show datatable\n        $(datatable).on(pfx + 'datatable-on-layout-updated', Plugin.afterRender);\n        if (datatable.debug) {\n          Plugin.stateRemove(Plugin.stateId);\n        }\n\n        /*var es = Plugin.stateGet(Plugin.stateId);\r\n        var eq = {};\r\n        if (es && es.hasOwnProperty('query')) {\r\n        \teq = es.query;\r\n        }\r\n        Plugin.setDataSourceQuery(Object.assign({}, eq, Plugin.getOption('data.source.read.params.query')));*/\n\n        // set custom query from options\n        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query'));\n\n        // initialize extensions\n        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {\n          if (typeof $.fn[pluginName][extName] === 'function') {\n            if (_typeof(extOptions) !== 'object') {\n              extOptions = $.extend({}, extOptions);\n            }\n            new $.fn[pluginName][extName](datatable, extOptions);\n          }\n        });\n        Plugin.spinnerCallback(true);\n        // get data\n        if (options.data.type === 'remote' || options.data.type === 'local') {\n          if (options.data.saveState === false) {\n            Plugin.stateRemove(Plugin.stateId);\n          }\n          // get data for local datatable and local table\n          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {\n            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);\n          }\n          Plugin.dataRender();\n        }\n\n        // if html table, remove and setup a new header\n        if (isHtmlTable) {\n          $(datatable.tableHead).find('tr').remove();\n          $(datatable.tableFoot).find('tr').remove();\n        }\n        Plugin.setHeadTitle();\n        if (Plugin.getOption('layout.footer')) {\n          Plugin.setHeadTitle(datatable.tableFoot);\n        }\n\n        // hide header\n        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {\n          $(datatable.table).find('thead').remove();\n        }\n\n        // hide footer\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {\n          $(datatable.table).find('tfoot').remove();\n        }\n\n        // for normal and local data type, run layoutUpdate\n        if (options.data.type === null || options.data.type === 'local') {\n          Plugin.setupCellField.call();\n          Plugin.setupTemplateCell.call();\n\n          // setup nested datatable, if option enabled\n          Plugin.setupSubDatatable.call();\n\n          // setup extra system column properties\n          Plugin.setupSystemColumn.call();\n          Plugin.redraw();\n        }\n        var width;\n        var initialWidth = false;\n        $(window).resize(function () {\n          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing\n          // trigger datatable resize on width change only\n          if ($(this).width() !== width) {\n            width = $(this).width();\n            Plugin.fullRender();\n          }\n          // get initial width\n          if (!initialWidth) {\n            width = $(this).width();\n            initialWidth = true;\n          }\n        });\n        $(datatable).height('');\n        var prevKeyword = '';\n        $(Plugin.getOption('search.input')).on('keyup', function (e) {\n          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;\n          var keyword = $(this).val();\n          // prevent multiple search request on every button keyup\n          if (prevKeyword !== keyword) {\n            Plugin.search(keyword);\n            prevKeyword = keyword;\n          }\n        });\n        return datatable;\n      },\n      /**\r\n       * Extract static HTML table content into datasource\r\n       */\n      extractTable: function extractTable() {\n        var columns = [];\n        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {\n          var field = $(cell).data('field');\n          var title = $(cell).data('title');\n          if (typeof field === 'undefined') {\n            field = $(cell).text().trim();\n          }\n          if (typeof title === 'undefined') {\n            title = $(cell).text().trim();\n          }\n          var column = {\n            field: field,\n            title: title\n          };\n          for (var ii in options.columns) {\n            if (options.columns[ii].field === field) {\n              column = $.extend(true, {}, options.columns[ii], column);\n            }\n          }\n          columns.push(column);\n          return field;\n        });\n        // auto create columns config\n        options.columns = columns;\n        var rowProp = [];\n        var source = [];\n        $(datatable).find('tr').each(function () {\n          if ($(this).find('td').length) {\n            rowProp.push($(this).prop('attributes'));\n          }\n          var td = {};\n          $(this).find('td').each(function (i, cell) {\n            td[headers[i]] = cell.innerHTML.trim();\n          });\n          if (!util.isEmpty(td)) {\n            source.push(td);\n          }\n        });\n        options.data.attr.rowProps = rowProp;\n        options.data.source = source;\n      },\n      /**\r\n       * One time layout update on init\r\n       */\n      layoutUpdate: function layoutUpdate() {\n        // setup nested datatable, if option enabled\n        Plugin.setupSubDatatable.call();\n\n        // setup extra system column properties\n        Plugin.setupSystemColumn.call();\n\n        // setup cell hover event\n        Plugin.setupHover.call();\n        if (typeof options.detail === 'undefined'\n        // temporary disable lock column in subtable\n        && Plugin.getDepth() === 1) {\n          // lock columns handler\n          Plugin.lockTable.call();\n        }\n        Plugin.resetScroll();\n\n        // check if not is a locked column\n        if (!Plugin.isLocked()) {\n          Plugin.redraw.call();\n          // check if its not a subtable and has autoHide option enabled\n          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {\n            Plugin.autoHide();\n          }\n          // reset row\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('height', '');\n        }\n        Plugin.columnHide.call();\n        Plugin.rowEvenOdd.call();\n        Plugin.sorting.call();\n        Plugin.scrollbar.call();\n        if (!Plugin.isInit) {\n          // run once dropdown inside datatable\n          Plugin.dropdownFix();\n          $(datatable).trigger(pfx + 'datatable-on-init', {\n            table: $(datatable.wrap).attr('id'),\n            options: options\n          });\n          Plugin.isInit = true;\n        }\n        $(datatable).trigger(pfx + 'datatable-on-layout-updated', {\n          table: $(datatable.wrap).attr('id')\n        });\n      },\n      dropdownFix: function dropdownFix() {\n        var dropdownMenu;\n        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          dropdownMenu = $(e.target).find('.dropdown-menu');\n          $('body').append(dropdownMenu.detach());\n          dropdownMenu.css('display', 'block');\n          dropdownMenu.position({\n            'my': 'right top',\n            'at': 'right bottom',\n            'of': $(e.relatedTarget)\n          });\n          // if datatable is inside modal\n          if (datatable.closest('.modal').length) {\n            // increase dropdown z-index\n            dropdownMenu.css('z-index', '2000');\n          }\n        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          $(e.target).append(dropdownMenu.detach());\n          dropdownMenu.hide();\n        });\n\n        // remove dropdown if window resize\n        $(window).on('resize', function (e) {\n          if (typeof dropdownMenu !== 'undefined') {\n            dropdownMenu.hide();\n          }\n        });\n      },\n      lockTable: function lockTable() {\n        var lock = {\n          lockEnabled: false,\n          init: function init() {\n            // check if table should be locked columns\n            lock.lockEnabled = Plugin.lockEnabledColumns();\n            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {\n              return;\n            }\n            lock.enable();\n          },\n          enable: function enable() {\n            var enableLock = function enableLock(tablePart) {\n              // check if already has lock column\n              if ($(tablePart).find('.' + pfx + 'datatable-lock').length > 0) {\n                Plugin.log('Locked container already exist in: ', tablePart);\n                return;\n              }\n              // check if no rows exists\n              if ($(tablePart).find('.' + pfx + 'datatable-row').length === 0) {\n                Plugin.log('No row exist in: ', tablePart);\n                return;\n              }\n\n              // locked div container\n              var lockLeft = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-left');\n              var lockScroll = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-scroll');\n              var lockRight = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-right');\n              $(tablePart).find('.' + pfx + 'datatable-row').each(function () {\n                // create new row for lock columns and pass the data\n                var rowLeft = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockLeft);\n                var rowScroll = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockScroll);\n                var rowRight = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockRight);\n                $(this).find('.' + pfx + 'datatable-cell').each(function () {\n                  var locked = $(this).data('locked');\n                  if (typeof locked !== 'undefined') {\n                    if (typeof locked.left !== 'undefined' || locked === true) {\n                      // default locked to left\n                      $(this).appendTo(rowLeft);\n                    }\n                    if (typeof locked.right !== 'undefined') {\n                      $(this).appendTo(rowRight);\n                    }\n                  } else {\n                    $(this).appendTo(rowScroll);\n                  }\n                });\n                // remove old row\n                $(this).remove();\n              });\n              if (lock.lockEnabled.left.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockLeft).appendTo(tablePart);\n              }\n              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {\n                $(lockScroll).appendTo(tablePart);\n              }\n              if (lock.lockEnabled.right.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockRight).appendTo(tablePart);\n              }\n            };\n            $(datatable.table).find('thead,tbody,tfoot').each(function () {\n              var tablePart = this;\n              if ($(this).find('.' + pfx + 'datatable-lock').length === 0) {\n                $(this).ready(function () {\n                  enableLock(tablePart);\n                });\n              }\n            });\n          }\n        };\n        lock.init();\n        return lock;\n      },\n      /**\r\n       * Render everything for resize\r\n       */\n      fullRender: function fullRender() {\n        $(datatable.tableHead).empty();\n        Plugin.setHeadTitle();\n        if (Plugin.getOption('layout.footer')) {\n          $(datatable.tableFoot).empty();\n          Plugin.setHeadTitle(datatable.tableFoot);\n        }\n        Plugin.spinnerCallback(true);\n        $(datatable.wrap).removeClass(pfx + 'datatable-loaded');\n        Plugin.insertData();\n      },\n      lockEnabledColumns: function lockEnabledColumns() {\n        var screen = $(window).width();\n        var columns = options.columns;\n        var enabled = {\n          left: [],\n          right: []\n        };\n        $.each(columns, function (i, column) {\n          if (typeof column.locked !== 'undefined') {\n            if (typeof column.locked.left !== 'undefined') {\n              if (util.getBreakpoint(column.locked.left) <= screen) {\n                enabled['left'].push(column.locked.left);\n              }\n            }\n            if (typeof column.locked.right !== 'undefined') {\n              if (util.getBreakpoint(column.locked.right) <= screen) {\n                enabled['right'].push(column.locked.right);\n              }\n            }\n          }\n        });\n        return enabled;\n      },\n      /**\r\n       * After render event, called by \"datatable-on-layout-updated\"\r\n       * @param e\r\n       * @param args\r\n       */\n      afterRender: function afterRender(e, args) {\n        $(datatable).ready(function () {\n          // redraw locked columns table\n          if (Plugin.isLocked()) {\n            Plugin.redraw();\n          }\n          $(datatable.tableBody).css('visibility', '');\n          $(datatable.wrap).addClass(pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        });\n      },\n      hoverTimer: 0,\n      isScrolling: false,\n      setupHover: function setupHover() {\n        $(window).scroll(function (e) {\n          // stop hover when scrolling\n          clearTimeout(Plugin.hoverTimer);\n          Plugin.isScrolling = true;\n        });\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {\n          // reset scroll timer to hover class\n          Plugin.hoverTimer = setTimeout(function () {\n            Plugin.isScrolling = false;\n          }, 200);\n          if (Plugin.isScrolling) return;\n\n          // normal table\n          var row = $(this).closest('.' + pfx + 'datatable-row').addClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1;\n\n          // lock table\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').addClass(pfx + 'datatable-row-hover');\n        }).on('mouseleave', function () {\n          // normal table\n          var row = $(this).closest('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1;\n\n          // look table\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').removeClass(pfx + 'datatable-row-hover');\n        });\n      },\n      /**\r\n       * Adjust width of locked table containers by resize handler\r\n       * @returns {number}\r\n       */\n      adjustLockContainer: function adjustLockContainer() {\n        if (!Plugin.isLocked()) return 0;\n\n        // refer to head dimension\n        var containerWidth = $(datatable.tableHead).width();\n        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-left').width();\n        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-right').width();\n        if (typeof lockLeft === 'undefined') lockLeft = 0;\n        if (typeof lockRight === 'undefined') lockRight = 0;\n        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);\n        $(datatable.table).find('.' + pfx + 'datatable-lock-scroll').css('width', lockScroll);\n        return lockScroll;\n      },\n      /**\r\n       * todo; not in use\r\n       */\n      dragResize: function dragResize() {\n        var pressed = false;\n        var start = undefined;\n        var startX, startWidth;\n        $(datatable.tableHead).find('.' + pfx + 'datatable-cell').mousedown(function (e) {\n          start = $(this);\n          pressed = true;\n          startX = e.pageX;\n          startWidth = $(this).width();\n          $(start).addClass(pfx + 'datatable-cell-resizing');\n        }).mousemove(function (e) {\n          if (pressed) {\n            var i = $(start).index();\n            var tableBody = $(datatable.tableBody);\n            var ifLocked = $(start).closest('.' + pfx + 'datatable-lock');\n            if (ifLocked) {\n              var lockedIndex = $(ifLocked).index();\n              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable-lock').eq(lockedIndex);\n            }\n            $(tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n              $(tr).find('.' + pfx + 'datatable-cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));\n            });\n            $(start).children().css('width', startWidth + (e.pageX - startX));\n          }\n        }).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n        $(document).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n      },\n      /**\r\n       * To prepare placeholder for table before content is loading\r\n       */\n      initHeight: function initHeight() {\n        if (options.layout.height && options.layout.scroll) {\n          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable-row').outerHeight();\n          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable-row').outerHeight();\n          var bodyHeight = options.layout.height;\n          if (theadHeight > 0) {\n            bodyHeight -= theadHeight;\n          }\n          if (tfootHeight > 0) {\n            bodyHeight -= tfootHeight;\n          }\n\n          // scrollbar offset\n          bodyHeight -= 2;\n          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight)));\n\n          // set scrollable area fixed height\n          // $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll').css('height', Math.floor(parseFloat(bodyHeight)));\n        }\n      },\n\n      /**\r\n       * Setup base DOM (table, thead, tbody, tfoot) and create if not\r\n       * exist.\r\n       */\n      setupBaseDOM: function setupBaseDOM() {\n        // keep original state before datatable initialize\n        datatable.initialDatatable = $(datatable).clone();\n\n        // main element\n        if ($(datatable).prop('tagName') === 'TABLE') {\n          // if main init element is <table>, wrap with div\n          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable-table');\n          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {\n            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme));\n            datatable.wrap = $(datatable.table).parent();\n          }\n        } else {\n          // create table\n          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme);\n          datatable.table = $('<table/>').addClass(pfx + 'datatable-table').appendTo(datatable);\n        }\n        if (typeof options.layout[\"class\"] !== 'undefined') {\n          $(datatable.wrap).addClass(options.layout[\"class\"]);\n        }\n        $(datatable.table).removeClass(pfx + 'datatable-destroyed').css('display', 'block');\n\n        // force disable save state\n        if (typeof $(datatable).attr('id') === 'undefined') {\n          Plugin.setOption('data.saveState', false);\n          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable-'));\n        }\n\n        // predefine table height\n        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));\n        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height'));\n\n        // for normal table load\n        if (options.data.type === null) {\n          $(datatable.table).css('width', '').css('display', '');\n        }\n\n        // create table head element\n        datatable.tableHead = $(datatable.table).find('thead');\n        if ($(datatable.tableHead).length === 0) {\n          datatable.tableHead = $('<thead/>').prependTo(datatable.table);\n        }\n\n        // create table head element\n        datatable.tableBody = $(datatable.table).find('tbody');\n        if ($(datatable.tableBody).length === 0) {\n          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);\n        }\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {\n          // create table foot element\n          datatable.tableFoot = $(datatable.table).find('tfoot');\n          if ($(datatable.tableFoot).length === 0) {\n            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);\n          }\n        }\n      },\n      /**\r\n       * Set column data before table manipulation.\r\n       */\n      setupCellField: function setupCellField(tableParts) {\n        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();\n        var columns = options.columns;\n        $.each(tableParts, function (part, tablePart) {\n          $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n            // prepare data\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              if (typeof columns[tdi] !== 'undefined') {\n                $(td).data(columns[tdi]);\n              }\n            });\n          });\n        });\n      },\n      /**\r\n       * Set column template callback\r\n       * @param tablePart\r\n       */\n      setupTemplateCell: function setupTemplateCell(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        var columns = options.columns;\n        $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          // row data object, if any\n          var obj = $(tr).data('obj');\n          if (typeof obj === 'undefined') {\n            return;\n          }\n\n          // @deprecated in v5.0.6\n          // obj['getIndex'] = function() {\n          // \treturn tri;\n          // };\n          // @deprecated in v5.0.6\n          // obj['getDatatable'] = function() {\n          // \treturn datatable;\n          // };\n\n          // @deprecated in v5.0.6\n          var rowCallback = Plugin.getOption('rows.callback');\n          if (typeof rowCallback === 'function') {\n            rowCallback($(tr), obj, tri);\n          }\n          // before template row callback\n          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');\n          if (typeof beforeTemplate === 'function') {\n            beforeTemplate($(tr), obj, tri);\n          }\n          // if data object is undefined, collect from table\n          if (typeof obj === 'undefined') {\n            obj = {};\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              // get column settings by field\n              var column = $.grep(columns, function (n, i) {\n                return $(td).data('field') === n.field;\n              })[0];\n              if (typeof column !== 'undefined') {\n                obj[column['field']] = $(td).text();\n              }\n            });\n          }\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n            if (typeof column !== 'undefined') {\n              // column template\n              if (typeof column.template !== 'undefined') {\n                var finalValue = '';\n                // template string\n                if (typeof column.template === 'string') {\n                  finalValue = Plugin.dataPlaceholder(column.template, obj);\n                }\n                // template callback function\n                if (typeof column.template === 'function') {\n                  finalValue = column.template(obj, tri, datatable);\n                }\n\n                // sanitize using DOMPurify if installed\n                if (typeof DOMPurify !== 'undefined') {\n                  finalValue = DOMPurify.sanitize(finalValue);\n                }\n                var span = document.createElement('span');\n                span.innerHTML = finalValue;\n\n                // insert to cell, wrap with span\n                $(td).html(span);\n\n                // set span overflow\n                if (typeof column.overflow !== 'undefined') {\n                  $(span).css('overflow', column.overflow);\n                  $(span).css('position', 'relative');\n                }\n              }\n            }\n          });\n\n          // after template row callback\n          var afterTemplate = Plugin.getOption('rows.afterTemplate');\n          if (typeof afterTemplate === 'function') {\n            afterTemplate($(tr), obj, tri);\n          }\n        });\n      },\n      /**\r\n       * Setup extra system column properties\r\n       * Note: selector checkbox, subtable toggle\r\n       */\n      setupSystemColumn: function setupSystemColumn() {\n        datatable.dataSet = datatable.dataSet || [];\n        // no records available\n        if (datatable.dataSet.length === 0) return;\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n            if (typeof column !== 'undefined') {\n              var value = $(td).text();\n\n              // enable column selector\n              if (typeof column.selector !== 'undefined' && column.selector !== false) {\n                // check if checkbox exist\n                if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n                $(td).addClass(pfx + 'datatable-cell-check');\n\n                // append checkbox\n                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {\n                  if ($(this).is(':checked')) {\n                    // add checkbox active row class\n                    Plugin.setActive(this);\n                  } else {\n                    // add checkbox active row class\n                    Plugin.setInactive(this);\n                  }\n                })).append('&nbsp;<span></span>');\n\n                // checkbox selector has outline style\n                if (typeof column.selector[\"class\"] !== 'undefined') {\n                  $(chk).addClass(column.selector[\"class\"]);\n                }\n                $(td).children().html(chk);\n              }\n\n              // enable column subtable toggle\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return;\n                // append subtable toggle\n                $(td).children().html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        });\n\n        // init checkbox for header/footer\n        var initCheckbox = function initCheckbox(tr) {\n          // get column settings by field\n          var column = $.grep(columns, function (n, i) {\n            return typeof n.selector !== 'undefined' && n.selector !== false;\n          })[0];\n          if (typeof column !== 'undefined') {\n            // enable column selector\n            if (typeof column.selector !== 'undefined' && column.selector !== false) {\n              var td = $(tr).find('[data-field=\"' + column.field + '\"]');\n              // check if checkbox exist\n              if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n              $(td).addClass(pfx + 'datatable-cell-check');\n\n              // append checkbox\n              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single ' + pfx + 'checkbox-all').append($('<input/>').attr('type', 'checkbox').on('click', function () {\n                if ($(this).is(':checked')) {\n                  Plugin.setActiveAll(true);\n                } else {\n                  Plugin.setActiveAll(false);\n                }\n              })).append('&nbsp;<span></span>');\n\n              // checkbox selector has outline style\n              if (typeof column.selector[\"class\"] !== 'undefined') {\n                $(chk).addClass(column.selector[\"class\"]);\n              }\n              $(td).children().html(chk);\n            }\n          }\n        };\n        if (options.layout.header) {\n          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable-row').first());\n        }\n        if (options.layout.footer) {\n          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable-row').first());\n        }\n      },\n      maxWidthList: {},\n      /**\r\n       * Adjust width to match container size\r\n       */\n      adjustCellsWidth: function adjustCellsWidth() {\n        // get table width\n        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset;\n\n        // get total number of columns\n        var columns = $(datatable.tableHead).find('.' + pfx + 'datatable-row:first-child').find('.' + pfx + 'datatable-cell').\n        // exclude expand icon\n        not('.' + pfx + 'datatable-toggle-detail').not(':hidden').length;\n        if (columns > 0) {\n          //  remove reserved sort icon width\n          containerWidth = containerWidth - Plugin.iconOffset * columns;\n          var minWidth = Math.floor(containerWidth / columns);\n\n          // minimum width\n          if (minWidth <= Plugin.cellOffset) {\n            minWidth = Plugin.cellOffset;\n          }\n          $(datatable.table).find('.' + pfx + 'datatable-row').find('.' + pfx + 'datatable-cell').\n          // exclude expand icon\n          not('.' + pfx + 'datatable-toggle-detail').not(':hidden').each(function (tdi, td) {\n            var width = minWidth;\n            var dataWidth = $(td).data('width');\n            if (typeof dataWidth !== 'undefined') {\n              if (dataWidth === 'auto') {\n                var field = $(td).data('field');\n                if (Plugin.maxWidthList[field]) {\n                  width = Plugin.maxWidthList[field];\n                } else {\n                  var cells = $(datatable.table).find('.' + pfx + 'datatable-cell[data-field=\"' + field + '\"]');\n                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {\n                    return $(this).outerWidth();\n                  }).get());\n                }\n              } else {\n                width = dataWidth;\n              }\n            }\n            $(td).children().css('width', Math.ceil(width));\n          });\n        }\n        return datatable;\n      },\n      /**\r\n       * Adjust height to match container size\r\n       */\n      adjustCellsHeight: function adjustCellsHeight() {\n        $.each($(datatable.table).children(), function (part, tablePart) {\n          var totalRows = $(tablePart).find('.' + pfx + 'datatable-row').first().parent().find('.' + pfx + 'datatable-row').length;\n          for (var i = 1; i <= totalRows; i++) {\n            var rows = $(tablePart).find('.' + pfx + 'datatable-row:nth-child(' + i + ')');\n            if ($(rows).length > 0) {\n              var maxHeight = Math.max.apply(null, $(rows).map(function () {\n                return $(this).outerHeight();\n              }).get());\n              $(rows).css('height', Math.ceil(maxHeight));\n            }\n          }\n        });\n      },\n      /**\r\n       * Setup table DOM and classes\r\n       */\n      setupDOM: function setupDOM(table) {\n        // set table classes\n        $(table).find('> thead').addClass(pfx + 'datatable-head');\n        $(table).find('> tbody').addClass(pfx + 'datatable-body');\n        $(table).find('> tfoot').addClass(pfx + 'datatable-foot');\n        $(table).find('tr').addClass(pfx + 'datatable-row');\n        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable-cell');\n        $(table).find('tr > th, tr > td').each(function (i, td) {\n          if ($(td).find('span').length === 0) {\n            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));\n          }\n        });\n      },\n      /**\r\n       * Default scrollbar\r\n       * @returns {{tableLocked: null, init: init, onScrolling:\r\n       *     onScrolling}}\r\n       */\n      scrollbar: function scrollbar() {\n        var scroll = {\n          scrollable: null,\n          tableLocked: null,\n          initPosition: null,\n          init: function init() {\n            var screen = util.getViewPort().width;\n            // setup scrollable datatable\n            if (options.layout.scroll) {\n              // add scrollable datatable class\n              $(datatable.wrap).addClass(pfx + 'datatable-scroll');\n              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll');\n\n              // check if scrollable area have rows\n              if ($(scrollable).find('.' + pfx + 'datatable-row').length > 0 && $(scrollable).length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:not(.' + pfx + 'datatable-lock-scroll)');\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(scrollable[0]);\n                } else {\n                  scroll.initDefaultScrollbar(scrollable);\n                }\n              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable-row').length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-row');\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(datatable.tableBody);\n                } else {\n                  scroll.initDefaultScrollbar(datatable.tableBody);\n                }\n              }\n            }\n          },\n          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {\n            // get initial scroll position\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);\n            $(scrollable).css('overflow-x', 'auto');\n          },\n          onScrolling: function onScrolling(e) {\n            var left = $(this).scrollLeft();\n            var top = $(this).scrollTop();\n            if (util.isRTL()) {\n              // deduct initial position for RTL\n              left = left - scroll.initPosition;\n            }\n            $(scroll.scrollHead).css('left', -left);\n            $(scroll.scrollFoot).css('left', -left);\n            $(scroll.tableLocked).each(function (i, table) {\n              if (Plugin.isLocked()) {\n                // scrollbar offset\n                top -= 1;\n              }\n              $(table).css('top', -top);\n            });\n          },\n          initCustomScrollbar: function initCustomScrollbar(scrollable) {\n            scroll.scrollable = scrollable;\n            // create a new instance for table body with scrollbar\n            Plugin.initScrollbar(scrollable);\n            // get initial scroll position\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).off().on('scroll', scroll.onScrolling);\n          }\n        };\n        scroll.init();\n        return scroll;\n      },\n      /**\r\n       * Init custom scrollbar and reset position\r\n       * @param element\r\n       * @param options\r\n       */\n      initScrollbar: function initScrollbar(element, options) {\n        if (!element || !element.nodeName) {\n          return;\n        }\n        $(datatable.tableBody).css('overflow', '');\n        var ps = $(element).data('ps');\n        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {\n          ps.update();\n        } else {\n          ps = new PerfectScrollbar(element, Object.assign({}, {\n            wheelSpeed: 0.5,\n            swipeEasing: true,\n            // wheelPropagation: false,\n            minScrollbarLength: 40,\n            maxScrollbarLength: 300,\n            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()\n          }, options));\n          $(element).data('ps', ps);\n        }\n\n        // reset perfect scrollbar on resize\n        $(window).resize(function () {\n          ps.update();\n        });\n      },\n      /**\r\n       * Set column title from options.columns settings\r\n       */\n      setHeadTitle: function setHeadTitle(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;\n        tablePart = $(tablePart)[0];\n        var columns = options.columns;\n        var row = tablePart.getElementsByTagName('tr')[0];\n        var ths = tablePart.getElementsByTagName('td');\n        if (typeof row === 'undefined') {\n          row = document.createElement('tr');\n          tablePart.appendChild(row);\n        }\n        $.each(columns, function (i, column) {\n          var th = ths[i];\n          if (typeof th === 'undefined') {\n            th = document.createElement('th');\n            row.appendChild(th);\n          }\n\n          // set column title\n          if (typeof column['title'] !== 'undefined') {\n            th.innerHTML = column.title;\n            th.setAttribute('data-field', column.field);\n            util.addClass(th, column[\"class\"]);\n            // set disable autoHide or force enable\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                th.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                th.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n            $(th).data(column);\n          }\n\n          // set header attr option\n          if (typeof column.attr !== 'undefined') {\n            $.each(column.attr, function (key, val) {\n              th.setAttribute(key, val);\n            });\n          }\n\n          // apply text align to thead/tfoot\n          if (typeof column.textAlign !== 'undefined') {\n            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n            util.addClass(th, align);\n          }\n        });\n        Plugin.setupDOM(tablePart);\n      },\n      /**\r\n       * Initiate to get remote or local data via ajax\r\n       */\n      dataRender: function dataRender(action) {\n        $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');\n        var buildMeta = function buildMeta() {\n          datatable.dataSet = datatable.dataSet || [];\n          Plugin.localDataUpdate();\n          // local pagination meta\n          var meta = Plugin.getDataSourceParam('pagination');\n          if (meta.perpage === 0) {\n            meta.perpage = options.data.pageSize || 10;\n          }\n          meta.total = datatable.dataSet.length;\n          var start = Math.max(meta.perpage * (meta.page - 1), 0);\n          var end = Math.min(start + meta.perpage, meta.total);\n          datatable.dataSet = $(datatable.dataSet).slice(start, end);\n          return meta;\n        };\n        var afterGetData = function afterGetData(result) {\n          var localPagingCallback = function localPagingCallback(ctx, meta) {\n            if (!$(ctx.pager).hasClass(pfx + 'datatable-paging-loaded')) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            }\n            $(ctx.pager).off().on(pfx + 'datatable-on-goto-page', function (e) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            });\n            var start = Math.max(meta.perpage * (meta.page - 1), 0);\n            var end = Math.min(start + meta.perpage, meta.total);\n            Plugin.localDataUpdate();\n            datatable.dataSet = $(datatable.dataSet).slice(start, end);\n\n            // insert data into table content\n            Plugin.insertData();\n          };\n          $(datatable.wrap).removeClass(pfx + 'datatable-error');\n          // pagination enabled\n          if (options.pagination) {\n            if (options.data.serverPaging && options.data.type !== 'local') {\n              // server pagination\n              var serverMeta = Plugin.getObject('meta', result || null);\n              if (serverMeta !== null) {\n                Plugin.pagingObject = Plugin.paging(serverMeta);\n              } else {\n                // no meta object from server response, fallback to local pagination\n                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n              }\n            } else {\n              // local pagination can be used by remote data also\n              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n            }\n          } else {\n            // pagination is disabled\n            Plugin.localDataUpdate();\n          }\n          // insert data into table content\n          Plugin.insertData();\n        };\n\n        // get local datasource\n        if (options.data.type === 'local'\n        // for remote json datasource\n        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null\n        // for remote datasource, server sorting is disabled and data already received from remote\n        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {\n          setTimeout(function () {\n            afterGetData();\n            Plugin.setAutoColumns();\n          });\n          return;\n        }\n\n        // getting data from remote only\n        Plugin.getData().done(afterGetData);\n      },\n      /**\r\n       * Process ajax data\r\n       */\n      insertData: function insertData() {\n        datatable.dataSet = datatable.dataSet || [];\n        var params = Plugin.getDataSourceParam();\n\n        // get row attributes\n        var pagination = params.pagination;\n        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;\n        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;\n        var rowProps = {};\n        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {\n          rowProps = options.data.attr.rowProps.slice(start, end);\n        }\n        var tableBody = document.createElement('tbody');\n        tableBody.style.visibility = 'hidden';\n        var colLength = options.columns.length;\n        $.each(datatable.dataSet, function (rowIndex, row) {\n          var tr = document.createElement('tr');\n          tr.setAttribute('data-row', rowIndex);\n          // keep data object to row\n          $(tr).data('obj', row);\n          if (typeof rowProps[rowIndex] !== 'undefined') {\n            $.each(rowProps[rowIndex], function () {\n              tr.setAttribute(this.name, this.value);\n            });\n          }\n          var cellIndex = 0;\n          var tds = [];\n          for (var a = 0; a < colLength; a += 1) {\n            var column = options.columns[a];\n            var classes = [];\n            // add sorted class to cells\n            if (Plugin.getObject('sort.field', params) === column.field) {\n              classes.push(pfx + 'datatable-cell-sorted');\n            }\n\n            // apply text align\n            if (typeof column.textAlign !== 'undefined') {\n              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n              classes.push(align);\n            }\n\n            // var classAttr = '';\n            if (typeof column[\"class\"] !== 'undefined') {\n              classes.push(column[\"class\"]);\n            }\n            var td = document.createElement('td');\n            util.addClass(td, classes.join(' '));\n            td.setAttribute('data-field', column.field);\n            // set disable autoHide or force enable\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                td.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                td.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n            td.innerHTML = Plugin.getObject(column.field, row);\n            td.setAttribute('aria-label', Plugin.getObject(column.field, row));\n            tr.appendChild(td);\n          }\n          tableBody.appendChild(tr);\n        });\n\n        // display no records message\n        if (datatable.dataSet.length === 0) {\n          var errorSpan = document.createElement('span');\n          util.addClass(errorSpan, pfx + 'datatable-error');\n          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');\n          tableBody.appendChild(errorSpan);\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        }\n\n        // replace existing table body\n        $(datatable.tableBody).replaceWith(tableBody);\n        datatable.tableBody = tableBody;\n\n        // layout update\n        Plugin.setupDOM(datatable.table);\n        Plugin.setupCellField([datatable.tableBody]);\n        Plugin.setupTemplateCell(datatable.tableBody);\n        Plugin.layoutUpdate();\n      },\n      updateTableComponents: function updateTableComponents() {\n        datatable.tableHead = $(datatable.table).children('thead').get(0);\n        datatable.tableBody = $(datatable.table).children('tbody').get(0);\n        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);\n      },\n      /**\r\n       * Call ajax for raw JSON data\r\n       */\n      getData: function getData() {\n        // Plugin.spinnerCallback(true);\n\n        var ajaxParams = {\n          dataType: 'json',\n          method: 'POST',\n          data: {},\n          timeout: Plugin.getOption('data.source.read.timeout') || 30000\n        };\n        if (options.data.type === 'local') {\n          ajaxParams.url = options.data.source;\n        }\n        if (options.data.type === 'remote') {\n          var data = Plugin.getDataSourceParam();\n          // remove if server params is not enabled\n          if (!Plugin.getOption('data.serverPaging')) {\n            delete data['pagination'];\n          }\n          if (!Plugin.getOption('data.serverSorting')) {\n            delete data['sort'];\n          }\n          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);\n          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source');\n          // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);\n        }\n\n        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {\n          datatable.lastResponse = response;\n          // extendible data map callback for custom datasource\n          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);\n          Plugin.setAutoColumns();\n          $(datatable).trigger(pfx + 'datatable-on-ajax-done', [datatable.dataSet]);\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          $(datatable).trigger(pfx + 'datatable-on-ajax-fail', [jqXHR]);\n          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable-error').html(Plugin.getOption('translate.records.noRecords')));\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        }).always(function () {});\n      },\n      /**\r\n       * Pagination object\r\n       * @param meta if null, local pagination, otherwise remote\r\n       *     pagination\r\n       * @param callback for update data when navigating page\r\n       */\n      paging: function paging(meta, callback) {\n        var pg = {\n          meta: null,\n          pager: null,\n          paginateEvent: null,\n          pagerLayout: {\n            pagination: null,\n            info: null\n          },\n          callback: null,\n          init: function init(meta) {\n            pg.meta = meta;\n\n            // parse pagination meta to integer\n            pg.meta.page = parseInt(pg.meta.page);\n            pg.meta.pages = parseInt(pg.meta.pages);\n            pg.meta.perpage = parseInt(pg.meta.perpage);\n            pg.meta.total = parseInt(pg.meta.total);\n\n            // always recount total pages\n            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1);\n\n            // current page must be not over than total pages\n            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages;\n\n            // set unique event name between tables\n            pg.paginateEvent = Plugin.getTablePrefix('paging');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n            if ($(pg.pager).hasClass(pfx + 'datatable-paging-loaded')) return;\n\n            // if class .'+pfx+'datatable-paging-loaded not exist, recreate pagination\n            $(pg.pager).remove();\n\n            // if no pages available\n            if (pg.meta.pages === 0) return;\n\n            // update datasource params\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            });\n\n            // default callback function, contains remote pagination handler\n            pg.callback = pg.serverCallback;\n            // custom callback function\n            if (typeof callback === 'function') pg.callback = callback;\n            pg.addPaginateEvent();\n            pg.populate();\n            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.pagingBreakpoint.call();\n            $(window).resize(pg.pagingBreakpoint);\n          },\n          serverCallback: function serverCallback(ctx, meta) {\n            Plugin.dataRender();\n          },\n          populate: function populate() {\n            datatable.dataSet = datatable.dataSet || [];\n            // no records available\n            if (datatable.dataSet.length === 0) return;\n            var icons = Plugin.getOption('layout.icons.pagination');\n            var title = Plugin.getOption('translate.toolbar.pagination.items.default');\n            // pager root element\n            pg.pager = $('<div/>').addClass(pfx + 'datatable-pager ' + pfx + 'datatable-paging-loaded');\n            // numbering links\n            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable-pager-nav my-2 mb-sm-0');\n            pg.pagerLayout['pagination'] = pagerNumber;\n\n            // pager first/previous button\n            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'datatable-pager-input form-control').attr('title', title.input).on('keyup', function () {\n              // on keyup update [data-page]\n              $(this).attr('data-page', Math.abs($(this).val()));\n            }).on('keypress', function (e) {\n              // on keypressed enter button\n              if (e.which === 13) pg.gotoMorePage(e);\n            })).appendTo(pagerNumber);\n            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');\n            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;\n            var start = end - pagesNumber;\n            if (end > pg.meta.pages) {\n              end = pg.meta.pages;\n            }\n\n            // keep pagination 1 if there is no records\n            if (start < 0) {\n              start = 0;\n            }\n            for (var x = start; x < (end || 1); x++) {\n              var pageNumber = x + 1;\n              $('<li/>').append($('<a/>').addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);\n            }\n\n            // pager next/last button\n            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber);\n\n            // page info\n            if (Plugin.getOption('toolbar.items.info')) {\n              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable-pager-info my-2 mb-sm-0').append($('<span/>').addClass(pfx + 'datatable-pager-detail'));\n            }\n            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {\n              $(pg.pagerLayout[layout]).appendTo(pg.pager);\n            });\n\n            // page size select\n            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable-pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);\n            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect');\n            // default value here, to fix override option by user\n            if (pageSizes.length == 0) pageSizes = [5, 10, 20, 30, 50, 100];\n            $.each(pageSizes, function (i, size) {\n              var display = size;\n              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');\n              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);\n            });\n\n            // init selectpicker to dropdown\n            $(datatable).ready(function () {\n              $('.selectpicker').selectpicker().on('hide.bs.select', function () {\n                // fix dropup arrow icon on hide\n                $(this).closest('.bootstrap-select').removeClass('dropup');\n              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));\n            });\n            pg.paste();\n          },\n          paste: function paste() {\n            // insert pagination based on placement position, top|bottom\n            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {\n              if (position === 'bottom') {\n                $(pg.pager).clone(true).insertAfter(datatable.table);\n              }\n              if (position === 'top') {\n                // pager top need some extra space\n                $(pg.pager).clone(true).addClass(pfx + 'datatable-pager-top').insertBefore(datatable.table);\n              }\n            });\n          },\n          gotoMorePage: function gotoMorePage(e) {\n            e.preventDefault();\n            // $(this) is a link of .'+pfx+'datatable-pager-link\n\n            if ($(this).attr('disabled') === 'disabled') return false;\n            var page = $(this).attr('data-page');\n\n            // event from text input\n            if (typeof page === 'undefined') {\n              page = $(e.target).attr('data-page');\n            }\n            pg.openPage(parseInt(page));\n            return false;\n          },\n          gotoPage: function gotoPage(e) {\n            e.preventDefault();\n            // prevent from click same page number\n            if ($(this).hasClass(pfx + 'datatable-pager-link-active')) return;\n            pg.openPage(parseInt($(this).data('page')));\n          },\n          openPage: function openPage(page) {\n            // currentPage is 1-based index\n            pg.meta.page = parseInt(page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta);\n\n            // update page callback function\n            $(pg.pager).trigger(pfx + 'datatable-on-goto-page', pg.meta);\n          },\n          updatePerpage: function updatePerpage(e) {\n            e.preventDefault();\n            // if (Plugin.getOption('layout.height') === null) {\n            // fix white space, when perpage is set from many records to less records\n            // $('html, body').animate({scrollTop: $(datatable).position().top});\n            // }\n\n            // hide dropdown after select\n            $(this).selectpicker('toggle');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');\n\n            // on change select page size\n            if (e.originalEvent) {\n              pg.meta.perpage = parseInt($(this).val());\n            }\n            $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage);\n\n            // update datasource params\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            });\n\n            // update page callback function\n            $(pg.pager).trigger(pfx + 'datatable-on-update-perpage', pg.meta);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta);\n\n            // update pagination info\n            pg.updateInfo.call();\n          },\n          addPaginateEvent: function addPaginateEvent(e) {\n            // pagination event\n            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {\n              Plugin.spinnerCallback(true);\n              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable-pager-nav');\n\n              // set sync active page class\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-active').removeClass(pfx + 'datatable-pager-link-active');\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number[data-page=\"' + meta.page + '\"]').addClass(pfx + 'datatable-pager-link-active');\n\n              // set next and previous link page number\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-prev').attr('data-page', Math.max(meta.page - 1, 1));\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-next').attr('data-page', Math.min(meta.page + 1, meta.pages));\n\n              // current page input value sync\n              $(pg.pager).each(function () {\n                $(this).find('.' + pfx + 'datatable-pager-input[type=\"text\"]').prop('value', meta.page);\n              });\n\n              // if only 1 page, should hide page?\n              // $(pg.pager).find('.' + pfx + 'datatable-pager-nav').show();\n              // if (meta.pages <= 1) {\n              // \t// hide pager if has 1 page\n              // \t$(pg.pager).find('.' + pfx + 'datatable-pager-nav').hide();\n              // }\n\n              // update datasource params\n              Plugin.setDataSourceParam('pagination', {\n                page: pg.meta.page,\n                pages: pg.meta.pages,\n                perpage: pg.meta.perpage,\n                total: pg.meta.total\n              });\n              $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(meta.perpage).attr('data-selected', meta.perpage);\n\n              // clear active rows\n              $(datatable.table).find('.' + pfx + 'checkbox > [type=\"checkbox\"]').prop('checked', false);\n              $(datatable.table).find('.' + pfx + 'datatable-row-active').removeClass(pfx + 'datatable-row-active');\n              pg.updateInfo.call();\n              pg.pagingBreakpoint.call();\n              // Plugin.resetScroll();\n            });\n          },\n\n          updateInfo: function updateInfo() {\n            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);\n            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total);\n            // page info update\n            $(pg.pager).find('.' + pfx + 'datatable-pager-info').find('.' + pfx + 'datatable-pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {\n              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0\n              start: pg.meta.total === 0 ? 0 : start,\n              end: pg.meta.perpage === -1 ? pg.meta.total : end,\n              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,\n              total: pg.meta.total\n            }));\n          },\n          /**\r\n           * Update pagination layout breakpoint\r\n           */\n          pagingBreakpoint: function pagingBreakpoint() {\n            // keep page links reference\n            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav');\n            if ($(pagerNumber).length === 0) return;\n            var currentPage = Plugin.getCurrentPage();\n            var pagerInput = $(pagerNumber).find('.' + pfx + 'datatable-pager-input').closest('li');\n\n            // reset\n            $(pagerNumber).find('li').show();\n\n            // pagination update\n            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {\n              if (util.isInResponsiveRange(mode)) {\n                switch (mode) {\n                  case 'desktop':\n                  case 'tablet':\n                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;\n                    var start = end - option.pagesNumber;\n                    $(pagerInput).hide();\n                    pg.meta = Plugin.getDataSourceParam('pagination');\n                    pg.paginationUpdate();\n                    break;\n                  case 'mobile':\n                    $(pagerInput).show();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-prev').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-next').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number').closest('li').hide();\n                    break;\n                }\n                return false;\n              }\n            });\n          },\n          /**\r\n           * Update pagination number and button display\r\n           */\n          paginationUpdate: function paginationUpdate() {\n            var pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav'),\n              pagerMorePrev = $(pager).find('.' + pfx + 'datatable-pager-link-more-prev'),\n              pagerMoreNext = $(pager).find('.' + pfx + 'datatable-pager-link-more-next'),\n              pagerFirst = $(pager).find('.' + pfx + 'datatable-pager-link-first'),\n              pagerPrev = $(pager).find('.' + pfx + 'datatable-pager-link-prev'),\n              pagerNext = $(pager).find('.' + pfx + 'datatable-pager-link-next'),\n              pagerLast = $(pager).find('.' + pfx + 'datatable-pager-link-last');\n\n            // get visible page\n            var pagerNumber = $(pager).find('.' + pfx + 'datatable-pager-link-number');\n            // get page before of first visible\n            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);\n            $(pagerMorePrev).each(function (i, prev) {\n              $(prev).attr('data-page', morePrevPage);\n            });\n            // show/hide <li>\n            if (morePrevPage === 1) {\n              $(pagerMorePrev).parent().hide();\n            } else {\n              $(pagerMorePrev).parent().show();\n            }\n\n            // get page after of last visible\n            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);\n            $(pagerMoreNext).each(function (i, prev) {\n              $(pagerMoreNext).attr('data-page', moreNextPage).show();\n            });\n\n            // show/hide <li>\n            if (moreNextPage === pg.meta.pages\n            // missing dot fix when last hidden page is one left\n            && moreNextPage === $(pagerNumber).last().data('page')) {\n              $(pagerMoreNext).parent().hide();\n            } else {\n              $(pagerMoreNext).parent().show();\n            }\n\n            // begin/end of pages\n            if (pg.meta.page === 1) {\n              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            }\n            if (pg.meta.page === pg.meta.pages) {\n              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            }\n\n            // display more buttons\n            var nav = Plugin.getOption('toolbar.items.pagination.navigation');\n            if (!nav.first) $(pagerFirst).remove();\n            if (!nav.prev) $(pagerPrev).remove();\n            if (!nav.next) $(pagerNext).remove();\n            if (!nav.last) $(pagerLast).remove();\n            if (!nav.more) {\n              $(pagerMorePrev).remove();\n              $(pagerMoreNext).remove();\n            }\n          }\n        };\n        pg.init(meta);\n        return pg;\n      },\n      /**\r\n       * Hide/show table cell defined by\r\n       * options[columns][i][responsive][visible/hidden]\r\n       */\n      columnHide: function columnHide() {\n        var screen = util.getViewPort().width;\n        // foreach columns setting\n        $.each(options.columns, function (i, column) {\n          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {\n            var field = column.field;\n            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable-cell'), function (n, i) {\n              return field === $(n).data('field');\n            });\n            setTimeout(function () {\n              // hide by force\n              if (Plugin.getObject('visible', column) === false) {\n                $(tds).hide();\n              } else {\n                // show/hide by responsive breakpoint\n                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {\n                  $(tds).hide();\n                } else {\n                  $(tds).show();\n                }\n                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {\n                  $(tds).show();\n                } else {\n                  $(tds).hide();\n                }\n              }\n            });\n          }\n        });\n      },\n      /**\r\n       * Setup sub datatable\r\n       */\n      setupSubDatatable: function setupSubDatatable() {\n        var subTableCallback = Plugin.getOption('detail.content');\n        if (typeof subTableCallback !== 'function') return;\n\n        // subtable already exist\n        if ($(datatable.table).find('.' + pfx + 'datatable-subtable').length > 0) return;\n        $(datatable.wrap).addClass(pfx + 'datatable-subtable');\n        options.columns[0]['subtable'] = true;\n\n        // toggle on open sub table\n        var toggleSubTable = function toggleSubTable(e) {\n          e.preventDefault();\n          // get parent row of this subtable\n          var parentRow = $(this).closest('.' + pfx + 'datatable-row');\n\n          // get subtable row for sub table\n          var subTableRow = $(parentRow).next('.' + pfx + 'datatable-row-subtable');\n          if ($(subTableRow).length === 0) {\n            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table\n            subTableRow = $('<tr/>').addClass(pfx + 'datatable-row-subtable ' + pfx + 'datatable-row-loading').hide().append($('<td/>').addClass(pfx + 'datatable-subtable').attr('colspan', Plugin.getTotalColumns()));\n            $(parentRow).after(subTableRow);\n            // add class to even row\n            if ($(parentRow).hasClass(pfx + 'datatable-row-even')) {\n              $(subTableRow).addClass(pfx + 'datatable-row-subtable-even');\n            }\n          }\n          $(subTableRow).toggle();\n          var subTable = $(subTableRow).find('.' + pfx + 'datatable-subtable');\n\n          // get id from first column of parent row\n          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable-toggle-subtable').data('value');\n          var icon = $(this).find('i').removeAttr('class');\n\n          // prevent duplicate datatable init\n          if ($(parentRow).hasClass(pfx + 'datatable-row-subtable-expanded')) {\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));\n            // remove expand class from parent row\n            $(parentRow).removeClass(pfx + 'datatable-row-subtable-expanded');\n            // trigger event on collapse\n            $(datatable).trigger(pfx + 'datatable-on-collapse-subtable', [parentRow]);\n          } else {\n            // expand and run callback function\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));\n            // add expand class to parent row\n            $(parentRow).addClass(pfx + 'datatable-row-subtable-expanded');\n            // trigger event on expand\n            $(datatable).trigger(pfx + 'datatable-on-expand-subtable', [parentRow]);\n          }\n\n          // prevent duplicate datatable init\n          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {\n            // get data by primary id\n            $.map(datatable.dataSet, function (n, i) {\n              // primary id must be at the first column, otherwise e.data will be undefined\n              if (primaryKey === n[options.columns[0].field]) {\n                e.data = n;\n                return true;\n              }\n              return false;\n            });\n\n            // deprecated in v5.0.6\n            e.detailCell = subTable;\n            e.parentRow = parentRow;\n            e.subTable = subTable;\n\n            // run callback with event\n            subTableCallback(e);\n            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable-on-init', function (e) {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            });\n            if (Plugin.getOption('data.type') === 'local') {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            }\n          }\n        };\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n            if (typeof column !== 'undefined') {\n              var value = $(td).text();\n              // enable column subtable toggle\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return;\n                // append subtable toggle\n                $(td).html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        });\n\n        // $(datatable.tableHead).find('.'+pfx+'-datatable-row').first()\n      },\n\n      /**\r\n       * Datasource mapping callback\r\n       */\n      dataMapCallback: function dataMapCallback(raw) {\n        // static dataset array\n        var dataSet = raw;\n        // dataset mapping callback\n        if (typeof Plugin.getOption('data.source.read.map') === 'function') {\n          return Plugin.getOption('data.source.read.map')(raw);\n        } else {\n          // default data mapping fallback\n          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {\n            dataSet = raw.data;\n          }\n        }\n        return dataSet;\n      },\n      isSpinning: false,\n      /**\r\n       * BlockUI spinner callback\r\n       * @param block\r\n       * @param target\r\n       */\n      spinnerCallback: function spinnerCallback(block, target) {\n        if (typeof target === 'undefined') target = datatable;\n        // get spinner options\n        var spinnerOptions = Plugin.getOption('layout.spinner');\n        // spinner is disabled\n        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {\n          return;\n        }\n        if (block) {\n          if (!Plugin.isSpinning) {\n            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {\n              // use default spinner message from translation\n              spinnerOptions.message = Plugin.getOption('translate.records.processing');\n            }\n            Plugin.isSpinning = true;\n            if (typeof app !== 'undefined') {\n              app.block(target, spinnerOptions);\n            }\n          }\n        } else {\n          Plugin.isSpinning = false;\n          if (typeof app !== 'undefined') {\n            app.unblock(target);\n          }\n        }\n      },\n      /**\r\n       * Default sort callback function\r\n       * @param data\r\n       * @param sort\r\n       * @param column\r\n       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}\r\n       */\n      sortCallback: function sortCallback(data, sort, column) {\n        var type = column['type'] || 'string';\n        var format = column['format'] || '';\n        var field = column['field'];\n        return $(data).sort(function (a, b) {\n          var aField = a[field];\n          var bField = b[field];\n          switch (type) {\n            case 'date':\n              if (typeof moment === 'undefined') {\n                throw new Error('Moment.js is required.');\n              }\n              var diff = moment(aField, format).diff(moment(bField, format));\n              if (sort === 'asc') {\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n              } else {\n                return diff < 0 ? 1 : diff > 0 ? -1 : 0;\n              }\n              break;\n            case 'number':\n              if (isNaN(parseFloat(aField)) && aField != null) {\n                aField = Number(aField.replace(/[^0-9\\.-]+/g, ''));\n              }\n              if (isNaN(parseFloat(bField)) && bField != null) {\n                bField = Number(bField.replace(/[^0-9\\.-]+/g, ''));\n              }\n              aField = parseFloat(aField);\n              bField = parseFloat(bField);\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n              break;\n            case 'html':\n              return $(data).sort(function (a, b) {\n                // get the text only from html\n                aField = $(a[field]).text();\n                bField = $(b[field]).text();\n                // sort\n                if (sort === 'asc') {\n                  return aField > bField ? 1 : aField < bField ? -1 : 0;\n                } else {\n                  return aField < bField ? 1 : aField > bField ? -1 : 0;\n                }\n              });\n              break;\n            case 'string':\n            default:\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n              break;\n          }\n        });\n      },\n      /**\r\n       * Custom debug log\r\n       * @param text\r\n       * @param obj\r\n       */\n      log: function log(text, obj) {\n        if (typeof obj === 'undefined') obj = '';\n        if (datatable.debug) {\n          console.log(text, obj);\n        }\n      },\n      /**\r\n       * Auto hide columnds overflow in row\r\n       */\n      autoHide: function autoHide() {\n        var hiddenExist = false;\n        // force hide enabled\n        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');\n        if (hidDefault.length) {\n          hiddenExist = true;\n          hidDefault.hide();\n        }\n        var toggleHiddenColumns = function toggleHiddenColumns(e) {\n          e.preventDefault();\n          var row = $(this).closest('.' + pfx + 'datatable-row');\n          var detailRow = $(row).next();\n          if (!$(detailRow).hasClass(pfx + 'datatable-row-detail')) {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));\n            var hiddenCells = $(row).find('.' + pfx + 'datatable-cell:hidden');\n            var clonedCells = hiddenCells.clone().show();\n            detailRow = $('<tr/>').addClass(pfx + 'datatable-row-detail').insertAfter(row);\n            var detailRowTd = $('<td/>').addClass(pfx + 'datatable-detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);\n            var detailSubTable = $('<table/>');\n            $(clonedCells).each(function () {\n              var field = $(this).data('field');\n              var column = $.grep(options.columns, function (n, i) {\n                return field === n.field;\n              })[0];\n              if (typeof column === 'undefined' || column.visible !== false) {\n                $(detailSubTable).append($('<tr class=\"' + pfx + 'datatable-row\"></tr>').append($('<td class=\"' + pfx + 'datatable-cell\"></td>').append($('<span/>').append(column.title))).append(this));\n              }\n            });\n            $(detailRowTd).append(detailSubTable);\n          } else {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));\n            $(detailRow).remove();\n          }\n        };\n        setTimeout(function () {\n          $(datatable.table).find('.' + pfx + 'datatable-cell').show();\n          $(datatable.tableBody).each(function () {\n            var recursive = 0;\n            while ($(this)[0].offsetWidth < $(this)[0].scrollWidth && recursive < options.columns.length) {\n              $(datatable.table).find('.' + pfx + 'datatable-row').each(function (i) {\n                var cell = $(this).find('.' + pfx + 'datatable-cell:not(:hidden):not([data-autohide-disabled])').last();\n                if (cell.length) {\n                  $(cell).hide();\n                  hiddenExist = true;\n                }\n              });\n              recursive++;\n            }\n          });\n          if (hiddenExist) {\n            // toggle show hidden columns\n            $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function () {\n              // if no toggle yet\n              if ($(this).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add toggle\n                $(this).prepend($('<td/>').addClass(pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail').append($('<a/>').addClass(pfx + 'datatable-toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class=\"' + Plugin.getOption('layout.icons.rowDetail.collapse') + '\"></i>')));\n              }\n\n              // check if subtable toggle exist\n              if ($(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add empty column to the header and footer\n                $(datatable.tableHead).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n                $(datatable.tableFoot).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n              } else {\n                $(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').find('span');\n              }\n            });\n          }\n        });\n        Plugin.adjustCellsWidth.call();\n      },\n      /**\r\n       * To enable auto columns features for remote data source\r\n       */\n      setAutoColumns: function setAutoColumns() {\n        if (Plugin.getOption('data.autoColumns')) {\n          $.each(datatable.dataSet[0], function (k, v) {\n            var found = $.grep(options.columns, function (n, i) {\n              return k === n.field;\n            });\n            if (found.length === 0) {\n              options.columns.push({\n                field: k,\n                title: k\n              });\n            }\n          });\n          $(datatable.tableHead).find('.' + pfx + 'datatable-row').remove();\n          Plugin.setHeadTitle();\n          if (Plugin.getOption('layout.footer')) {\n            $(datatable.tableFoot).find('.' + pfx + 'datatable-row').remove();\n            Plugin.setHeadTitle(datatable.tableFoot);\n          }\n        }\n      },\n      /********************\r\n       ** HELPERS\r\n       ********************/\n\n      /**\r\n       * Check if table is a locked colums table\r\n       */\n      isLocked: function isLocked() {\n        var isLocked = Plugin.lockEnabledColumns();\n        return isLocked.left.length > 0 || isLocked.right.length > 0;\n      },\n      isSubtable: function isSubtable() {\n        return util.hasClass(datatable.wrap[0], pfx + 'datatable-subtable') || false;\n      },\n      /**\r\n       * Get total extra space of an element for width calculation,\r\n       * including padding, margin, border\r\n       * @param element\r\n       * @returns {number}\r\n       */\n      getExtraSpace: function getExtraSpace(element) {\n        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));\n        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));\n        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));\n        return padding + margin + border;\n      },\n      /**\r\n       * Insert data of array into {{ }} template placeholder\r\n       * @param template\r\n       * @param data\r\n       * @returns {*}\r\n       */\n      dataPlaceholder: function dataPlaceholder(template, data) {\n        var result = template;\n        $.each(data, function (key, val) {\n          result = result.replace('{{' + key + '}}', val);\n        });\n        return result;\n      },\n      /**\r\n       * Get table unique ID\r\n       * Note: table unique change each time refreshed\r\n       * @param suffix\r\n       * @returns {*}\r\n       */\n      getTableId: function getTableId(suffix) {\n        if (typeof suffix === 'undefined') suffix = '';\n        var id = $(datatable).attr('id');\n        if (typeof id === 'undefined') {\n          id = $(datatable).attr('class').split(' ')[0];\n        }\n        return id + suffix;\n      },\n      /**\r\n       * Get table prefix with depth number\r\n       */\n      getTablePrefix: function getTablePrefix(suffix) {\n        if (typeof suffix !== 'undefined') suffix = '-' + suffix;\n        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;\n      },\n      /**\r\n       * Get current table depth of sub table\r\n       * @returns {number}\r\n       */\n      getDepth: function getDepth() {\n        var depth = 0;\n        var table = datatable.table;\n        do {\n          table = $(table).parents('.' + pfx + 'datatable-table');\n          depth++;\n        } while ($(table).length > 0);\n        return depth;\n      },\n      /**\r\n       * Keep state item\r\n       * @param key\r\n       * @param value\r\n       */\n      stateKeep: function stateKeep(key, value) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n        if (localStorage) {\n          localStorage.setItem(key, JSON.stringify(value));\n        }\n      },\n      /**\r\n       * Get state item\r\n       * @param key\r\n       * @param defValue\r\n       */\n      stateGet: function stateGet(key, defValue) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n        var value = null;\n        if (localStorage) {\n          value = localStorage.getItem(key);\n        }\n        if (typeof value !== 'undefined' && value !== null) {\n          return JSON.parse(value);\n        }\n      },\n      /**\r\n       * Update data in state without clear existing\r\n       * @param key\r\n       * @param value\r\n       */\n      stateUpdate: function stateUpdate(key, value) {\n        var ori = Plugin.stateGet(key);\n        if (typeof ori === 'undefined' || ori === null) ori = {};\n        Plugin.stateKeep(key, $.extend({}, ori, value));\n      },\n      /**\r\n       * Remove state item\r\n       * @param key\r\n       */\n      stateRemove: function stateRemove(key) {\n        key = Plugin.getTablePrefix(key);\n        if (localStorage) {\n          localStorage.removeItem(key);\n        }\n      },\n      /**\r\n       * Get total columns.\r\n       */\n      getTotalColumns: function getTotalColumns(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        return $(tablePart).find('.' + pfx + 'datatable-row').first().find('.' + pfx + 'datatable-cell').length;\n      },\n      /**\r\n       * Get table row. Useful to get row when current table is in lock\r\n       * mode. Can be used for both lock and normal table mode. By\r\n       * default, returning result will be in a list of <td>.\r\n       * @param tablePart\r\n       * @param row 1-based index\r\n       * @param tdOnly Optional. Default true\r\n       * @returns {*}\r\n       */\n      getOneRow: function getOneRow(tablePart, row, tdOnly) {\n        if (typeof tdOnly === 'undefined') tdOnly = true;\n        // get list of <tr>\n        var result = $(tablePart).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):nth-child(' + row + ')');\n        if (tdOnly) {\n          // get list of <td> or <th>\n          result = result.find('.' + pfx + 'datatable-cell');\n        }\n        return result;\n      },\n      /**\r\n       * Sort table row at HTML level by column index.\r\n       * todo; Not in use.\r\n       * @param header Header sort clicked\r\n       * @param sort asc|desc. Optional. Default asc\r\n       * @param int Boolean. Optional. Comparison value parse to integer.\r\n       *     Default false\r\n       */\n      sortColumn: function sortColumn(header, sort, _int) {\n        if (typeof sort === 'undefined') sort = 'asc'; // desc\n        if (typeof _int === 'undefined') _int = false;\n        var column = $(header).index();\n        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable-row');\n        var hIndex = $(header).closest('.' + pfx + 'datatable-lock').index();\n        if (hIndex !== -1) {\n          rows = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable-row');\n        }\n        var container = $(rows).parent();\n        $(rows).sort(function (a, b) {\n          var tda = $(a).find('td:nth-child(' + column + ')').text();\n          var tdb = $(b).find('td:nth-child(' + column + ')').text();\n          if (_int) {\n            // useful for integer type sorting\n            tda = parseInt(tda);\n            tdb = parseInt(tdb);\n          }\n          if (sort === 'asc') {\n            return tda > tdb ? 1 : tda < tdb ? -1 : 0;\n          } else {\n            return tda < tdb ? 1 : tda > tdb ? -1 : 0;\n          }\n        }).appendTo(container);\n      },\n      /**\r\n       * Perform sort remote and local\r\n       */\n      sorting: function sorting() {\n        var sortObj = {\n          init: function init() {\n            if (options.sortable) {\n              $(datatable.tableHead).find('.' + pfx + 'datatable-cell:not(.' + pfx + 'datatable-cell-check)').addClass(pfx + 'datatable-cell-sort').off('click').on('click', sortObj.sortClick);\n              // first init\n              sortObj.setIcon();\n            }\n          },\n          setIcon: function setIcon() {\n            var meta = Plugin.getDataSourceParam('sort');\n            if ($.isEmptyObject(meta)) return;\n            var column = Plugin.getColumnByField(meta.field);\n            // sort is disabled for this column\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return;\n\n            // sort icon beside column header\n            var td = $(datatable.tableHead).find('.' + pfx + 'datatable-cell[data-field=\"' + meta.field + '\"]').attr('data-sort', meta.sort);\n            var sorting = $(td).find('span');\n            var icon = $(sorting).find('i');\n            var icons = Plugin.getOption('layout.icons.sort');\n            // update sort icon; desc & asc\n            if ($(icon).length > 0) {\n              $(icon).removeAttr('class').addClass(icons[meta.sort]);\n            } else {\n              $(sorting).append($('<i/>').addClass(icons[meta.sort]));\n            }\n\n            // set sorted class to header on init\n            $(td).addClass(pfx + 'datatable-cell-sorted');\n          },\n          sortClick: function sortClick(e) {\n            var meta = Plugin.getDataSourceParam('sort');\n            var field = $(this).data('field');\n            var column = Plugin.getColumnByField(field);\n            // sort is disabled for this column\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return;\n\n            // set sorted class to header\n            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable-cell-sorted');\n            util.addClass(this, pfx + 'datatable-cell-sorted');\n            $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n            if (options.sortable) {\n              Plugin.spinnerCallback(true);\n              var sort = 'desc';\n              if (Plugin.getObject('field', meta) === field) {\n                sort = Plugin.getObject('sort', meta);\n              }\n\n              // toggle sort\n              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc';\n\n              // update field and sort params\n              meta = {\n                field: field,\n                sort: sort\n              };\n              Plugin.setDataSourceParam('sort', meta);\n              sortObj.setIcon();\n              setTimeout(function () {\n                Plugin.dataRender('sort');\n                $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n              }, 300);\n            }\n          }\n        };\n        sortObj.init();\n      },\n      /**\r\n       * Update JSON data list linked with sort, filter and pagination.\r\n       * Call this method, before using dataSet variable.\r\n       * @returns {*|null}\r\n       */\n      localDataUpdate: function localDataUpdate() {\n        var params = Plugin.getDataSourceParam();\n        if (typeof datatable.originalDataSet === 'undefined') {\n          datatable.originalDataSet = datatable.dataSet;\n        }\n        var field = Plugin.getObject('sort.field', params);\n        var sort = Plugin.getObject('sort.sort', params);\n        var column = Plugin.getColumnByField(field);\n        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {\n          if (typeof column.sortCallback === 'function') {\n            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);\n          } else {\n            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);\n          }\n        } else {\n          datatable.dataSet = datatable.originalDataSet;\n        }\n\n        // if server filter enable, don't pass local filter\n        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {\n          params.query = params.query || {};\n          var nestedSearch = function nestedSearch(obj) {\n            for (var field in obj) {\n              if (!obj.hasOwnProperty(field)) continue;\n              if (typeof obj[field] === 'string') {\n                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {\n                  return true;\n                }\n              } else if (typeof obj[field] === 'number') {\n                if (obj[field] === search) {\n                  return true;\n                }\n              } else if (_typeof(obj[field]) === 'object') {\n                if (nestedSearch(obj[field])) {\n                  return true;\n                }\n              }\n            }\n            return false;\n          };\n          var search = $(Plugin.getOption('search.input')).val();\n          if (typeof search !== 'undefined' && search !== '') {\n            search = search.toLowerCase();\n            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch);\n            // remove generalSearch as we don't need this for next columns filter\n            delete params.query[Plugin.getGeneralSearchKey()];\n          }\n\n          // remove empty element from array\n          $.each(params.query, function (k, v) {\n            if (v === '') {\n              delete params.query[k];\n            }\n          });\n\n          // filter array by query\n          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query);\n\n          // reset array index\n          datatable.dataSet = datatable.dataSet.filter(function () {\n            return true;\n          });\n        }\n        return datatable.dataSet;\n      },\n      /**\r\n       * Utility helper to filter array by object pair of {key:value}\r\n       * @param list\r\n       * @param args\r\n       * @param operator\r\n       * @returns {*}\r\n       */\n      filterArray: function filterArray(list, args, operator) {\n        if (_typeof(list) !== 'object') {\n          return [];\n        }\n        if (typeof operator === 'undefined') operator = 'AND';\n        if (_typeof(args) !== 'object') {\n          return list;\n        }\n        operator = operator.toUpperCase();\n        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {\n          return [];\n        }\n        var count = Object.keys(args).length;\n        var filtered = [];\n        $.each(list, function (key, obj) {\n          var to_match = obj;\n          var matched = 0;\n          $.each(args, function (m_key, m_value) {\n            m_value = m_value instanceof Array ? m_value : [m_value];\n            var match_property = Plugin.getObject(m_key, to_match);\n            if (typeof match_property !== 'undefined' && match_property) {\n              var lhs = match_property.toString().toLowerCase();\n              m_value.forEach(function (item, index) {\n                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {\n                  matched++;\n                }\n              });\n            }\n          });\n          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {\n            filtered[key] = obj;\n          }\n        });\n        list = filtered;\n        return list;\n      },\n      /**\r\n       * Reset lock column scroll to 0 when resize\r\n       */\n      resetScroll: function resetScroll() {\n        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('left', 0);\n          $(datatable.table).find('.' + pfx + 'datatable-lock').css('top', 0);\n          $(datatable.tableBody).scrollTop(0);\n        }\n      },\n      /**\r\n       * Get column options by field\r\n       * @param field\r\n       * @returns {boolean}\r\n       */\n      getColumnByField: function getColumnByField(field) {\n        if (typeof field === 'undefined') return;\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (field === column.field) {\n            result = column;\n            return false;\n          }\n        });\n        return result;\n      },\n      /**\r\n       * Get default sort column\r\n       */\n      getDefaultSortColumn: function getDefaultSortColumn() {\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {\n            result = {\n              sort: column.sortable,\n              field: column.field\n            };\n            return false;\n          }\n        });\n        return result;\n      },\n      /**\r\n       * Helper to get element dimensions, when the element is hidden\r\n       * @param element\r\n       * @param includeMargin\r\n       * @returns {{width: number, height: number, innerWidth: number,\r\n       *     innerHeight: number, outerWidth: number, outerHeight:\r\n       *     number}}\r\n       */\n      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {\n        var props = {\n            position: 'absolute',\n            visibility: 'hidden',\n            display: 'block'\n          },\n          dim = {\n            width: 0,\n            height: 0,\n            innerWidth: 0,\n            innerHeight: 0,\n            outerWidth: 0,\n            outerHeight: 0\n          },\n          hiddenParents = $(element).parents().addBack().not(':visible');\n        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;\n        var oldProps = [];\n        hiddenParents.each(function () {\n          var old = {};\n          for (var name in props) {\n            old[name] = this.style[name];\n            this.style[name] = props[name];\n          }\n          oldProps.push(old);\n        });\n        dim.width = $(element).width();\n        dim.outerWidth = $(element).outerWidth(includeMargin);\n        dim.innerWidth = $(element).innerWidth();\n        dim.height = $(element).height();\n        dim.innerHeight = $(element).innerHeight();\n        dim.outerHeight = $(element).outerHeight(includeMargin);\n        hiddenParents.each(function (i) {\n          var old = oldProps[i];\n          for (var name in props) {\n            this.style[name] = old[name];\n          }\n        });\n        return dim;\n      },\n      getGeneralSearchKey: function getGeneralSearchKey() {\n        var searchInput = $(Plugin.getOption('search.input'));\n        return Plugin.getOption('search.key') || $(searchInput).prop('name');\n      },\n      /**\r\n       * Get value by dot notation path string and to prevent undefined\r\n       * errors\r\n       * @param path String Dot notation path in string\r\n       * @param object Object to iterate\r\n       * @returns {*}\r\n       */\n      getObject: function getObject(path, object) {\n        return path.split('.').reduce(function (obj, i) {\n          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;\n        }, object);\n      },\n      /**\r\n       * Extend object\r\n       * @param obj\r\n       * @param path\r\n       * @param value\r\n       * @returns {*}\r\n       */\n      extendObj: function extendObj(obj, path, value) {\n        var levels = path.split('.'),\n          i = 0;\n        function createLevel(child) {\n          var name = levels[i++];\n          if (typeof child[name] !== 'undefined' && child[name] !== null) {\n            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {\n              child[name] = {};\n            }\n          } else {\n            child[name] = {};\n          }\n          if (i === levels.length) {\n            child[name] = value;\n          } else {\n            createLevel(child[name]);\n          }\n        }\n        createLevel(obj);\n        return obj;\n      },\n      rowEvenOdd: function rowEvenOdd() {\n        // row even class\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-even');\n        if ($(datatable.wrap).hasClass(pfx + 'datatable-subtable')) {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):even').addClass(pfx + 'datatable-row-even');\n        } else {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:nth-child(even)').addClass(pfx + 'datatable-row-even');\n        }\n      },\n      /********************\r\n       ** PUBLIC API METHODS\r\n       ********************/\n\n      // delay timer\n      timer: 0,\n      /**\r\n       * Redraw datatable by recalculating its DOM elements, etc.\r\n       * @returns {jQuery}\r\n       */\n      redraw: function redraw() {\n        Plugin.adjustCellsWidth.call();\n        if (Plugin.isLocked()) {\n          // fix hiding cell width issue\n          Plugin.scrollbar();\n          Plugin.resetScroll();\n          Plugin.adjustCellsHeight.call();\n        }\n        Plugin.adjustLockContainer.call();\n        Plugin.initHeight.call();\n        return datatable;\n      },\n      /**\r\n       * Shortcode to reload\r\n       * @returns {jQuery}\r\n       */\n      load: function load() {\n        Plugin.reload();\n        return datatable;\n      },\n      /**\r\n       * Datasource reload\r\n       * @returns {jQuery}\r\n       */\n      reload: function reload() {\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n        delay(function () {\n          // local only. remote pagination will skip this block\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n          Plugin.dataRender();\n          $(datatable).trigger(pfx + 'datatable-on-reloaded');\n        }, Plugin.getOption('search.delay'));\n        return datatable;\n      },\n      /**\r\n       * Get record by record ID\r\n       * @param id\r\n       * @returns {jQuery}\r\n       */\n      getRecord: function getRecord(id) {\n        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell:first-child').each(function (i, cell) {\n          if (id == $(cell).text()) {\n            var rowNumber = $(cell).closest('.' + pfx + 'datatable-row').index() + 1;\n            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);\n            return datatable;\n          }\n        });\n        return datatable;\n      },\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get column of current record ID\r\n       * @param columnName\r\n       * @returns {jQuery}\r\n       */\n      getColumn: function getColumn(columnName) {\n        Plugin.setSelectedRecords();\n        datatable.API.value = $(datatable.API.record).find('[data-field=\"' + columnName + '\"]');\n        return datatable;\n      },\n      /**\r\n       * Destroy datatable to original DOM state before datatable was\r\n       * initialized\r\n       * @returns {jQuery}\r\n       */\n      destroy: function destroy() {\n        $(datatable).parent().find('.' + pfx + 'datatable-pager').remove();\n        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable-destroyed').show();\n        $(datatable).replaceWith(initialDatatable);\n        datatable = initialDatatable;\n        $(datatable).trigger(pfx + 'datatable-on-destroy');\n        Plugin.isInit = false;\n\n        // clean up variables\n        initialDatatable = null;\n        datatable.dataSet = null;\n        datatable.originalDataSet = null;\n        datatable.tableHead = null;\n        datatable.tableBody = null;\n        datatable.table = null;\n        datatable.wrap = null;\n        datatable.API = {\n          record: null,\n          value: null,\n          params: null\n        };\n        Plugin.ajaxParams = {};\n        Plugin.pagingObject = {};\n        Plugin.nodeTr = [];\n        Plugin.nodeTd = [];\n        Plugin.nodeCols = [];\n        Plugin.recentNode = [];\n        return initialDatatable;\n      },\n      /**\r\n       * Sort by column field\r\n       * @param field\r\n       * @param sort\r\n       */\n      sort: function sort(field, _sort) {\n        // toggle sort\n        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;\n        Plugin.spinnerCallback(true);\n\n        // update field and sort params\n        var meta = {\n          field: field,\n          sort: _sort\n        };\n        Plugin.setDataSourceParam('sort', meta);\n        setTimeout(function () {\n          Plugin.dataRender('sort');\n          $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n          $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n        }, 300);\n        return datatable;\n      },\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get current selected column value\r\n       * @returns {jQuery}\r\n       */\n      getValue: function getValue() {\n        return $(datatable.API.value).text();\n      },\n      /**\r\n       * Set checkbox active\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setActive: function setActive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n        $(cell).prop('checked', true);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').addClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-check', [ids]);\n      },\n      /**\r\n       * Set checkbox inactive\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setInactive: function setInactive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n        $(cell).prop('checked', false);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').removeClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-uncheck', [ids]);\n      },\n      /**\r\n       * Set all checkboxes active or inactive\r\n       * @param active\r\n       */\n      setActiveAll: function setActiveAll(active) {\n        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable-row-subtable').find('.' + pfx + 'datatable-cell-check [type=\"checkbox\"]');\n        if (active) {\n          Plugin.setActive(checkboxes);\n        } else {\n          Plugin.setInactive(checkboxes);\n        }\n      },\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get selected rows which are active\r\n       * @returns {jQuery}\r\n       */\n      setSelectedRecords: function setSelectedRecords() {\n        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable-row-active');\n        return datatable;\n      },\n      /**\r\n       * Get selected records\r\n       * @returns {null}\r\n       */\n      getSelectedRecords: function getSelectedRecords() {\n        // support old method\n        Plugin.setSelectedRecords();\n        datatable.API.record = datatable.rows('.' + pfx + 'datatable-row-active').nodes();\n        return datatable.API.record;\n      },\n      /**\r\n       * Get options by dots notation path\r\n       * @param path String Dot notation path in string\r\n       * @returns {*}\r\n       */\n      getOption: function getOption(path) {\n        return Plugin.getObject(path, options);\n      },\n      /**\r\n       * Set global options nodes by dots notation path\r\n       * @param path\r\n       * @param object\r\n       */\n      setOption: function setOption(path, object) {\n        options = Plugin.extendObj(options, path, object);\n      },\n      /**\r\n       * Search filter for local & remote\r\n       * @param value\r\n       * @param columns. Optional list of columns to be filtered.\r\n       */\n      search: function search(value, columns) {\n        if (typeof columns !== 'undefined') columns = $.makeArray(columns);\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n        delay(function () {\n          // get query parameters\n          var query = Plugin.getDataSourceQuery();\n\n          // search not by columns\n          if (typeof columns === 'undefined' && typeof value !== 'undefined') {\n            var key = Plugin.getGeneralSearchKey();\n            query[key] = value;\n          }\n\n          // search by columns, support multiple columns\n          if (_typeof(columns) === 'object') {\n            $.each(columns, function (k, column) {\n              query[column] = value;\n            });\n            // remove empty element from arrays\n            $.each(query, function (k, v) {\n              if (v === '' || $.isEmptyObject(v)) {\n                delete query[k];\n              }\n            });\n          }\n          Plugin.setDataSourceQuery(query);\n\n          // reset pagination to 1 when doing seearching\n          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {\n            page: 1\n          }));\n\n          // local filter only. remote pagination will skip this block\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n          Plugin.dataRender('search');\n        }, Plugin.getOption('search.delay'));\n      },\n      /**\r\n       * Set datasource params extract\r\n       * @param param\r\n       * @param value\r\n       */\n      setDataSourceParam: function setDataSourceParam(param, value) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);\n        Plugin.stateKeep(Plugin.stateId, datatable.API.params);\n      },\n      /**\r\n       * Get datasource params\r\n       * @param param\r\n       */\n      getDataSourceParam: function getDataSourceParam(param) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n        if (typeof param === 'string') {\n          return Plugin.getObject(param, datatable.API.params);\n        }\n        return datatable.API.params;\n      },\n      /**\r\n       * Shortcode to datatable.getDataSourceParam('query');\r\n       * @returns {*}\r\n       */\n      getDataSourceQuery: function getDataSourceQuery() {\n        return Plugin.getDataSourceParam('query') || {};\n      },\n      /**\r\n       * Shortcode to datatable.setDataSourceParam('query', query);\r\n       * @param query\r\n       */\n      setDataSourceQuery: function setDataSourceQuery(query) {\n        Plugin.setDataSourceParam('query', query);\n      },\n      /**\r\n       * Get current page number\r\n       * @returns {number}\r\n       */\n      getCurrentPage: function getCurrentPage() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('.' + pfx + 'datatable-pager-nav').find('.' + pfx + 'datatable-pager-link.' + pfx + 'datatable-pager-link-active').data('page') || 1;\n      },\n      /**\r\n       * Get selected dropdown page size\r\n       * @returns {*|number}\r\n       */\n      getPageSize: function getPageSize() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('select.' + pfx + 'datatable-pager-size').val() || 10;\n      },\n      /**\r\n       * Get total rows\r\n       */\n      getTotalRows: function getTotalRows() {\n        return datatable.API.params.pagination.total;\n      },\n      /**\r\n       * Get full dataset in grid\r\n       * @returns {*|null|Array}\r\n       */\n      getDataSet: function getDataSet() {\n        return datatable.originalDataSet;\n      },\n      nodeTr: [],\n      nodeTd: [],\n      nodeCols: [],\n      recentNode: [],\n      table: function table() {\n        if (typeof datatable.table !== 'undefined') {\n          return datatable.table;\n        }\n      },\n      /**\r\n       * Select a single row from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      row: function row(selector) {\n        Plugin.rows(selector);\n        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();\n        return datatable;\n      },\n      /**\r\n       * Select multiple rows from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      rows: function rows(selector) {\n        if (Plugin.isLocked()) {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n        } else {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-row');\n        }\n        return datatable;\n      },\n      /**\r\n       * Select a single column from the table\r\n       * @param index zero-based index\r\n       * @returns {jQuery}\r\n       */\n      column: function column(index) {\n        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable-cell:nth-child(' + (index + 1) + ')');\n        return datatable;\n      },\n      /**\r\n       * Select multiple columns from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      columns: function columns(selector) {\n        var context = datatable.table;\n        if (Plugin.nodeTr === Plugin.recentNode) {\n          context = Plugin.nodeTr;\n        }\n        var columns = $(context).find('.' + pfx + 'datatable-cell[data-field=\"' + selector + '\"]');\n        if (columns.length > 0) {\n          Plugin.nodeCols = Plugin.recentNode = columns;\n        } else {\n          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable-cell');\n        }\n        return datatable;\n      },\n      cell: function cell(selector) {\n        Plugin.cells(selector);\n        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();\n        return datatable;\n      },\n      cells: function cells(selector) {\n        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable-cell');\n        if (typeof selector !== 'undefined') {\n          cells = $(cells).filter(selector);\n        }\n        Plugin.nodeTd = Plugin.recentNode = cells;\n        return datatable;\n      },\n      /**\r\n       * Delete the selected row from the table\r\n       * @returns {jQuery}\r\n       */\n      remove: function remove() {\n        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {\n          $(Plugin.nodeTr).remove();\n        }\n        Plugin.layoutUpdate();\n        return datatable;\n      },\n      /**\r\n       * Show or hide the columns or rows\r\n       */\n      visible: function visible(bool) {\n        if ($(Plugin.recentNode.length)) {\n          var locked = Plugin.lockEnabledColumns();\n          if (Plugin.recentNode === Plugin.nodeCols) {\n            var index = Plugin.recentNode.index();\n            if (Plugin.isLocked()) {\n              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-scroll').length;\n              if (scrollColumns) {\n                // is at center of scrollable area\n                index += locked.left.length + 1;\n              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-right').length) {\n                // is at the right locked table\n                index += locked.left.length + scrollColumns + 1;\n              }\n            }\n          }\n          if (bool) {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              delete options.columns[index].visible;\n            }\n            $(Plugin.recentNode).show();\n          } else {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              Plugin.setOption('columns.' + index + '.visible', false);\n            }\n            $(Plugin.recentNode).hide();\n          }\n          Plugin.columnHide();\n          Plugin.redraw();\n        }\n      },\n      /**\r\n       * Get the the DOM element for the selected rows or columns\r\n       * @returns {Array}\r\n       */\n      nodes: function nodes() {\n        return Plugin.recentNode;\n      },\n      /**\r\n       * will be implemented soon\r\n       * @returns {jQuery}\r\n       */\n      dataset: function dataset() {\n        return datatable;\n      },\n      /**\r\n       * Open page by number\r\n       * @param page number\r\n       */\n      gotoPage: function gotoPage(page) {\n        if (typeof Plugin.pagingObject !== 'undefined') {\n          Plugin.isInit = true;\n          Plugin.pagingObject.openPage(page);\n        }\n      }\n    };\n\n    /**\r\n     * Public API methods can be used directly by datatable\r\n     */\n    $.each(Plugin, function (funcName, func) {\n      datatable[funcName] = func;\n    });\n\n    // initialize main datatable plugin\n    if (typeof options !== 'undefined') {\n      if (typeof options === 'string') {\n        var method = options;\n        datatable = $(this).data(pluginName);\n        if (typeof datatable !== 'undefined') {\n          options = datatable.options;\n          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n      } else {\n        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable-loaded')) {\n          datatable.dataSet = null;\n          datatable.textAlign = {\n            left: pfx + 'datatable-cell-left',\n            center: pfx + 'datatable-cell-center',\n            right: pfx + 'datatable-cell-right'\n          };\n\n          // merge default and user defined options\n          options = $.extend(true, {}, $.fn[pluginName].defaults, options);\n          datatable.options = options;\n\n          // init plugin process\n          Plugin.init.apply(this, [options]);\n          $(datatable.wrap).data(pluginName, datatable);\n        }\n      }\n    } else {\n      // get existing instance datatable\n      datatable = $(this).data(pluginName);\n      if (typeof datatable === 'undefined') {\n        $.error(pluginName + ' not initialized');\n      }\n      options = datatable.options;\n    }\n    return datatable;\n  };\n\n  // default options\n  $.fn[pluginName].defaults = {\n    // datasource definition\n    data: {\n      type: 'local',\n      source: null,\n      pageSize: 10,\n      // display records per page\n      saveState: true,\n      serverPaging: false,\n      serverFiltering: false,\n      serverSorting: false,\n      autoColumns: false,\n      attr: {\n        rowProps: []\n      }\n    },\n    // layout definition\n    layout: {\n      theme: 'default',\n      // datatable will support multiple themes and designs\n      \"class\": pfx + 'datatable-primary',\n      // custom wrapper class\n      scroll: false,\n      // enable/disable datatable scroll both horizontal and vertical when needed.\n      height: null,\n      // datatable's body's fixed height\n      minHeight: null,\n      footer: false,\n      // display/hide footer\n      header: true,\n      // display/hide header\n      customScrollbar: true,\n      // set false to disable custom scrollbar\n\n      // datatable spinner\n      spinner: {\n        overlayColor: '#000000',\n        opacity: 0,\n        type: 'loader',\n        state: 'primary',\n        message: true\n      },\n      // datatable UI icons\n      icons: {\n        sort: {\n          asc: 'flaticon2-arrow-up',\n          desc: 'flaticon2-arrow-down'\n        },\n        pagination: {\n          next: 'flaticon2-next',\n          prev: 'flaticon2-back',\n          first: 'flaticon2-fast-back',\n          last: 'flaticon2-fast-next',\n          more: 'flaticon-more-1'\n        },\n        rowDetail: {\n          expand: 'fa fa-caret-down',\n          collapse: 'fa fa-caret-right'\n        }\n      }\n    },\n    // column sorting\n    sortable: true,\n    // resize column size with mouse drag coming soon)\n    resizable: false,\n    // column based filtering (coming soon)\n    filterable: false,\n    pagination: true,\n    // inline and bactch editing (cooming soon)\n    editable: false,\n    // columns definition\n    columns: [],\n    search: {\n      // enable trigger search by keyup enter\n      onEnter: false,\n      // input text for search\n      input: null,\n      // search delay in milliseconds\n      delay: 400,\n      //\tremote server search key value\n      key: null\n    },\n    rows: {\n      // deprecated\n      callback: function callback() {},\n      // call before row template\n      beforeTemplate: function beforeTemplate() {},\n      // call after row template\n      afterTemplate: function afterTemplate() {},\n      autoHide: true\n    },\n    // toolbar\n    toolbar: {\n      // place pagination and displayInfo blocks according to the array order\n      layout: ['pagination', 'info'],\n      // toolbar placement can be at top or bottom or both top and bottom repeated\n      placement: ['bottom'],\n      //'top', 'bottom'\n\n      // toolbar items\n      items: {\n        // pagination\n        pagination: {\n          // pagination type(default or scroll)\n          type: 'default',\n          // number of pages to display by breakpoints\n          pages: {\n            desktop: {\n              layout: 'default',\n              pagesNumber: 5\n            },\n            tablet: {\n              layout: 'default',\n              pagesNumber: 3\n            },\n            mobile: {\n              layout: 'compact'\n            }\n          },\n          // navigation buttons\n          navigation: {\n            prev: true,\n            // display prev button\n            next: true,\n            // display next button\n            first: true,\n            // display first button\n            last: true,\n            // display last button\n            more: false // display more button\n          },\n\n          // page size select\n          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for \"ALl\" option\n        },\n\n        // records info\n        info: true\n      }\n    },\n    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.\n    // By default the stirngs will be in the plugin source and here can override it\n    translate: {\n      records: {\n        processing: 'Please wait...',\n        noRecords: 'No records found'\n      },\n      toolbar: {\n        pagination: {\n          items: {\n            \"default\": {\n              first: 'First',\n              prev: 'Previous',\n              next: 'Next',\n              last: 'Last',\n              more: 'More pages',\n              input: 'Page number',\n              select: 'Select page size',\n              all: 'all'\n            },\n            info: 'Showing {{start}} - {{end}} of {{total}}'\n          }\n        }\n      }\n    },\n    extensions: {}\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/core.datatable.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.checkbox.js":
/*!**************************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.checkbox.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  $.fn[pluginName] = $.fn[pluginName] || {};\n\n  /**\r\n   * @param datatable Main datatable plugin instance\r\n   * @param options Extension options\r\n   * @returns {*}\r\n   */\n  $.fn[pluginName].checkbox = function (datatable, options) {\n    var Extension = {\n      selectedAllRows: false,\n      selectedRows: [],\n      unselectedRows: [],\n      init: function init() {\n        if (Extension.selectorEnabled()) {\n          // reset\n          datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n          datatable.stateRemove('checkbox');\n\n          // requestIds is not null\n          if (options.vars.requestIds) {\n            // request ids in response\n            datatable.setDataSourceParam(options.vars.requestIds, true);\n          }\n\n          // remove selected checkbox on datatable reload\n          $(datatable).on(pfx + 'datatable-on-reloaded', function () {\n            datatable.stateRemove('checkbox');\n            datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n            Extension.selectedAllRows = false;\n            Extension.selectedRows = [];\n            Extension.unselectedRows = [];\n          });\n\n          // select all on extension init\n          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);\n          $(datatable).on(pfx + 'datatable-on-layout-updated', function (e, args) {\n            if (args.table != $(datatable.wrap).attr('id')) {\n              return;\n            }\n            datatable.ready(function () {\n              Extension.initVars();\n              Extension.initEvent();\n              Extension.initSelect();\n            });\n          });\n          $(datatable).on(pfx + 'datatable-on-check', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.selectedRows.push(id);\n              // // remove from unselected rows\n              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = $.unique(Extension.selectedRows);\n            storage['unselectedRows'] = $.unique(Extension.unselectedRows);\n            datatable.stateKeep('checkbox', storage);\n          });\n          $(datatable).on(pfx + 'datatable-on-uncheck', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.unselectedRows.push(id);\n              // // remove from selected rows\n              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = $.unique(Extension.selectedRows);\n            storage['unselectedRows'] = $.unique(Extension.unselectedRows);\n            datatable.stateKeep('checkbox', storage);\n          });\n        }\n      },\n      /**\r\n       * Init checkbox clicks event\r\n       */\n      initEvent: function initEvent() {\n        // select all checkbox click\n        $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').click(function (e) {\n          // clear selected and unselected rows\n          Extension.selectedRows = Extension.unselectedRows = [];\n          datatable.stateRemove('checkbox');\n\n          // select all rows\n          Extension.selectedAllRows = !!$(this).is(':checked');\n\n          // local select all current page rows\n          if (!options.vars.requestIds) {\n            if ($(this).is(':checked')) {\n              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').map(function (i, chk) {\n                return $(chk).val();\n              }));\n            }\n            var storage = {};\n            storage['selectedRows'] = $.unique(Extension.selectedRows);\n            datatable.stateKeep('checkbox', storage);\n          }\n\n          // keep selectedAllRows in datasource params\n          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        });\n\n        // single row checkbox click\n        $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').click(function (e) {\n          var id = $(this).val();\n          if ($(this).is(':checked')) {\n            Extension.selectedRows.push(id);\n            // remove from unselected rows\n            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n          } else {\n            Extension.unselectedRows.push(id);\n            // remove from selected rows\n            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n          }\n\n          // local checkbox header check\n          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {\n            // remove select all checkbox, if there is no checked checkbox left\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', false);\n          }\n          var storage = {};\n          storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n          storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n          datatable.stateKeep('checkbox', storage);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        });\n      },\n      unique: function unique(value, index, self) {\n        return self.indexOf(value) === index;\n      },\n      initSelect: function initSelect() {\n        // selected all rows from server\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (!datatable.hasClass(pfx + 'datatable-error')) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          }\n\n          // set all checkbox in table body\n          datatable.setActiveAll(true);\n\n          // remove unselected rows\n          Extension.unselectedRows.forEach(function (id) {\n            datatable.setInactive(id);\n          });\n        } else {\n          // single check for server and local\n          Extension.selectedRows.forEach(function (id) {\n            datatable.setActive(id);\n          });\n\n          // local checkbox; check if all checkboxes of currect page are checked\n          if (!datatable.hasClass(pfx + 'datatable-error') && $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').not(':checked').length < 1) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          }\n        }\n      },\n      /**\r\n       * Check if selector is enabled from options\r\n       */\n      selectorEnabled: function selectorEnabled() {\n        return $.grep(datatable.options.columns, function (n, i) {\n          return n.selector || false;\n        })[0];\n      },\n      initVars: function initVars() {\n        // get single select/unselect from localstorage\n        var storage = datatable.stateGet('checkbox');\n        if (typeof storage !== 'undefined') {\n          Extension.selectedRows = storage['selectedRows'] || [];\n          Extension.unselectedRows = storage['unselectedRows'] || [];\n        }\n      },\n      getSelectedId: function getSelectedId(path) {\n        Extension.initVars();\n\n        // server selected all rows\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (typeof path === 'undefined') {\n            path = options.vars.rowIds;\n          }\n\n          // if selected all rows, return id from response meta\n          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];\n          if (selectedAllRows.length > 0) {\n            // remove single unselected rows from selectedAllRows ids from server response emta\n            Extension.unselectedRows.forEach(function (id) {\n              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));\n            });\n          }\n          return $.unique(selectedAllRows);\n        }\n\n        // else return single checked selected rows\n        return Extension.selectedRows;\n      },\n      remove: function remove(array, element) {\n        return array.filter(function (e) {\n          return e !== element;\n        });\n      }\n    };\n\n    // make the extension accessible from datatable init\n    datatable.checkbox = function () {\n      return Extension;\n    };\n    if (_typeof(options) === 'object') {\n      options = $.extend(true, {}, $.fn[pluginName].checkbox[\"default\"], options);\n      Extension.init.apply(this, [options]);\n    }\n    return datatable;\n  };\n  $.fn[pluginName].checkbox[\"default\"] = {\n    vars: {\n      // select all rows flag to be sent to the server\n      selectedAllRows: 'selectedAllRows',\n      // request id parameter's name\n      requestIds: 'requestIds',\n      // response path to all rows id\n      rowIds: 'meta.rowIds'\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLmNoZWNrYm94LmpzPzU0NjgiXSwibmFtZXMiOlsiJCIsInBsdWdpbk5hbWUiLCJwZngiLCJmbiIsImNoZWNrYm94IiwiZGF0YXRhYmxlIiwib3B0aW9ucyIsIkV4dGVuc2lvbiIsInNlbGVjdGVkQWxsUm93cyIsInNlbGVjdGVkUm93cyIsInVuc2VsZWN0ZWRSb3dzIiwiaW5pdCIsInNlbGVjdG9yRW5hYmxlZCIsInNldERhdGFTb3VyY2VQYXJhbSIsInZhcnMiLCJzdGF0ZVJlbW92ZSIsInJlcXVlc3RJZHMiLCJvbiIsImdldERhdGFTb3VyY2VQYXJhbSIsImUiLCJhcmdzIiwidGFibGUiLCJ3cmFwIiwiYXR0ciIsInJlYWR5IiwiaW5pdFZhcnMiLCJpbml0RXZlbnQiLCJpbml0U2VsZWN0IiwiaWRzIiwiZm9yRWFjaCIsImlkIiwicHVzaCIsInJlbW92ZSIsInN0b3JhZ2UiLCJ1bmlxdWUiLCJzdGF0ZUtlZXAiLCJ0YWJsZUhlYWQiLCJmaW5kIiwiY2xpY2siLCJpcyIsIm1ha2VBcnJheSIsInRhYmxlQm9keSIsIm1hcCIsImkiLCJjaGsiLCJ2YWwiLCJ0cmlnZ2VyIiwibGVuZ3RoIiwicHJvcCIsImZpbHRlciIsInZhbHVlIiwiaW5kZXgiLCJzZWxmIiwiaW5kZXhPZiIsImhhc0NsYXNzIiwic2V0QWN0aXZlQWxsIiwic2V0SW5hY3RpdmUiLCJzZXRBY3RpdmUiLCJub3QiLCJncmVwIiwiY29sdW1ucyIsIm4iLCJzZWxlY3RvciIsInN0YXRlR2V0IiwiZ2V0U2VsZWN0ZWRJZCIsInBhdGgiLCJyb3dJZHMiLCJnZXRPYmplY3QiLCJsYXN0UmVzcG9uc2UiLCJwYXJzZUludCIsImFycmF5IiwiZWxlbWVudCIsImV4dGVuZCIsImFwcGx5IiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFBQTtBQUNaLFdBQVNBLENBQUMsRUFBRTtFQUVaLElBQUlDLFVBQVUsR0FBRyxhQUFhO0VBQzlCLElBQUlDLEdBQUcsR0FBRyxFQUFFO0VBRVpGLENBQUMsQ0FBQ0csRUFBRSxDQUFDRixVQUFVLENBQUMsR0FBR0QsQ0FBQyxDQUFDRyxFQUFFLENBQUNGLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7RUFFekM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtFQUNDRCxDQUFDLENBQUNHLEVBQUUsQ0FBQ0YsVUFBVSxDQUFDLENBQUNHLFFBQVEsR0FBRyxVQUFTQyxTQUFTLEVBQUVDLE9BQU8sRUFBRTtJQUN4RCxJQUFJQyxTQUFTLEdBQUc7TUFDZkMsZUFBZSxFQUFFLEtBQUs7TUFDdEJDLFlBQVksRUFBRSxFQUFFO01BQ2hCQyxjQUFjLEVBQUUsRUFBRTtNQUVsQkMsSUFBSSxFQUFFLGdCQUFXO1FBQ2hCLElBQUlKLFNBQVMsQ0FBQ0ssZUFBZSxFQUFFLEVBQUU7VUFDaEM7VUFDQVAsU0FBUyxDQUFDUSxrQkFBa0IsQ0FBQ1AsT0FBTyxDQUFDUSxJQUFJLENBQUNOLGVBQWUsRUFBRSxLQUFLLENBQUM7VUFDakVILFNBQVMsQ0FBQ1UsV0FBVyxDQUFDLFVBQVUsQ0FBQzs7VUFFakM7VUFDQSxJQUFJVCxPQUFPLENBQUNRLElBQUksQ0FBQ0UsVUFBVSxFQUFFO1lBQzVCO1lBQ0FYLFNBQVMsQ0FBQ1Esa0JBQWtCLENBQUNQLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDO1VBQzVEOztVQUVBO1VBQ0FoQixDQUFDLENBQUNLLFNBQVMsQ0FBQyxDQUFDWSxFQUFFLENBQUNmLEdBQUcsR0FBRyx1QkFBdUIsRUFBRSxZQUFXO1lBQ3pERyxTQUFTLENBQUNVLFdBQVcsQ0FBQyxVQUFVLENBQUM7WUFDakNWLFNBQVMsQ0FBQ1Esa0JBQWtCLENBQUNQLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDTixlQUFlLEVBQUUsS0FBSyxDQUFDO1lBQ2pFRCxTQUFTLENBQUNDLGVBQWUsR0FBRyxLQUFLO1lBQ2pDRCxTQUFTLENBQUNFLFlBQVksR0FBRyxFQUFFO1lBQzNCRixTQUFTLENBQUNHLGNBQWMsR0FBRyxFQUFFO1VBQzlCLENBQUMsQ0FBQzs7VUFFRjtVQUNBSCxTQUFTLENBQUNDLGVBQWUsR0FBR0gsU0FBUyxDQUFDYSxrQkFBa0IsQ0FBQ1osT0FBTyxDQUFDUSxJQUFJLENBQUNOLGVBQWUsQ0FBQztVQUV0RlIsQ0FBQyxDQUFDSyxTQUFTLENBQUMsQ0FBQ1ksRUFBRSxDQUFDZixHQUFHLEdBQUcsNkJBQTZCLEVBQUUsVUFBU2lCLENBQUMsRUFBRUMsSUFBSSxFQUFFO1lBQ3RFLElBQUlBLElBQUksQ0FBQ0MsS0FBSyxJQUFJckIsQ0FBQyxDQUFDSyxTQUFTLENBQUNpQixJQUFJLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2NBQy9DO1lBQ0Q7WUFDQWxCLFNBQVMsQ0FBQ21CLEtBQUssQ0FBQyxZQUFXO2NBQzFCakIsU0FBUyxDQUFDa0IsUUFBUSxFQUFFO2NBQ3BCbEIsU0FBUyxDQUFDbUIsU0FBUyxFQUFFO2NBQ3JCbkIsU0FBUyxDQUFDb0IsVUFBVSxFQUFFO1lBQ3ZCLENBQUMsQ0FBQztVQUNILENBQUMsQ0FBQztVQUVGM0IsQ0FBQyxDQUFDSyxTQUFTLENBQUMsQ0FBQ1ksRUFBRSxDQUFDZixHQUFHLEdBQUcsb0JBQW9CLEVBQUUsVUFBU2lCLENBQUMsRUFBRVMsR0FBRyxFQUFFO1lBQzVEQSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxVQUFTQyxFQUFFLEVBQUU7Y0FDeEJ2QixTQUFTLENBQUNFLFlBQVksQ0FBQ3NCLElBQUksQ0FBQ0QsRUFBRSxDQUFDO2NBQy9CO2NBQ0F2QixTQUFTLENBQUNHLGNBQWMsR0FBR0gsU0FBUyxDQUFDeUIsTUFBTSxDQUFDekIsU0FBUyxDQUFDRyxjQUFjLEVBQUVvQixFQUFFLENBQUM7WUFDMUUsQ0FBQyxDQUFDO1lBQ0YsSUFBSUcsT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNoQkEsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHakMsQ0FBQyxDQUFDa0MsTUFBTSxDQUFDM0IsU0FBUyxDQUFDRSxZQUFZLENBQUM7WUFDMUR3QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBR2pDLENBQUMsQ0FBQ2tDLE1BQU0sQ0FBQzNCLFNBQVMsQ0FBQ0csY0FBYyxDQUFDO1lBQzlETCxTQUFTLENBQUM4QixTQUFTLENBQUMsVUFBVSxFQUFFRixPQUFPLENBQUM7VUFDekMsQ0FBQyxDQUFDO1VBQ0ZqQyxDQUFDLENBQUNLLFNBQVMsQ0FBQyxDQUFDWSxFQUFFLENBQUNmLEdBQUcsR0FBRyxzQkFBc0IsRUFBRSxVQUFTaUIsQ0FBQyxFQUFFUyxHQUFHLEVBQUU7WUFDOURBLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLFVBQVNDLEVBQUUsRUFBRTtjQUN4QnZCLFNBQVMsQ0FBQ0csY0FBYyxDQUFDcUIsSUFBSSxDQUFDRCxFQUFFLENBQUM7Y0FDakM7Y0FDQXZCLFNBQVMsQ0FBQ0UsWUFBWSxHQUFHRixTQUFTLENBQUN5QixNQUFNLENBQUN6QixTQUFTLENBQUNFLFlBQVksRUFBRXFCLEVBQUUsQ0FBQztZQUN0RSxDQUFDLENBQUM7WUFDRixJQUFJRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCQSxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUdqQyxDQUFDLENBQUNrQyxNQUFNLENBQUMzQixTQUFTLENBQUNFLFlBQVksQ0FBQztZQUMxRHdCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHakMsQ0FBQyxDQUFDa0MsTUFBTSxDQUFDM0IsU0FBUyxDQUFDRyxjQUFjLENBQUM7WUFDOURMLFNBQVMsQ0FBQzhCLFNBQVMsQ0FBQyxVQUFVLEVBQUVGLE9BQU8sQ0FBQztVQUN6QyxDQUFDLENBQUM7UUFDSDtNQUNELENBQUM7TUFFRDtBQUNIO0FBQ0E7TUFDR1AsU0FBUyxFQUFFLHFCQUFXO1FBQ3JCO1FBQ0ExQixDQUFDLENBQUNLLFNBQVMsQ0FBQytCLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxHQUFHbkMsR0FBRyxHQUFHLGtDQUFrQyxDQUFDLENBQUNvQyxLQUFLLENBQUMsVUFBU25CLENBQUMsRUFBRTtVQUM3RjtVQUNBWixTQUFTLENBQUNFLFlBQVksR0FBR0YsU0FBUyxDQUFDRyxjQUFjLEdBQUcsRUFBRTtVQUN0REwsU0FBUyxDQUFDVSxXQUFXLENBQUMsVUFBVSxDQUFDOztVQUVqQztVQUNBUixTQUFTLENBQUNDLGVBQWUsR0FBRyxDQUFDLENBQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ3VDLEVBQUUsQ0FBQyxVQUFVLENBQUM7O1VBRXBEO1VBQ0EsSUFBSSxDQUFDakMsT0FBTyxDQUFDUSxJQUFJLENBQUNFLFVBQVUsRUFBRTtZQUM3QixJQUFJaEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDdUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2NBQzNCaEMsU0FBUyxDQUFDRSxZQUFZLEdBQUdULENBQUMsQ0FBQ3dDLFNBQVMsQ0FBQ3hDLENBQUMsQ0FBQ0ssU0FBUyxDQUFDb0MsU0FBUyxDQUFDLENBQUNKLElBQUksQ0FBQyxHQUFHLEdBQUduQyxHQUFHLEdBQUcscUNBQXFDLENBQUMsQ0FBQ3dDLEdBQUcsQ0FBQyxVQUFTQyxDQUFDLEVBQUVDLEdBQUcsRUFBRTtnQkFDeEksT0FBTzVDLENBQUMsQ0FBQzRDLEdBQUcsQ0FBQyxDQUFDQyxHQUFHLEVBQUU7Y0FDcEIsQ0FBQyxDQUFDLENBQUM7WUFDSjtZQUNBLElBQUlaLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDaEJBLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBR2pDLENBQUMsQ0FBQ2tDLE1BQU0sQ0FBQzNCLFNBQVMsQ0FBQ0UsWUFBWSxDQUFDO1lBQzFESixTQUFTLENBQUM4QixTQUFTLENBQUMsVUFBVSxFQUFFRixPQUFPLENBQUM7VUFDekM7O1VBRUE7VUFDQTVCLFNBQVMsQ0FBQ1Esa0JBQWtCLENBQUNQLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDTixlQUFlLEVBQUVELFNBQVMsQ0FBQ0MsZUFBZSxDQUFDO1VBRXJGUixDQUFDLENBQUNLLFNBQVMsQ0FBQyxDQUFDeUMsT0FBTyxDQUFDNUMsR0FBRyxHQUFHLDZCQUE2QixFQUFFLENBQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQzs7UUFFRjtRQUNBQSxDQUFDLENBQUNLLFNBQVMsQ0FBQ29DLFNBQVMsQ0FBQyxDQUFDSixJQUFJLENBQUMsR0FBRyxHQUFHbkMsR0FBRyxHQUFHLHFDQUFxQyxDQUFDLENBQUNvQyxLQUFLLENBQUMsVUFBU25CLENBQUMsRUFBRTtVQUNoRyxJQUFJVyxFQUFFLEdBQUc5QixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM2QyxHQUFHLEVBQUU7VUFDdEIsSUFBSTdDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ3VDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMzQmhDLFNBQVMsQ0FBQ0UsWUFBWSxDQUFDc0IsSUFBSSxDQUFDRCxFQUFFLENBQUM7WUFDL0I7WUFDQXZCLFNBQVMsQ0FBQ0csY0FBYyxHQUFHSCxTQUFTLENBQUN5QixNQUFNLENBQUN6QixTQUFTLENBQUNHLGNBQWMsRUFBRW9CLEVBQUUsQ0FBQztVQUMxRSxDQUFDLE1BQ0k7WUFDSnZCLFNBQVMsQ0FBQ0csY0FBYyxDQUFDcUIsSUFBSSxDQUFDRCxFQUFFLENBQUM7WUFDakM7WUFDQXZCLFNBQVMsQ0FBQ0UsWUFBWSxHQUFHRixTQUFTLENBQUN5QixNQUFNLENBQUN6QixTQUFTLENBQUNFLFlBQVksRUFBRXFCLEVBQUUsQ0FBQztVQUN0RTs7VUFFQTtVQUNBLElBQUksQ0FBQ3hCLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDRSxVQUFVLElBQUlULFNBQVMsQ0FBQ0UsWUFBWSxDQUFDc0MsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsRTtZQUNBL0MsQ0FBQyxDQUFDSyxTQUFTLENBQUMrQixTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsR0FBR25DLEdBQUcsR0FBRyxrQ0FBa0MsQ0FBQyxDQUFDOEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7VUFDbkc7VUFFQSxJQUFJZixPQUFPLEdBQUcsQ0FBQyxDQUFDO1VBQ2hCQSxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcxQixTQUFTLENBQUNFLFlBQVksQ0FBQ3dDLE1BQU0sQ0FBQzFDLFNBQVMsQ0FBQzJCLE1BQU0sQ0FBQztVQUN6RUQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcxQixTQUFTLENBQUNHLGNBQWMsQ0FBQ3VDLE1BQU0sQ0FBQzFDLFNBQVMsQ0FBQzJCLE1BQU0sQ0FBQztVQUM3RTdCLFNBQVMsQ0FBQzhCLFNBQVMsQ0FBQyxVQUFVLEVBQUVGLE9BQU8sQ0FBQztVQUV4Q2pDLENBQUMsQ0FBQ0ssU0FBUyxDQUFDLENBQUN5QyxPQUFPLENBQUM1QyxHQUFHLEdBQUcsNkJBQTZCLEVBQUUsQ0FBQ0YsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDO01BQ0gsQ0FBQztNQUVEa0MsTUFBTSxFQUFFLGdCQUFTZ0IsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRTtRQUNwQyxPQUFPQSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsS0FBSyxDQUFDLEtBQUtDLEtBQUs7TUFDckMsQ0FBQztNQUVEeEIsVUFBVSxFQUFFLHNCQUFXO1FBQ3RCO1FBQ0EsSUFBSXBCLFNBQVMsQ0FBQ0MsZUFBZSxJQUFJRixPQUFPLENBQUNRLElBQUksQ0FBQ0UsVUFBVSxFQUFFO1VBQ3pELElBQUksQ0FBQ1gsU0FBUyxDQUFDaUQsUUFBUSxDQUFDcEQsR0FBRyxHQUFHLGlCQUFpQixDQUFDLEVBQUU7WUFDakQ7WUFDQUYsQ0FBQyxDQUFDSyxTQUFTLENBQUMrQixTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsR0FBR25DLEdBQUcsR0FBRyxrQ0FBa0MsQ0FBQyxDQUFDOEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7VUFDbEc7O1VBRUE7VUFDQTNDLFNBQVMsQ0FBQ2tELFlBQVksQ0FBQyxJQUFJLENBQUM7O1VBRTVCO1VBQ0FoRCxTQUFTLENBQUNHLGNBQWMsQ0FBQ21CLE9BQU8sQ0FBQyxVQUFTQyxFQUFFLEVBQUU7WUFDN0N6QixTQUFTLENBQUNtRCxXQUFXLENBQUMxQixFQUFFLENBQUM7VUFDMUIsQ0FBQyxDQUFDO1FBRUgsQ0FBQyxNQUNJO1VBQ0o7VUFDQXZCLFNBQVMsQ0FBQ0UsWUFBWSxDQUFDb0IsT0FBTyxDQUFDLFVBQVNDLEVBQUUsRUFBRTtZQUMzQ3pCLFNBQVMsQ0FBQ29ELFNBQVMsQ0FBQzNCLEVBQUUsQ0FBQztVQUN4QixDQUFDLENBQUM7O1VBRUY7VUFDQSxJQUFJLENBQUN6QixTQUFTLENBQUNpRCxRQUFRLENBQUNwRCxHQUFHLEdBQUcsaUJBQWlCLENBQUMsSUFBSUYsQ0FBQyxDQUFDSyxTQUFTLENBQUNvQyxTQUFTLENBQUMsQ0FBQ0osSUFBSSxDQUFDLEdBQUcsR0FBR25DLEdBQUcsR0FBRyxxQ0FBcUMsQ0FBQyxDQUFDd0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDWCxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlKO1lBQ0EvQyxDQUFDLENBQUNLLFNBQVMsQ0FBQytCLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxHQUFHbkMsR0FBRyxHQUFHLGtDQUFrQyxDQUFDLENBQUM4QyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztVQUNsRztRQUNEO01BQ0QsQ0FBQztNQUVEO0FBQ0g7QUFDQTtNQUNHcEMsZUFBZSxFQUFFLDJCQUFXO1FBQzNCLE9BQU9aLENBQUMsQ0FBQzJELElBQUksQ0FBQ3RELFNBQVMsQ0FBQ0MsT0FBTyxDQUFDc0QsT0FBTyxFQUFFLFVBQVNDLENBQUMsRUFBRWxCLENBQUMsRUFBRTtVQUN2RCxPQUFPa0IsQ0FBQyxDQUFDQyxRQUFRLElBQUksS0FBSztRQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDTixDQUFDO01BRURyQyxRQUFRLEVBQUUsb0JBQVc7UUFDcEI7UUFDQSxJQUFJUSxPQUFPLEdBQUc1QixTQUFTLENBQUMwRCxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQzVDLElBQUksT0FBTzlCLE9BQU8sS0FBSyxXQUFXLEVBQUU7VUFDbkMxQixTQUFTLENBQUNFLFlBQVksR0FBR3dCLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFO1VBQ3REMUIsU0FBUyxDQUFDRyxjQUFjLEdBQUd1QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1FBQzNEO01BQ0QsQ0FBQztNQUVEK0IsYUFBYSxFQUFFLHVCQUFTQyxJQUFJLEVBQUU7UUFDN0IxRCxTQUFTLENBQUNrQixRQUFRLEVBQUU7O1FBRXBCO1FBQ0EsSUFBSWxCLFNBQVMsQ0FBQ0MsZUFBZSxJQUFJRixPQUFPLENBQUNRLElBQUksQ0FBQ0UsVUFBVSxFQUFFO1VBQ3pELElBQUksT0FBT2lELElBQUksS0FBSyxXQUFXLEVBQUU7WUFDaENBLElBQUksR0FBRzNELE9BQU8sQ0FBQ1EsSUFBSSxDQUFDb0QsTUFBTTtVQUMzQjs7VUFFQTtVQUNBLElBQUkxRCxlQUFlLEdBQUdILFNBQVMsQ0FBQzhELFNBQVMsQ0FBQ0YsSUFBSSxFQUFFNUQsU0FBUyxDQUFDK0QsWUFBWSxDQUFDLElBQUksRUFBRTtVQUU3RSxJQUFJNUQsZUFBZSxDQUFDdUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQjtZQUNBeEMsU0FBUyxDQUFDRyxjQUFjLENBQUNtQixPQUFPLENBQUMsVUFBU0MsRUFBRSxFQUFFO2NBQzdDdEIsZUFBZSxHQUFHRCxTQUFTLENBQUN5QixNQUFNLENBQUN4QixlQUFlLEVBQUU2RCxRQUFRLENBQUN2QyxFQUFFLENBQUMsQ0FBQztZQUNsRSxDQUFDLENBQUM7VUFDSDtVQUNBLE9BQU85QixDQUFDLENBQUNrQyxNQUFNLENBQUMxQixlQUFlLENBQUM7UUFDakM7O1FBRUE7UUFDQSxPQUFPRCxTQUFTLENBQUNFLFlBQVk7TUFDOUIsQ0FBQztNQUVEdUIsTUFBTSxFQUFFLGdCQUFTc0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDaEMsT0FBT0QsS0FBSyxDQUFDckIsTUFBTSxDQUFDLFVBQVM5QixDQUFDLEVBQUU7VUFDL0IsT0FBT0EsQ0FBQyxLQUFLb0QsT0FBTztRQUNyQixDQUFDLENBQUM7TUFDSDtJQUNELENBQUM7O0lBRUQ7SUFDQWxFLFNBQVMsQ0FBQ0QsUUFBUSxHQUFHLFlBQVc7TUFDL0IsT0FBT0csU0FBUztJQUNqQixDQUFDO0lBRUQsSUFBSSxRQUFPRCxPQUFPLE1BQUssUUFBUSxFQUFFO01BQ2hDQSxPQUFPLEdBQUdOLENBQUMsQ0FBQ3dFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUV4RSxDQUFDLENBQUNHLEVBQUUsQ0FBQ0YsVUFBVSxDQUFDLENBQUNHLFFBQVEsV0FBUSxFQUFFRSxPQUFPLENBQUM7TUFDeEVDLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDOEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDbkUsT0FBTyxDQUFDLENBQUM7SUFDdEM7SUFFQSxPQUFPRCxTQUFTO0VBQ2pCLENBQUM7RUFFREwsQ0FBQyxDQUFDRyxFQUFFLENBQUNGLFVBQVUsQ0FBQyxDQUFDRyxRQUFRLFdBQVEsR0FBRztJQUNuQ1UsSUFBSSxFQUFFO01BQ0w7TUFDQU4sZUFBZSxFQUFFLGlCQUFpQjtNQUNsQztNQUNBUSxVQUFVLEVBQUUsWUFBWTtNQUN4QjtNQUNBa0QsTUFBTSxFQUFFO0lBQ1Q7RUFDRCxDQUFDO0FBRUYsQ0FBQyxFQUFDUSxNQUFNLENBQUMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLmNoZWNrYm94LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbihmdW5jdGlvbigkKSB7XHJcblxyXG5cdHZhciBwbHVnaW5OYW1lID0gJ0tURGF0YXRhYmxlJztcclxuXHR2YXIgcGZ4ID0gJyc7XHJcblxyXG5cdCQuZm5bcGx1Z2luTmFtZV0gPSAkLmZuW3BsdWdpbk5hbWVdIHx8IHt9O1xyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gZGF0YXRhYmxlIE1haW4gZGF0YXRhYmxlIHBsdWdpbiBpbnN0YW5jZVxyXG5cdCAqIEBwYXJhbSBvcHRpb25zIEV4dGVuc2lvbiBvcHRpb25zXHJcblx0ICogQHJldHVybnMgeyp9XHJcblx0ICovXHJcblx0JC5mbltwbHVnaW5OYW1lXS5jaGVja2JveCA9IGZ1bmN0aW9uKGRhdGF0YWJsZSwgb3B0aW9ucykge1xyXG5cdFx0dmFyIEV4dGVuc2lvbiA9IHtcclxuXHRcdFx0c2VsZWN0ZWRBbGxSb3dzOiBmYWxzZSxcclxuXHRcdFx0c2VsZWN0ZWRSb3dzOiBbXSxcclxuXHRcdFx0dW5zZWxlY3RlZFJvd3M6IFtdLFxyXG5cclxuXHRcdFx0aW5pdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKEV4dGVuc2lvbi5zZWxlY3RvckVuYWJsZWQoKSkge1xyXG5cdFx0XHRcdFx0Ly8gcmVzZXRcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5zZXREYXRhU291cmNlUGFyYW0ob3B0aW9ucy52YXJzLnNlbGVjdGVkQWxsUm93cywgZmFsc2UpO1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnN0YXRlUmVtb3ZlKCdjaGVja2JveCcpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlcXVlc3RJZHMgaXMgbm90IG51bGxcclxuXHRcdFx0XHRcdGlmIChvcHRpb25zLnZhcnMucmVxdWVzdElkcykge1xyXG5cdFx0XHRcdFx0XHQvLyByZXF1ZXN0IGlkcyBpbiByZXNwb25zZVxyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc2V0RGF0YVNvdXJjZVBhcmFtKG9wdGlvbnMudmFycy5yZXF1ZXN0SWRzLCB0cnVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyByZW1vdmUgc2VsZWN0ZWQgY2hlY2tib3ggb24gZGF0YXRhYmxlIHJlbG9hZFxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLm9uKHBmeCArICdkYXRhdGFibGUtb24tcmVsb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnN0YXRlUmVtb3ZlKCdjaGVja2JveCcpO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc2V0RGF0YVNvdXJjZVBhcmFtKG9wdGlvbnMudmFycy5zZWxlY3RlZEFsbFJvd3MsIGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkQWxsUm93cyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzID0gW107XHJcblx0XHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cyA9IFtdO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2VsZWN0IGFsbCBvbiBleHRlbnNpb24gaW5pdFxyXG5cdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkQWxsUm93cyA9IGRhdGF0YWJsZS5nZXREYXRhU291cmNlUGFyYW0ob3B0aW9ucy52YXJzLnNlbGVjdGVkQWxsUm93cyk7XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLm9uKHBmeCArICdkYXRhdGFibGUtb24tbGF5b3V0LXVwZGF0ZWQnLCBmdW5jdGlvbihlLCBhcmdzKSB7XHJcblx0XHRcdFx0XHRcdGlmIChhcmdzLnRhYmxlICE9ICQoZGF0YXRhYmxlLndyYXApLmF0dHIoJ2lkJykpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi5pbml0VmFycygpO1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi5pbml0RXZlbnQoKTtcclxuXHRcdFx0XHRcdFx0XHRFeHRlbnNpb24uaW5pdFNlbGVjdCgpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS5vbihwZnggKyAnZGF0YXRhYmxlLW9uLWNoZWNrJywgZnVuY3Rpb24oZSwgaWRzKSB7XHJcblx0XHRcdFx0XHRcdGlkcy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkUm93cy5wdXNoKGlkKTtcclxuXHRcdFx0XHRcdFx0XHQvLyAvLyByZW1vdmUgZnJvbSB1bnNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRcdFx0XHRFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MgPSBFeHRlbnNpb24ucmVtb3ZlKEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cywgaWQpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0dmFyIHN0b3JhZ2UgPSB7fTtcclxuXHRcdFx0XHRcdFx0c3RvcmFnZVsnc2VsZWN0ZWRSb3dzJ10gPSAkLnVuaXF1ZShFeHRlbnNpb24uc2VsZWN0ZWRSb3dzKTtcclxuXHRcdFx0XHRcdFx0c3RvcmFnZVsndW5zZWxlY3RlZFJvd3MnXSA9ICQudW5pcXVlKEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cyk7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zdGF0ZUtlZXAoJ2NoZWNrYm94Jywgc3RvcmFnZSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS5vbihwZnggKyAnZGF0YXRhYmxlLW9uLXVuY2hlY2snLCBmdW5jdGlvbihlLCBpZHMpIHtcclxuXHRcdFx0XHRcdFx0aWRzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MucHVzaChpZCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gLy8gcmVtb3ZlIGZyb20gc2VsZWN0ZWQgcm93c1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MgPSBFeHRlbnNpb24ucmVtb3ZlKEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MsIGlkKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdHZhciBzdG9yYWdlID0ge307XHJcblx0XHRcdFx0XHRcdHN0b3JhZ2VbJ3NlbGVjdGVkUm93cyddID0gJC51bmlxdWUoRXh0ZW5zaW9uLnNlbGVjdGVkUm93cyk7XHJcblx0XHRcdFx0XHRcdHN0b3JhZ2VbJ3Vuc2VsZWN0ZWRSb3dzJ10gPSAkLnVuaXF1ZShFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MpO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVLZWVwKCdjaGVja2JveCcsIHN0b3JhZ2UpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEluaXQgY2hlY2tib3ggY2xpY2tzIGV2ZW50XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpbml0RXZlbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIHNlbGVjdCBhbGwgY2hlY2tib3ggY2xpY2tcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LWFsbCA+IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5jbGljayhmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHQvLyBjbGVhciBzZWxlY3RlZCBhbmQgdW5zZWxlY3RlZCByb3dzXHJcblx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzID0gRXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzID0gW107XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVSZW1vdmUoJ2NoZWNrYm94Jyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2VsZWN0IGFsbCByb3dzXHJcblx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzID0gISEkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGxvY2FsIHNlbGVjdCBhbGwgY3VycmVudCBwYWdlIHJvd3NcclxuXHRcdFx0XHRcdGlmICghb3B0aW9ucy52YXJzLnJlcXVlc3RJZHMpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuXHRcdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzID0gJC5tYWtlQXJyYXkoJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveC1zaW5nbGUgPiBbdHlwZT1cImNoZWNrYm94XCJdJykubWFwKGZ1bmN0aW9uKGksIGNoaykge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICQoY2hrKS52YWwoKTtcclxuXHRcdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dmFyIHN0b3JhZ2UgPSB7fTtcclxuXHRcdFx0XHRcdFx0c3RvcmFnZVsnc2VsZWN0ZWRSb3dzJ10gPSAkLnVuaXF1ZShFeHRlbnNpb24uc2VsZWN0ZWRSb3dzKTtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnN0YXRlS2VlcCgnY2hlY2tib3gnLCBzdG9yYWdlKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBrZWVwIHNlbGVjdGVkQWxsUm93cyBpbiBkYXRhc291cmNlIHBhcmFtc1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnNldERhdGFTb3VyY2VQYXJhbShvcHRpb25zLnZhcnMuc2VsZWN0ZWRBbGxSb3dzLCBFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzKTtcclxuXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWNsaWNrLWNoZWNrYm94JywgWyQodGhpcyldKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gc2luZ2xlIHJvdyBjaGVja2JveCBjbGlja1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtc2luZ2xlID4gW3R5cGU9XCJjaGVja2JveFwiXScpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdHZhciBpZCA9ICQodGhpcykudmFsKCk7XHJcblx0XHRcdFx0XHRpZiAoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSkge1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzLnB1c2goaWQpO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgZnJvbSB1bnNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzID0gRXh0ZW5zaW9uLnJlbW92ZShFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MsIGlkKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MucHVzaChpZCk7XHJcblx0XHRcdFx0XHRcdC8vIHJlbW92ZSBmcm9tIHNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkUm93cyA9IEV4dGVuc2lvbi5yZW1vdmUoRXh0ZW5zaW9uLnNlbGVjdGVkUm93cywgaWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIGxvY2FsIGNoZWNrYm94IGhlYWRlciBjaGVja1xyXG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLnZhcnMucmVxdWVzdElkcyAmJiBFeHRlbnNpb24uc2VsZWN0ZWRSb3dzLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIHNlbGVjdCBhbGwgY2hlY2tib3gsIGlmIHRoZXJlIGlzIG5vIGNoZWNrZWQgY2hlY2tib3ggbGVmdFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LWFsbCA+IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBzdG9yYWdlID0ge307XHJcblx0XHRcdFx0XHRzdG9yYWdlWydzZWxlY3RlZFJvd3MnXSA9IEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MuZmlsdGVyKEV4dGVuc2lvbi51bmlxdWUpO1xyXG5cdFx0XHRcdFx0c3RvcmFnZVsndW5zZWxlY3RlZFJvd3MnXSA9IEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cy5maWx0ZXIoRXh0ZW5zaW9uLnVuaXF1ZSk7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVLZWVwKCdjaGVja2JveCcsIHN0b3JhZ2UpO1xyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tY2xpY2stY2hlY2tib3gnLCBbJCh0aGlzKV0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0dW5pcXVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIHNlbGYpIHtcclxuXHRcdFx0XHRyZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRpbml0U2VsZWN0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBzZWxlY3RlZCBhbGwgcm93cyBmcm9tIHNlcnZlclxyXG5cdFx0XHRcdGlmIChFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzICYmIG9wdGlvbnMudmFycy5yZXF1ZXN0SWRzKSB7XHJcblx0XHRcdFx0XHRpZiAoIWRhdGF0YWJsZS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWVycm9yJykpIHtcclxuXHRcdFx0XHRcdFx0Ly8gc2V0IGhlYWRlciBzZWxlY3QgYWxsIGNoZWNrYm94IGNoZWNrZWRcclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveC1hbGwgPiBbdHlwZT1cImNoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIHNldCBhbGwgY2hlY2tib3ggaW4gdGFibGUgYm9keVxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnNldEFjdGl2ZUFsbCh0cnVlKTtcclxuXHJcblx0XHRcdFx0XHQvLyByZW1vdmUgdW5zZWxlY3RlZCByb3dzXHJcblx0XHRcdFx0XHRFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MuZm9yRWFjaChmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc2V0SW5hY3RpdmUoaWQpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdC8vIHNpbmdsZSBjaGVjayBmb3Igc2VydmVyIGFuZCBsb2NhbFxyXG5cdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkUm93cy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zZXRBY3RpdmUoaWQpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgY2hlY2tib3g7IGNoZWNrIGlmIGFsbCBjaGVja2JveGVzIG9mIGN1cnJlY3QgcGFnZSBhcmUgY2hlY2tlZFxyXG5cdFx0XHRcdFx0aWYgKCFkYXRhdGFibGUuaGFzQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1lcnJvcicpICYmICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtc2luZ2xlID4gW3R5cGU9XCJjaGVja2JveFwiXScpLm5vdCgnOmNoZWNrZWQnKS5sZW5ndGggPCAxKSB7XHJcblx0XHRcdFx0XHRcdC8vIHNldCBoZWFkZXIgc2VsZWN0IGFsbCBjaGVja2JveCBjaGVja2VkXHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtYWxsID4gW3R5cGU9XCJjaGVja2JveFwiXScpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQ2hlY2sgaWYgc2VsZWN0b3IgaXMgZW5hYmxlZCBmcm9tIG9wdGlvbnNcclxuXHRcdFx0ICovXHJcblx0XHRcdHNlbGVjdG9yRW5hYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICQuZ3JlcChkYXRhdGFibGUub3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbi5zZWxlY3RvciB8fCBmYWxzZTtcclxuXHRcdFx0XHR9KVswXTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGluaXRWYXJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBnZXQgc2luZ2xlIHNlbGVjdC91bnNlbGVjdCBmcm9tIGxvY2Fsc3RvcmFnZVxyXG5cdFx0XHRcdHZhciBzdG9yYWdlID0gZGF0YXRhYmxlLnN0YXRlR2V0KCdjaGVja2JveCcpO1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MgPSBzdG9yYWdlWydzZWxlY3RlZFJvd3MnXSB8fCBbXTtcclxuXHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cyA9IHN0b3JhZ2VbJ3Vuc2VsZWN0ZWRSb3dzJ10gfHwgW107XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Z2V0U2VsZWN0ZWRJZDogZnVuY3Rpb24ocGF0aCkge1xyXG5cdFx0XHRcdEV4dGVuc2lvbi5pbml0VmFycygpO1xyXG5cclxuXHRcdFx0XHQvLyBzZXJ2ZXIgc2VsZWN0ZWQgYWxsIHJvd3NcclxuXHRcdFx0XHRpZiAoRXh0ZW5zaW9uLnNlbGVjdGVkQWxsUm93cyAmJiBvcHRpb25zLnZhcnMucmVxdWVzdElkcykge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRwYXRoID0gb3B0aW9ucy52YXJzLnJvd0lkcztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBpZiBzZWxlY3RlZCBhbGwgcm93cywgcmV0dXJuIGlkIGZyb20gcmVzcG9uc2UgbWV0YVxyXG5cdFx0XHRcdFx0dmFyIHNlbGVjdGVkQWxsUm93cyA9IGRhdGF0YWJsZS5nZXRPYmplY3QocGF0aCwgZGF0YXRhYmxlLmxhc3RSZXNwb25zZSkgfHwgW107XHJcblxyXG5cdFx0XHRcdFx0aWYgKHNlbGVjdGVkQWxsUm93cy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdC8vIHJlbW92ZSBzaW5nbGUgdW5zZWxlY3RlZCByb3dzIGZyb20gc2VsZWN0ZWRBbGxSb3dzIGlkcyBmcm9tIHNlcnZlciByZXNwb25zZSBlbXRhXHJcblx0XHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWRBbGxSb3dzID0gRXh0ZW5zaW9uLnJlbW92ZShzZWxlY3RlZEFsbFJvd3MsIHBhcnNlSW50KGlkKSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuICQudW5pcXVlKHNlbGVjdGVkQWxsUm93cyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBlbHNlIHJldHVybiBzaW5nbGUgY2hlY2tlZCBzZWxlY3RlZCByb3dzXHJcblx0XHRcdFx0cmV0dXJuIEV4dGVuc2lvbi5zZWxlY3RlZFJvd3M7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKGFycmF5LCBlbGVtZW50KSB7XHJcblx0XHRcdFx0cmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZSAhPT0gZWxlbWVudDtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gbWFrZSB0aGUgZXh0ZW5zaW9uIGFjY2Vzc2libGUgZnJvbSBkYXRhdGFibGUgaW5pdFxyXG5cdFx0ZGF0YXRhYmxlLmNoZWNrYm94ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBFeHRlbnNpb247XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuW3BsdWdpbk5hbWVdLmNoZWNrYm94LmRlZmF1bHQsIG9wdGlvbnMpO1xyXG5cdFx0XHRFeHRlbnNpb24uaW5pdC5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0fTtcclxuXHJcblx0JC5mbltwbHVnaW5OYW1lXS5jaGVja2JveC5kZWZhdWx0ID0ge1xyXG5cdFx0dmFyczoge1xyXG5cdFx0XHQvLyBzZWxlY3QgYWxsIHJvd3MgZmxhZyB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcclxuXHRcdFx0c2VsZWN0ZWRBbGxSb3dzOiAnc2VsZWN0ZWRBbGxSb3dzJyxcclxuXHRcdFx0Ly8gcmVxdWVzdCBpZCBwYXJhbWV0ZXIncyBuYW1lXHJcblx0XHRcdHJlcXVlc3RJZHM6ICdyZXF1ZXN0SWRzJyxcclxuXHRcdFx0Ly8gcmVzcG9uc2UgcGF0aCB0byBhbGwgcm93cyBpZFxyXG5cdFx0XHRyb3dJZHM6ICdtZXRhLnJvd0lkcycsXHJcblx0XHR9LFxyXG5cdH07XHJcblxyXG59KGpRdWVyeSkpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.checkbox.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.rtl.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.rtl.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var defaults = {\n  layout: {\n    icons: {\n      pagination: {\n        next: 'flaticon2-next',\n        prev: 'flaticon2-back',\n        first: 'flaticon2-fast-back',\n        last: 'flaticon2-fast-next',\n        more: 'flaticon-more-1'\n      },\n      rowDetail: {\n        expand: 'fa fa-caret-down',\n        collapse: 'fa fa-caret-right'\n      }\n    }\n  }\n};\nif (KTUtil.isRTL()) {\n  defaults = {\n    layout: {\n      icons: {\n        pagination: {\n          next: 'flaticon2-back',\n          prev: 'flaticon2-next',\n          first: 'flaticon2-fast-next',\n          last: 'flaticon2-fast-back'\n        },\n        rowDetail: {\n          collapse: 'fa fa-caret-down',\n          expand: 'fa fa-caret-right'\n        }\n      }\n    }\n  };\n}\n$.extend(true, $.fn.KTDatatable.defaults, defaults);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcz9jNWExIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwibGF5b3V0IiwiaWNvbnMiLCJwYWdpbmF0aW9uIiwibmV4dCIsInByZXYiLCJmaXJzdCIsImxhc3QiLCJtb3JlIiwicm93RGV0YWlsIiwiZXhwYW5kIiwiY29sbGFwc2UiLCJLVFV0aWwiLCJpc1JUTCIsIiQiLCJleHRlbmQiLCJmbiIsIktURGF0YXRhYmxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUc7RUFDZEMsTUFBTSxFQUFFO0lBQ1BDLEtBQUssRUFBRTtNQUNOQyxVQUFVLEVBQUU7UUFDWEMsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QkMsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QkMsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QkMsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQkMsSUFBSSxFQUFFO01BQ1AsQ0FBQztNQUNEQyxTQUFTLEVBQUU7UUFBQ0MsTUFBTSxFQUFFLGtCQUFrQjtRQUFFQyxRQUFRLEVBQUU7TUFBbUI7SUFDdEU7RUFDRDtBQUNELENBQUM7QUFFRCxJQUFJQyxNQUFNLENBQUNDLEtBQUssRUFBRSxFQUFFO0VBQ25CYixRQUFRLEdBQUc7SUFDVkMsTUFBTSxFQUFFO01BQ1BDLEtBQUssRUFBRTtRQUNOQyxVQUFVLEVBQUU7VUFDWEMsSUFBSSxFQUFFLGdCQUFnQjtVQUN0QkMsSUFBSSxFQUFFLGdCQUFnQjtVQUN0QkMsS0FBSyxFQUFFLHFCQUFxQjtVQUM1QkMsSUFBSSxFQUFFO1FBQ1AsQ0FBQztRQUNERSxTQUFTLEVBQUU7VUFBQ0UsUUFBUSxFQUFFLGtCQUFrQjtVQUFFRCxNQUFNLEVBQUU7UUFBbUI7TUFDdEU7SUFDRDtFQUNELENBQUM7QUFDRjtBQUVBSSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxJQUFJLEVBQUVELENBQUMsQ0FBQ0UsRUFBRSxDQUFDQyxXQUFXLENBQUNqQixRQUFRLEVBQUVBLFFBQVEsQ0FBQyIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUucnRsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmF1bHRzID0ge1xyXG5cdGxheW91dDoge1xyXG5cdFx0aWNvbnM6IHtcclxuXHRcdFx0cGFnaW5hdGlvbjoge1xyXG5cdFx0XHRcdG5leHQ6ICdmbGF0aWNvbjItbmV4dCcsXHJcblx0XHRcdFx0cHJldjogJ2ZsYXRpY29uMi1iYWNrJyxcclxuXHRcdFx0XHRmaXJzdDogJ2ZsYXRpY29uMi1mYXN0LWJhY2snLFxyXG5cdFx0XHRcdGxhc3Q6ICdmbGF0aWNvbjItZmFzdC1uZXh0JyxcclxuXHRcdFx0XHRtb3JlOiAnZmxhdGljb24tbW9yZS0xJyxcclxuXHRcdFx0fSxcclxuXHRcdFx0cm93RGV0YWlsOiB7ZXhwYW5kOiAnZmEgZmEtY2FyZXQtZG93bicsIGNvbGxhcHNlOiAnZmEgZmEtY2FyZXQtcmlnaHQnfSxcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5pZiAoS1RVdGlsLmlzUlRMKCkpIHtcclxuXHRkZWZhdWx0cyA9IHtcclxuXHRcdGxheW91dDoge1xyXG5cdFx0XHRpY29uczoge1xyXG5cdFx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRcdG5leHQ6ICdmbGF0aWNvbjItYmFjaycsXHJcblx0XHRcdFx0XHRwcmV2OiAnZmxhdGljb24yLW5leHQnLFxyXG5cdFx0XHRcdFx0Zmlyc3Q6ICdmbGF0aWNvbjItZmFzdC1uZXh0JyxcclxuXHRcdFx0XHRcdGxhc3Q6ICdmbGF0aWNvbjItZmFzdC1iYWNrJyxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHJvd0RldGFpbDoge2NvbGxhcHNlOiAnZmEgZmEtY2FyZXQtZG93bicsIGV4cGFuZDogJ2ZhIGZhLWNhcmV0LXJpZ2h0J30sXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbiQuZXh0ZW5kKHRydWUsICQuZm4uS1REYXRhdGFibGUuZGVmYXVsdHMsIGRlZmF1bHRzKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.rtl.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/dialog.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/dialog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition \nvar KTDialog = function KTDialog(options) {\n  // Main object\n  var the = this;\n\n  // Get element object\n  var element;\n  var body = KTUtil.getBody();\n\n  // Default options\n  var defaultOptions = {\n    'placement': 'top center',\n    'type': 'loader',\n    'width': 100,\n    'state': 'default',\n    'message': 'Loading...'\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n\n    construct: function construct(options) {\n      Plugin.init(options);\n      return the;\n    },\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.state = false;\n    },\n    /**\r\n     * Show dialog\r\n     */\n    show: function show() {\n      Plugin.eventTrigger('show');\n      element = document.createElement(\"DIV\");\n      KTUtil.setHTML(element, the.options.message);\n      KTUtil.addClass(element, 'dialog dialog-shown');\n      KTUtil.addClass(element, 'dialog-' + the.options.state);\n      KTUtil.addClass(element, 'dialog-' + the.options.type);\n      if (the.options.placement == 'top center') {\n        KTUtil.addClass(element, 'dialog-top-center');\n      }\n      body.appendChild(element);\n      the.state = 'shown';\n      Plugin.eventTrigger('shown');\n      return the;\n    },\n    /**\r\n     * Hide dialog\r\n     */\n    hide: function hide() {\n      if (element) {\n        Plugin.eventTrigger('hide');\n        element.remove();\n        the.state = 'hidden';\n        Plugin.eventTrigger('hidden');\n      }\n      return the;\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Check shown state\r\n   */\n  the.shown = function () {\n    return the.state == 'shown';\n  };\n\n  /**\r\n   * Check hidden state\r\n   */\n  the.hidden = function () {\n    return the.state == 'hidden';\n  };\n\n  /**\r\n   * Show dialog\r\n   */\n  the.show = function () {\n    return Plugin.show();\n  };\n\n  /**\r\n   * Hide dialog\r\n   */\n  the.hide = function () {\n    return Plugin.hide();\n  };\n\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  // Construct plugin\n  Plugin.construct.apply(the, [options]);\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialog;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/dialog.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/header.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/header.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTHeader = function KTHeader(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (element === undefined) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    offset: {\n      desktop: true,\n      tabletAndMobile: true\n    },\n    releseOnReverse: {\n      desktop: false,\n      tabletAndMobile: false\n    }\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTHeader}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('header')) {\n        the = KTUtil.data(element).get('header');\n      } else {\n        // reset header\n        Plugin.init(options);\n\n        // build header\n        Plugin.build();\n        KTUtil.data(element).set('header', the);\n      }\n      return the;\n    },\n    /**\r\n     * Handles subheader click toggle\r\n     * @returns {KTHeader}\r\n     */\n    init: function init(options) {\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    /**\r\n     * Reset header\r\n     * @returns {KTHeader}\r\n     */\n    build: function build() {\n      var eventTriggerState = true;\n      var lastScrollTop = 0;\n      window.addEventListener('scroll', function () {\n        var offset = 0,\n          st,\n          attrName;\n        if (KTUtil.isBreakpointDown('lg') && the.options.offset.tabletAndMobile === false) {\n          return;\n        }\n        if (KTUtil.isBreakpointUp('lg') && the.options.offset.desktop === false) {\n          return;\n        }\n        if (KTUtil.isBreakpointUp('lg')) {\n          offset = the.options.offset.desktop;\n        } else if (KTUtil.isBreakpointDown('lg')) {\n          offset = the.options.offset.tabletAndMobile;\n        }\n        st = KTUtil.getScrollTop();\n        if (KTUtil.isBreakpointDown('lg') && the.options.releseOnReverse.tabletAndMobile || KTUtil.isBreakpointUp('lg') && the.options.releseOnReverse.desktop) {\n          if (st > offset && lastScrollTop < st) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n          lastScrollTop = st;\n        } else {\n          if (st > offset) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n        }\n      });\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Register event\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n\n  // Run plugin\n  Plugin.construct.apply(the, [options]);\n\n  // Init done\n  init = true;\n\n  // Return plugin instance\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/image-input.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/components/image-input.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition \nvar KTImageInput = function KTImageInput(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    editMode: false\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('imageinput')) {\n        the = KTUtil.data(element).get('imageinput');\n      } else {\n        // reset menu\n        Plugin.init(options);\n\n        // build menu\n        Plugin.build();\n        KTUtil.data(element).set('imageinput', the);\n      }\n      return the;\n    },\n    /**\r\n     * Init avatar\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n      the.input = KTUtil.find(element, 'input[type=\"file\"]');\n      the.wrapper = KTUtil.find(element, '.image-input-wrapper');\n      the.cancel = KTUtil.find(element, '[data-action=\"cancel\"]');\n      the.remove = KTUtil.find(element, '[data-action=\"remove\"]');\n      the.src = KTUtil.css(the.wrapper, 'backgroundImage');\n      the.hidden = KTUtil.find(element, 'input[type=\"hidden\"]');\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    /**\r\n     * Build\r\n     */\n    build: function build() {\n      // Handle change\n      KTUtil.addEvent(the.input, 'change', function (e) {\n        e.preventDefault();\n        if (the.input && the.input.files && the.input.files[0]) {\n          var reader = new FileReader();\n          reader.onload = function (e) {\n            KTUtil.css(the.wrapper, 'background-image', 'url(' + e.target.result + ')');\n          };\n          reader.readAsDataURL(the.input.files[0]);\n          KTUtil.addClass(the.element, 'image-input-changed');\n          KTUtil.removeClass(the.element, 'image-input-empty');\n\n          // Fire change event\n          Plugin.eventTrigger('change');\n        }\n      });\n\n      // Handle cancel\n      KTUtil.addEvent(the.cancel, 'click', function (e) {\n        e.preventDefault();\n\n        // Fire cancel event\n        Plugin.eventTrigger('cancel');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.removeClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', the.src);\n        the.input.value = \"\";\n        if (the.hidden) {\n          the.hidden.value = \"0\";\n        }\n      });\n\n      // Handle remove\n      KTUtil.addEvent(the.remove, 'click', function (e) {\n        e.preventDefault();\n\n        // Fire cancel event\n        Plugin.eventTrigger('remove');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.addClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', \"none\");\n        the.input.value = \"\";\n        if (the.hidden) {\n          the.hidden.value = \"1\";\n        }\n      });\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Attach event\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  // Construct plugin\n  Plugin.construct.apply(the, [options]);\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTImageInput;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/image-input.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/menu.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/menu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTMenu = function KTMenu(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    // scrollable area with Perfect Scroll\n    scroll: {\n      rememberPosition: false\n    },\n    // accordion submenu mode\n    accordion: {\n      slideSpeed: 200,\n      // accordion toggle slide speed in milliseconds\n      autoScroll: false,\n      // enable auto scrolling(focus) to the clicked menu item\n      autoScrollSpeed: 1200,\n      expandAll: true // allow having multiple expanded accordions in the menu\n    },\n\n    // dropdown submenu mode\n    dropdown: {\n      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown\n    }\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTMenu}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('menu')) {\n        the = KTUtil.data(element).get('menu');\n      } else {\n        // reset menu\n        Plugin.init(options);\n\n        // reset menu\n        Plugin.reset();\n\n        // build menu\n        Plugin.build();\n        KTUtil.data(element).set('menu', the);\n      }\n      return the;\n    },\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    init: function init(options) {\n      the.events = [];\n      the.eventHandlers = {};\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n      // pause menu\n      the.pauseDropdownHoverTime = 0;\n      the.uid = KTUtil.getUniqueID();\n    },\n    update: function update(options) {\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n      // pause menu\n      the.pauseDropdownHoverTime = 0;\n\n      // reset menu\n      Plugin.reset();\n      the.eventHandlers = {};\n\n      // build menu\n      Plugin.build();\n      KTUtil.data(element).set('menu', the);\n    },\n    reload: function reload() {\n      // reset menu\n      Plugin.reset();\n\n      // build menu\n      Plugin.build();\n\n      // reset submenu props\n      Plugin.resetSubmenuProps();\n    },\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    build: function build() {\n      // General accordion submenu toggle\n      the.eventHandlers['event_1'] = KTUtil.on(element, '.menu-toggle', 'click', Plugin.handleSubmenuAccordion);\n\n      // Dropdown mode(hoverable)\n      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {\n        // dropdown submenu - hover toggle\n        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);\n        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit);\n\n        // dropdown submenu - click toggle\n        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-menu-toggle=\"click\"] > .menu-toggle, [data-menu-toggle=\"click\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownClick);\n        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-menu-toggle=\"tab\"] > .menu-toggle, [data-menu-toggle=\"tab\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownTabClick);\n      }\n\n      // Handle general link click\n      the.eventHandlers['event_6'] = KTUtil.on(element, '.menu-item > .menu-link:not(.menu-toggle):not(.menu-link-toggle-skip)', 'click', Plugin.handleLinkClick);\n\n      // Init scrollable menu\n      if (the.options.scroll && the.options.scroll.height) {\n        Plugin.scrollInit();\n      }\n    },\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    reset: function reset() {\n      KTUtil.off(element, 'click', the.eventHandlers['event_1']);\n\n      // dropdown submenu - hover toggle\n      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);\n      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']);\n\n      // dropdown submenu - click toggle\n      KTUtil.off(element, 'click', the.eventHandlers['event_4']);\n      KTUtil.off(element, 'click', the.eventHandlers['event_5']);\n\n      // handle link click\n      KTUtil.off(element, 'click', the.eventHandlers['event_6']);\n    },\n    /**\r\n     * Init scroll menu\r\n     *\r\n    */\n    scrollInit: function scrollInit() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollDestroy(element, true);\n        KTUtil.scrollInit(element, {\n          mobileNativeScroll: true,\n          windowScroll: false,\n          resetHeightOnDestroy: true,\n          handleWindowResize: true,\n          height: the.options.scroll.height,\n          rememberPosition: the.options.scroll.rememberPosition\n        });\n      } else {\n        KTUtil.scrollDestroy(element, true);\n      }\n    },\n    /**\r\n     * Update scroll menu\r\n    */\n    scrollUpdate: function scrollUpdate() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollUpdate(element);\n      }\n    },\n    /**\r\n     * Scroll top\r\n    */\n    scrollTop: function scrollTop() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollTop(element);\n      }\n    },\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    getSubmenuMode: function getSubmenuMode(el) {\n      if (KTUtil.isBreakpointUp('lg')) {\n        if (el && KTUtil.hasAttr(el, 'data-menu-toggle') && KTUtil.attr(el, 'data-menu-toggle') == 'hover') {\n          return 'dropdown';\n        }\n        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {\n            return the.options.submenu.desktop.state.mode;\n          } else {\n            return the.options.submenu.desktop[\"default\"];\n          }\n        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {\n          return the.options.submenu.desktop;\n        }\n      } else if (KTUtil.isBreakpointUp('md') && KTUtil.isBreakpointDown('lg') && KTUtil.isset(the.options.submenu, 'tablet')) {\n        return the.options.submenu.tablet;\n      } else if (KTUtil.isBreakpointDown('md') && KTUtil.isset(the.options.submenu, 'mobile')) {\n        return the.options.submenu.mobile;\n      } else {\n        return false;\n      }\n    },\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {\n      if (KTUtil.isBreakpointUp('lg') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /**\r\n     * Reset submenu attributes\r\n     * @returns {KTMenu}\r\n     */\n    resetSubmenuProps: function resetSubmenuProps(e) {\n      var submenus = KTUtil.findAll(element, '.menu-submenu');\n      if (submenus) {\n        for (var i = 0, len = submenus.length; i < len; i++) {\n          var submenu = submenus[0];\n          KTUtil.css(submenu, 'display', '');\n          KTUtil.css(submenu, 'overflow', '');\n          if (submenu.hasAttribute('data-hor-direction')) {\n            KTUtil.removeClass(submenu, 'menu-submenu-left');\n            KTUtil.removeClass(submenu, 'menu-submenu-right');\n            KTUtil.addClass(submenu, submenu.getAttribute('data-hor-direction'));\n          }\n        }\n      }\n    },\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n      var item = this;\n      if (item.getAttribute('data-hover') == '1') {\n        item.removeAttribute('data-hover');\n        clearTimeout(item.getAttribute('data-timeout'));\n        item.removeAttribute('data-timeout');\n      }\n      Plugin.showSubmenuDropdown(item);\n    },\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n      var item = this;\n      var time = the.options.dropdown.timeout;\n      var timeout = setTimeout(function () {\n        if (item.getAttribute('data-hover') == '1') {\n          Plugin.hideSubmenuDropdown(item, true);\n        }\n      }, time);\n      item.setAttribute('data-hover', '1');\n      item.setAttribute('data-timeout', timeout);\n    },\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n      var item = this.closest('.menu-item');\n\n      // Trigger click event handlers\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n      if (result === false) {\n        return;\n      }\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n      if (KTUtil.hasClass(item, 'menu-item-hover') === false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      } else {\n        KTUtil.removeClass(item, 'menu-item-open-dropdown');\n        Plugin.hideSubmenuDropdown(item, true);\n      }\n      e.preventDefault();\n    },\n    /**\r\n     * Handles tab click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n      var item = this.closest('.menu-item');\n\n      // Trigger click event handlers\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n      if (result === false) {\n        return;\n      }\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n      if (KTUtil.hasClass(item, 'menu-item-hover') == false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      }\n      e.preventDefault();\n    },\n    /**\r\n     * Handles link click\r\n     * @returns {KTMenu}\r\n     */\n    handleLinkClick: function handleLinkClick(e) {\n      var submenu = this.closest('.menu-item.menu-item-submenu');\n\n      // Trigger click event handlers\n      var result = Plugin.eventTrigger('linkClick', this, e);\n      if (result === false) {\n        return;\n      }\n      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {\n        Plugin.hideSubmenuDropdowns();\n      }\n    },\n    /**\r\n     * Handles submenu dropdown close on link click\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {\n      // exit if its not submenu dropdown mode\n      if (Plugin.getSubmenuMode(el) === 'accordion') {\n        return;\n      }\n      var shown = element.querySelectorAll('.menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)');\n\n      // check if currently clicked link's parent item ha\n      if (shown.length > 0 && KTUtil.hasClass(el, 'menu-toggle') === false && el.querySelectorAll('.menu-toggle').length === 0) {\n        // close opened dropdown menus\n        for (var i = 0, len = shown.length; i < len; i++) {\n          Plugin.hideSubmenuDropdown(shown[0], true);\n        }\n      }\n    },\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {\n      var query;\n      var item = el ? el : this;\n\n      // Trigger click event handlers\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n      if (result === false) {\n        return;\n      }\n      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.menu-item'))) {\n        if (query.getAttribute('data-menu-submenu-mode') != 'accordion') {\n          e.preventDefault();\n          return;\n        }\n      }\n      var li = item.closest('.menu-item');\n      var submenu = KTUtil.child(li, '.menu-submenu, .menu-inner');\n      if (KTUtil.hasClass(item.closest('.menu-item'), 'menu-item-open-always')) {\n        return;\n      }\n      if (li && submenu) {\n        e.preventDefault();\n        var speed = the.options.accordion.slideSpeed;\n        var hasClosables = false;\n        if (KTUtil.hasClass(li, 'menu-item-open') === false) {\n          // hide other accordions\n          if (the.options.accordion.expandAll === false) {\n            var subnav = item.closest('.menu-nav, .menu-subnav');\n            var closables = KTUtil.children(subnav, '.menu-item.menu-item-open.menu-item-submenu:not(.menu-item-here):not(.menu-item-open-always)');\n            if (subnav && closables) {\n              for (var i = 0, len = closables.length; i < len; i++) {\n                var el_ = closables[0];\n                var submenu_ = KTUtil.child(el_, '.menu-submenu');\n                if (submenu_) {\n                  KTUtil.slideUp(submenu_, speed, function () {\n                    Plugin.scrollUpdate();\n                    KTUtil.removeClass(el_, 'menu-item-open');\n                  });\n                }\n              }\n            }\n          }\n          KTUtil.slideDown(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.addClass(li, 'menu-item-open');\n        } else {\n          KTUtil.slideUp(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.removeClass(li, 'menu-item-open');\n        }\n      }\n    },\n    /**\r\n     * scroll to item function\r\n     * @returns {KTMenu}\r\n     */\n    scrollToItem: function scrollToItem(item) {\n      // handle auto scroll for accordion submenus\n      if (KTUtil.isBreakpointUp('lg') && the.options.accordion.autoScroll && element.getAttribute('data-menu-scroll') !== '1') {\n        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);\n      }\n    },\n    /**\r\n     * Hide submenu dropdown\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {\n      // remove submenu activation class\n      if (classAlso) {\n        KTUtil.removeClass(item, 'menu-item-hover');\n        KTUtil.removeClass(item, 'menu-item-active-tab');\n      }\n\n      // clear timeout\n      item.removeAttribute('data-hover');\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.removeClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n      var timeout = item.getAttribute('data-timeout');\n      item.removeAttribute('data-timeout');\n      clearTimeout(timeout);\n    },\n    /**\r\n     * Hide submenu dropdowns\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdowns: function hideSubmenuDropdowns() {\n      var items;\n      if (items = element.querySelectorAll('.menu-item-submenu.menu-item-hover:not(.menu-item-tabs):not([data-menu-toggle=\"tab\"])')) {\n        for (var j = 0, cnt = items.length; j < cnt; j++) {\n          Plugin.hideSubmenuDropdown(items[j], true);\n        }\n      }\n    },\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    showSubmenuDropdown: function showSubmenuDropdown(item) {\n      // close active submenus\n      var list = element.querySelectorAll('.menu-item-submenu.menu-item-hover, .menu-item-submenu.menu-item-active-tab');\n      if (list) {\n        for (var i = 0, len = list.length; i < len; i++) {\n          var el = list[i];\n          if (item !== el && el.contains(item) === false && item.contains(el) === false) {\n            Plugin.hideSubmenuDropdown(el, true);\n          }\n        }\n      }\n\n      // add submenu activation class\n      KTUtil.addClass(item, 'menu-item-hover');\n\n      // Change the alignment of submenu is offscreen.\n      var submenu = KTUtil.find(item, '.menu-submenu');\n      if (submenu && submenu.hasAttribute('data-hor-direction') === false) {\n        if (KTUtil.hasClass(submenu, 'menu-submenu-left')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-left');\n        } else if (KTUtil.hasClass(submenu, 'menu-submenu-right')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-right');\n        }\n      }\n      if (submenu && KTUtil.isOffscreen(submenu, 'left', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-left');\n        KTUtil.addClass(submenu, 'menu-submenu-right');\n      } else if (submenu && KTUtil.isOffscreen(submenu, 'right', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-right');\n        KTUtil.addClass(submenu, 'menu-submenu-left');\n      }\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.addClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n    },\n    /**\r\n     * Handles submenu slide toggle\r\n     * @returns {KTMenu}\r\n     */\n    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {\n      var query;\n      var zIndex = (query = KTUtil.child(el, '.menu-submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;\n      var dropoff = document.createElement('<div class=\"menu-dropoff\" style=\"background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '\"></div>');\n      body.appendChild(dropoff);\n      KTUtil.addEvent(dropoff, 'click', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        KTUtil.remove(this);\n        Plugin.hideSubmenuDropdown(el, true);\n      });\n    },\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      var date = new Date();\n      the.pauseDropdownHoverTime = date.getTime() + time;\n    },\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    resumeDropdownHover: function resumeDropdownHover() {\n      var date = new Date();\n      return date.getTime() > the.pauseDropdownHoverTime ? true : false;\n    },\n    /**\r\n     * Reset menu's current active item\r\n     * @returns {KTMenu}\r\n     */\n    resetActiveItem: function resetActiveItem(item) {\n      var list;\n      var parents;\n      list = element.querySelectorAll('.menu-item-active');\n      for (var i = 0, len = list.length; i < len; i++) {\n        var el = list[0];\n        KTUtil.removeClass(el, 'menu-item-active');\n        KTUtil.hide(KTUtil.child(el, '.menu-submenu'));\n        parents = KTUtil.parents(el, '.menu-item-submenu') || [];\n        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {\n          var el_ = parents[i];\n          KTUtil.removeClass(el_, 'menu-item-open');\n          KTUtil.hide(KTUtil.child(el_, '.menu-submenu'));\n        }\n      }\n\n      // close open submenus\n      if (the.options.accordion.expandAll === false) {\n        if (list = element.querySelectorAll('.menu-item-open')) {\n          for (var i = 0, len = list.length; i < len; i++) {\n            KTUtil.removeClass(parents[0], 'menu-item-open');\n          }\n        }\n      }\n    },\n    /**\r\n     * Sets menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    setActiveItem: function setActiveItem(item) {\n      // reset current active item\n      Plugin.resetActiveItem();\n      var parents = KTUtil.parents(item, '.menu-item-submenu') || [];\n      for (var i = 0, len = parents.length; i < len; i++) {\n        KTUtil.addClass(parents[i], 'menu-item-open');\n      }\n      KTUtil.addClass(item, 'menu-item-active');\n    },\n    /**\r\n     * Returns page breadcrumbs for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getBreadcrumbs: function getBreadcrumbs(item) {\n      var query;\n      var breadcrumbs = [];\n      var link = KTUtil.child(item, '.menu-link');\n      breadcrumbs.push({\n        text: query = KTUtil.child(link, '.menu-text') ? query.innerHTML : '',\n        title: link.getAttribute('title'),\n        href: link.getAttribute('href')\n      });\n      var parents = KTUtil.parents(item, '.menu-item-submenu');\n      for (var i = 0, len = parents.length; i < len; i++) {\n        var submenuLink = KTUtil.child(parents[i], '.menu-link');\n        breadcrumbs.push({\n          text: query = KTUtil.child(submenuLink, '.menu-text') ? query.innerHTML : '',\n          title: submenuLink.getAttribute('title'),\n          href: submenuLink.getAttribute('href')\n        });\n      }\n      return breadcrumbs.reverse();\n    },\n    /**\r\n     * Returns page title for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getPageTitle: function getPageTitle(item) {\n      var query;\n      return query = KTUtil.child(item, '.menu-text') ? query.innerHTML : '';\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, target, e) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, target, e);\n            }\n          } else {\n            return event.handler.call(this, target, e);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    },\n    removeEvent: function removeEvent(name) {\n      if (the.events[name]) {\n        delete the.events[name];\n      }\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Update scroll\r\n   */\n  the.scrollUpdate = function () {\n    return Plugin.scrollUpdate();\n  };\n\n  /**\r\n   * Re-init scroll\r\n   */\n  the.scrollReInit = function () {\n    return Plugin.scrollInit();\n  };\n\n  /**\r\n   * Scroll top\r\n   */\n  the.scrollTop = function () {\n    return Plugin.scrollTop();\n  };\n\n  /**\r\n   * Set active menu item\r\n   */\n  the.setActiveItem = function (item) {\n    return Plugin.setActiveItem(item);\n  };\n  the.reload = function () {\n    return Plugin.reload();\n  };\n  the.update = function (options) {\n    return Plugin.update(options);\n  };\n\n  /**\r\n   * Set breadcrumb for menu item\r\n   */\n  the.getBreadcrumbs = function (item) {\n    return Plugin.getBreadcrumbs(item);\n  };\n\n  /**\r\n   * Set page title for menu item\r\n   */\n  the.getPageTitle = function (item) {\n    return Plugin.getPageTitle(item);\n  };\n\n  /**\r\n   * Get submenu mode\r\n   */\n  the.getSubmenuMode = function (el) {\n    return Plugin.getSubmenuMode(el);\n  };\n\n  /**\r\n   * Hide dropdown\r\n   * @returns {Object}\r\n   */\n  the.hideDropdown = function (item) {\n    Plugin.hideSubmenuDropdown(item, true);\n  };\n\n  /**\r\n   * Hide dropdowns\r\n   * @returns {Object}\r\n   */\n  the.hideDropdowns = function () {\n    Plugin.hideSubmenuDropdowns();\n  };\n\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n  the.pauseDropdownHover = function (time) {\n    Plugin.pauseDropdownHover(time);\n  };\n\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n  the.resumeDropdownHover = function () {\n    return Plugin.resumeDropdownHover();\n  };\n\n  /**\r\n   * Register event\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  the.off = function (name) {\n    return Plugin.removeEvent(name);\n  };\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n\n  // Run plugin\n  Plugin.construct.apply(the, [options]);\n\n  // Handle plugin on window resize\n  KTUtil.addResizeHandler(function () {\n    if (init) {\n      the.reload();\n    }\n  });\n\n  // Init done\n  init = true;\n\n  // Return plugin instance\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n}\n\n// Plugin global lazy initialization\ndocument.addEventListener(\"click\", function (e) {\n  var body = KTUtil.getByTagName('body')[0];\n  var query;\n  if (query = body.querySelectorAll('.menu-nav .menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)[data-menu-toggle=\"click\"]')) {\n    for (var i = 0, len = query.length; i < len; i++) {\n      var element = query[i].closest('.menu-nav').parentNode;\n      if (element) {\n        var the = KTUtil.data(element).get('menu');\n        if (!the) {\n          break;\n        }\n        if (!the || the.getSubmenuMode() !== 'dropdown') {\n          break;\n        }\n        if (e.target !== element && element.contains(e.target) === false) {\n          the.hideDropdowns();\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/offcanvas.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/offcanvas.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTOffcanvas = function KTOffcanvas(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    attrCustom: ''\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('offcanvas')) {\n        the = KTUtil.data(element).get('offcanvas');\n      } else {\n        // Reset offcanvas\n        Plugin.init(options);\n\n        // Build offcanvas\n        Plugin.build();\n        KTUtil.data(element).set('offcanvas', the);\n      }\n      return the;\n    },\n    init: function init(options) {\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.classBase = the.options.baseClass;\n      the.attrCustom = the.options.attrCustom;\n      the.classShown = the.classBase + '-on';\n      the.classOverlay = the.classBase + '-overlay';\n      the.target;\n      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';\n    },\n    build: function build() {\n      // offcanvas toggle\n      if (the.options.toggleBy) {\n        if (typeof the.options.toggleBy === 'string') {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        } else if (the.options.toggleBy && the.options.toggleBy[0]) {\n          if (the.options.toggleBy[0].target) {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i].target), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          } else {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i]), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          }\n        } else if (the.options.toggleBy && the.options.toggleBy.target) {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy.target), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        }\n      }\n\n      // offcanvas close\n      var closeBy = KTUtil.getById(the.options.closeBy);\n      if (closeBy) {\n        KTUtil.addEvent(closeBy, 'click', function (e) {\n          e.preventDefault();\n          the.target = this;\n          Plugin.hide();\n        });\n      }\n    },\n    isShown: function isShown() {\n      return the.state == 'shown' ? true : false;\n    },\n    toggle: function toggle() {\n      ;\n      Plugin.eventTrigger('toggle');\n      if (the.state == 'shown') {\n        Plugin.hide();\n      } else {\n        Plugin.show();\n      }\n    },\n    show: function show() {\n      if (the.state == 'shown') {\n        return;\n      }\n      Plugin.eventTrigger('beforeShow');\n      Plugin.toggleClass('show');\n\n      // Offcanvas panel\n      KTUtil.attr(body, 'data-offcanvas-' + the.classBase, 'on');\n      KTUtil.addClass(element, the.classShown);\n      if (the.attrCustom.length > 0) {\n        KTUtil.attr(body, 'data-offcanvas-' + the.classCustom, 'on');\n        //KTUtil.addClass(body, the.classCustom);\n      }\n\n      the.state = 'shown';\n      if (the.options.overlay) {\n        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);\n        KTUtil.addClass(the.overlay, the.classOverlay);\n        KTUtil.addEvent(the.overlay, 'click', function (e) {\n          //e.stopPropagation();\n          e.preventDefault();\n          Plugin.hide(the.target);\n        });\n      }\n      Plugin.eventTrigger('afterShow');\n    },\n    hide: function hide() {\n      if (the.state == 'hidden') {\n        return;\n      }\n      Plugin.eventTrigger('beforeHide');\n      Plugin.toggleClass('hide');\n      KTUtil.removeAttr(body, 'data-offcanvas-' + the.classBase);\n      KTUtil.removeClass(element, the.classShown);\n      if (the.attrCustom.length > 0) {\n        KTUtil.removeAttr(body, 'data-offcanvas-' + the.attrCustom);\n      }\n      the.state = 'hidden';\n      if (the.options.overlay && the.overlay) {\n        KTUtil.remove(the.overlay);\n      }\n      Plugin.eventTrigger('afterHide');\n    },\n    toggleClass: function toggleClass(mode) {\n      var id = KTUtil.attr(the.target, 'id');\n      var toggleBy;\n      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {\n        for (var i in the.options.toggleBy) {\n          if (the.options.toggleBy[i].target === id) {\n            toggleBy = the.options.toggleBy[i];\n          }\n        }\n      } else if (the.options.toggleBy && the.options.toggleBy.target) {\n        toggleBy = the.options.toggleBy;\n      }\n      if (toggleBy) {\n        var el = KTUtil.getById(toggleBy.target);\n        if (mode === 'show') {\n          KTUtil.addClass(el, toggleBy.state);\n        }\n        if (mode === 'hide') {\n          KTUtil.removeClass(el, toggleBy.state);\n        }\n      }\n    },\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   * @param options\r\n   */\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Check if canvas is shown\r\n   * @returns {boolean}\r\n   */\n  the.isShown = function () {\n    return Plugin.isShown();\n  };\n\n  /**\r\n   * Set to hide the canvas\r\n   */\n  the.hide = function () {\n    return Plugin.hide();\n  };\n\n  /**\r\n   * Set to show the canvas\r\n   */\n  the.show = function () {\n    return Plugin.show();\n  };\n\n  /**\r\n   * Attach event\r\n   * @param name\r\n   * @param handler\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   * @param name\r\n   * @param handler\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n\n  // Run plugin\n  Plugin.construct.apply(the, [options]);\n\n  // Init done\n  init = true;\n\n  // Return plugin instance\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTOffcanvas;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/offcanvas.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/scrolltop.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/scrolltop.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTScrolltop = function KTScrolltop(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    offset: 300,\n    speed: 6000\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {mscrolltop}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('scrolltop')) {\n        the = KTUtil.data(element).get('scrolltop');\n      } else {\n        // reset scrolltop\n        Plugin.init(options);\n\n        // build scrolltop\n        Plugin.build();\n        KTUtil.data(element).set('scrolltop', the);\n      }\n      return the;\n    },\n    /**\r\n     * Handles subscrolltop click toggle\r\n     * @returns {mscrolltop}\r\n     */\n    init: function init(options) {\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    build: function build() {\n      var timer;\n      window.addEventListener('scroll', function () {\n        KTUtil.throttle(timer, function () {\n          Plugin.handle();\n        }, 200);\n      });\n\n      // handle button click\n      KTUtil.addEvent(element, 'click', Plugin.scroll);\n    },\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    handle: function handle() {\n      var pos = KTUtil.getScrollTop(); // current vertical position\n\n      if (pos > the.options.offset) {\n        if (body.hasAttribute('data-scrolltop') === false) {\n          body.setAttribute('data-scrolltop', 'on');\n        }\n      } else {\n        if (body.hasAttribute('data-scrolltop') === true) {\n          body.removeAttribute('data-scrolltop');\n        }\n      }\n    },\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    scroll: function scroll(e) {\n      e.preventDefault();\n      KTUtil.scrollTop(0, the.options.speed);\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Get subscrolltop mode\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Set scrolltop content\r\n   * @returns {mscrolltop}\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n\n  // Run plugin\n  Plugin.construct.apply(the, [options]);\n\n  // Init done\n  init = true;\n\n  // Return plugin instance\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/toggle.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/toggle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTToggle = function KTToggle(toggleElement, targetElement, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = toggleElement;\n  var target = targetElement;\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    targetToggleMode: 'class' // class|attribute\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('toggle')) {\n        the = KTUtil.data(element).get('toggle');\n      } else {\n        // reset menu\n        Plugin.init(options);\n\n        // build menu\n        Plugin.build();\n        KTUtil.data(element).set('toggle', the);\n      }\n      return the;\n    },\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n\n      // Merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n      //alert(the.options.target.tagName);\n      the.target = target;\n      the.targetState = the.options.targetState;\n      the.toggleState = the.options.toggleState;\n      if (the.options.targetToggleMode == 'class') {\n        the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';\n      } else {\n        the.state = KTUtil.hasAttr(the.target, 'data-' + the.targetState) ? KTUtil.attr(the.target, 'data-' + the.targetState) : 'off';\n      }\n    },\n    /**\r\n     * Setup toggle\r\n     */\n    build: function build() {\n      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);\n    },\n    /**\r\n     * Handles offcanvas click toggle\r\n     */\n    toggle: function toggle(e) {\n      Plugin.eventTrigger('beforeToggle');\n      if (the.state == 'off') {\n        Plugin.toggleOn();\n      } else {\n        Plugin.toggleOff();\n      }\n      Plugin.eventTrigger('afterToggle');\n      e.preventDefault();\n      return the;\n    },\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOn: function toggleOn() {\n      Plugin.eventTrigger('beforeOn');\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.addClass(the.target, the.targetState);\n      } else {\n        KTUtil.attr(the.target, 'data-' + the.targetState, 'on');\n      }\n      if (the.toggleState) {\n        KTUtil.addClass(element, the.toggleState);\n      }\n      the.state = 'on';\n      Plugin.eventTrigger('afterOn');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOff: function toggleOff() {\n      Plugin.eventTrigger('beforeOff');\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.removeClass(the.target, the.targetState);\n      } else {\n        KTUtil.removeAttr(the.target, 'data-' + the.targetState);\n      }\n      if (the.toggleState) {\n        KTUtil.removeClass(element, the.toggleState);\n      }\n      the.state = 'off';\n      Plugin.eventTrigger('afterOff');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Get toggle state\r\n   */\n  the.getState = function () {\n    return the.state;\n  };\n\n  /**\r\n   * Toggle\r\n   */\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n\n  /**\r\n   * Toggle on\r\n   */\n  the.toggleOn = function () {\n    return Plugin.toggleOn();\n  };\n\n  /**\r\n   * Toggle off\r\n   */\n  the.toggleOff = function () {\n    return Plugin.toggleOff();\n  };\n\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  // Construct plugin\n  Plugin.construct.apply(the, [options]);\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/util.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/util.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n * @class KTUtil  base utilize class that privides helper functions\r\n */\n\n// Polyfills\n/**\r\n * Element.matches() polyfill (simple version)\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n */\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\n/**\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n\n/**\r\n * ChildNode.remove() polyfill\r\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']);\n\n//\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})();\n\n// Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n// getAttributeNames\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n    return result;\n  };\n}\n\n// Global variables\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\nvar KTUtil = function () {\n  var resizeHandlers = [];\n\n  /** @type {object} breakpoints The device width breakpoints **/\n  var breakpoints = {\n    sm: 544,\n    // Small screen / phone\n    md: 768,\n    // Medium screen / tablet\n    lg: 992,\n    // Large screen / desktop\n    xl: 1200 // Extra large screen / wide desktop\n  };\n\n  /**\r\n   * Handle window resize event with some\r\n   * delay to attach event handlers upon resize complete\r\n   */\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n  return {\n    /**\r\n     * Class main initializer.\r\n     * @param {object} settings.\r\n     * @returns null\r\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      if (settings && settings.breakpoints) {\n        breakpoints = settings.breakpoints;\n      }\n      _windowResizeHandler();\n    },\n    /**\r\n     * Adds window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n    /**\r\n     * Removes window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n    /**\r\n     * Trigger window resize handlers.\r\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n    /**\r\n     * Get GET parameter value from URL.\r\n     * @param {string} paramName Parameter name.\r\n     * @returns {string}\r\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n        i,\n        val,\n        params = searchString.split(\"&\");\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n      return null;\n    },\n    /**\r\n     * Checks whether current device is mobile touch.\r\n     * @returns {boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n      return test;\n    },\n    /**\r\n     * Checks whether current device is desktop.\r\n     * @returns {boolean}\r\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n    /**\r\n     * Gets browser window viewport size. Ref:\r\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\r\n     * @returns {object}\r\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n        a = 'inner';\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n    /**\r\n     * Checks whether given device mode is currently activated.\r\n     * @param {string} mode Responsive mode name(e.g: desktop,\r\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n     * @returns {boolean}\r\n     */\n    isInResponsiveRange: function isInResponsiveRange(mode) {\n      var breakpoint = this.getViewPort().width;\n      if (mode == 'general') {\n        return true;\n      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {\n        return true;\n      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n        return true;\n      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {\n        return true;\n      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n        return true;\n      }\n      return false;\n    },\n    /**\r\n           * Checks whether given device mode is currently activated.\r\n           * @param {string} mode Responsive mode name(e.g: desktop,\r\n           *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n           * @returns {boolean}\r\n           */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n    /**\r\n     * Generates unique ID for give prefix.\r\n     * @param {string} prefix Prefix for generated ID\r\n     * @returns {boolean}\r\n     */\n    getUniqueID: function getUniqueID(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n    /**\r\n     * Gets window width for give breakpoint mode.\r\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\r\n     * @returns {number}\r\n     */\n    getBreakpoint: function getBreakpoint(mode) {\n      return breakpoints[mode];\n    },\n    /**\r\n     * Checks whether object has property matchs given key path.\r\n     * @param {object} obj Object contains values paired with given key path\r\n     * @param {string} keys Keys path seperated with dots\r\n     * @returns {object}\r\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n      keys = keys.split('.');\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n        stone = keys.shift();\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n        obj = obj[stone];\n      } while (keys.length);\n      return true;\n    },\n    /**\r\n     * Gets highest z-index of the given element parents\r\n     * @param {object} el jQuery element object\r\n     * @returns {number}\r\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n        el = el.parentNode;\n      }\n      return null;\n    },\n    /**\r\n     * Checks whether the element has any parent with fixed positionfreg\r\n     * @param {object} el jQuery element object\r\n     * @returns {boolean}\r\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n        if (position === \"fixed\") {\n          return true;\n        }\n        el = el.parentNode;\n      }\n      return false;\n    },\n    /**\r\n     * Simulates delay\r\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n    /**\r\n     * Gets randomly generated integer value within given min and max range\r\n     * @param {number} min Range start value\r\n     * @param {number} max Range end value\r\n     * @returns {number}\r\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    /**\r\n     * Checks whether Angular library is included\r\n     * @returns {boolean}\r\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // jQuery Workarounds\n\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            if (_typeof(obj[key]) === 'object') out[key] = KTUtil.deepExtend(out[key], obj[key]);else out[key] = obj[key];\n          }\n        }\n      }\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n      return out;\n    },\n    getById: function getById(el) {\n      if (typeof el === 'string') {\n        return document.getElementById(el);\n      } else {\n        return el;\n      }\n    },\n    getByTag: function getByTag(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByTagName: function getByTagName(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByClass: function getByClass(query) {\n      return document.getElementsByClassName(query);\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n    /**\r\n     * Checks whether the element has given classes\r\n     * @param {object} el jQuery element object\r\n     * @param {string} Classes string\r\n     * @returns {boolean}\r\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n      var classesArr = classes.split(\" \");\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n      var classNames = className.split(' ');\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n      var classNames = className.split(' ');\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\";\n\n        // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n        i = 0;\n      for (; i < c.length; i++) if (c[i] == el) return i;\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      parent = KTUtil.getById(parent);\n      if (parent) {\n        return parent.querySelector(query);\n      }\n    },\n    findAll: function findAll(parent, query) {\n      parent = KTUtil.getById(parent);\n      if (parent) {\n        return parent.querySelectorAll(query);\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Element.matches() polyfill\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n          while (--i >= 0 && matches.item(i) !== this) {}\n          return i > -1;\n        };\n      }\n\n      // Set up a parent array\n      var parents = [];\n\n      // Push each parent element to the array\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n          continue;\n        }\n        parents.push(elem);\n      }\n\n      // Return our parent array\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return;\n      }\n      var result = [],\n        i = 0,\n        l = el.childNodes.length;\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n      if (!el) {\n        return;\n      }\n\n      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\r\n       * TinyAnimate.easings\r\n       *  Adapted from jQuery Easing\r\n       */\n      var easings = {};\n      var easing;\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n      easing = easings.linear;\n\n      // Early bail out if called incorrectly\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      }\n\n      // Create mock done() function if necessary\n      if (typeof done !== 'function') {\n        done = function done() {};\n      }\n\n      // Pick implementation (requestAnimationFrame | setTimeout)\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      };\n\n      // Animation loop\n      var canceled = false;\n      var change = to - from;\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n      update(from);\n\n      // Start animation loop\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value;\n\n        // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n        el.style.cssText = css;\n\n        // store it in cache\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value) {\n      if (!el) {\n        return;\n      }\n      if (value !== undefined) {\n        el.style[styleProp] = value;\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView;\n        // W3C standard way:\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp];\n          // convert other units to pixels on IE\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (!selector) {\n        return;\n      }\n      var eventId = KTUtil.getUniqueID('event');\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n          target = target.parentNode;\n        }\n      };\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        }\n\n        // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        }\n\n        // call handler\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n        i,\n        chr;\n      if (str.length === 0) return hash;\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n      KTUtil.addClass(el, 'animated ' + animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, 'animated ' + animationName);\n      });\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n      if (offset) {\n        scrollPos += offset;\n      }\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n        callback();\n      } else {\n        document.addEventListener('DOMContentLoaded', callback);\n      }\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n      return x1 + x2;\n    },\n    detectIE: function detectIE() {\n      var ua = window.navigator.userAgent;\n\n      // Test values; Uncomment to check result …\n\n      // IE 10\n      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n      // IE 11\n      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n      // Edge 12 (Spartan)\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n      // Edge 13\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n      var msie = ua.indexOf('MSIE ');\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n      var trident = ua.indexOf('Trident/');\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n      var edge = ua.indexOf('Edge/');\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      }\n\n      // other browser\n      return false;\n    },\n    isRTL: function isRTL() {\n      var html = KTUtil.getByTagName('html')[0];\n      if (html) {\n        return KTUtil.attr(html, 'direction') == 'rtl';\n      }\n    },\n    // Scroller\n    scrollInit: function scrollInit(element, options) {\n      if (!element) {\n        return;\n      }\n\n      // Learn more: https://github.com/mdbootstrap/perfect-scrollbar#options\n      var pluginDefOptions = {\n        wheelSpeed: 0.5,\n        swipeEasing: true,\n        wheelPropagation: false,\n        minScrollbarLength: 40,\n        maxScrollbarLength: 300,\n        suppressScrollX: true\n      };\n      options = KTUtil.deepExtend({}, pluginDefOptions, options);\n\n      // Define init function\n      function init() {\n        var ps;\n        var height;\n\n        // Get extra options via data attributes\n        var attrs = element.getAttributeNames();\n        if (attrs.length > 0) {\n          attrs.forEach(function (attrName) {\n            // more options; https://github.com/ganlanyuan/tiny-slider#options\n            if (/^data-.*/g.test(attrName)) {\n              if (['scroll', 'height', 'mobile-height'].includes(optionName) == false) {\n                var optionName = attrName.replace('data-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n                  return match.replace('-', '').toUpperCase();\n                });\n                options[optionName] = KTUtil.filterBoolean(element.getAttribute(attrName));\n              }\n            }\n          });\n        }\n        if (options.height instanceof Function) {\n          height = options.height.call();\n        } else {\n          if (KTUtil.isMobileDevice() === true && options.mobileHeight) {\n            height = parseInt(options.mobileHeight);\n          } else if (options.height) {\n            height = parseInt(options.height);\n          } else {\n            height = parseInt(KTUtil.css(element, 'height'));\n          }\n        }\n        if (height === false) {\n          KTUtil.scrollDestroy(element, true);\n          return;\n        }\n        height = parseInt(height);\n\n        // Destroy scroll on table and mobile modes\n        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isMobileDevice() === true) {\n          ps = KTUtil.data(element).get('ps');\n          if (ps) {\n            if (options.resetHeightOnDestroy) {\n              KTUtil.css(element, 'height', 'auto');\n            } else {\n              KTUtil.css(element, 'overflow', 'auto');\n              if (height > 0) {\n                KTUtil.css(element, 'height', height + 'px');\n              }\n            }\n            ps.destroy();\n            ps = KTUtil.data(element).remove('ps');\n          } else if (height > 0) {\n            KTUtil.css(element, 'overflow', 'auto');\n            KTUtil.css(element, 'height', height + 'px');\n          }\n          return;\n        }\n        if (height > 0) {\n          KTUtil.css(element, 'height', height + 'px');\n        }\n        if (options.desktopNativeScroll) {\n          KTUtil.css(element, 'overflow', 'auto');\n          return;\n        }\n\n        // Pass options via HTML Attributes\n        if (KTUtil.attr(element, 'data-window-scroll') == 'true') {\n          options.windowScroll = true;\n        }\n\n        // Init scroll\n        ps = KTUtil.data(element).get('ps');\n        if (ps) {\n          ps.update();\n        } else {\n          KTUtil.css(element, 'overflow', 'hidden');\n          KTUtil.addClass(element, 'scroll');\n          ps = new PerfectScrollbar(element, options);\n          KTUtil.data(element).set('ps', ps);\n        }\n\n        // Remember scroll position in cookie\n        var uid = KTUtil.attr(element, 'id');\n\n        // Todo:Consider using Localstorage\n        if (options.rememberPosition === true && KTCookie && uid) {\n          if (KTCookie.getCookie(uid)) {\n            var pos = parseInt(KTCookie.getCookie(uid));\n            if (pos > 0) {\n              element.scrollTop = pos;\n            }\n          }\n          element.addEventListener('ps-scroll-y', function () {\n            KTCookie.setCookie(uid, element.scrollTop);\n          });\n        }\n      }\n\n      // Init\n      init();\n\n      // Handle window resize\n      if (options.handleWindowResize) {\n        KTUtil.addResizeHandler(function () {\n          init();\n        });\n      }\n    },\n    scrollUpdate: function scrollUpdate(element) {\n      var ps = KTUtil.data(element).get('ps');\n      if (ps) {\n        ps.update();\n      }\n    },\n    scrollUpdateAll: function scrollUpdateAll(parent) {\n      var scrollers = KTUtil.findAll(parent, '.ps');\n      for (var i = 0, len = scrollers.length; i < len; i++) {\n        KTUtil.scrollUpdate(scrollers[i]);\n      }\n    },\n    scrollDestroy: function scrollDestroy(element, resetAll) {\n      var ps = KTUtil.data(element).get('ps');\n      if (ps) {\n        ps.destroy();\n        ps = KTUtil.data(element).remove('ps');\n      }\n      if (element && resetAll) {\n        element.style.setProperty('overflow', '');\n        element.style.setProperty('height', '');\n      }\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n      if (val === false || val === 'false') {\n        return false;\n      }\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    changeColor: function changeColor(col, amt) {\n      var usePound = false;\n      if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n      }\n      var num = parseInt(col, 16);\n      var r = (num >> 16) + amt;\n      if (r > 255) r = 255;else if (r < 0) r = 0;\n      var b = (num >> 8 & 0x00FF) + amt;\n      if (b > 255) b = 255;else if (b < 0) b = 0;\n      var g = (num & 0x0000FF) + amt;\n      if (g > 255) g = 255;else if (g < 0) g = 0;\n      return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      }\n\n      // Schedule a setTimeout after delay seconds\n      timer = setTimeout(function () {\n        func();\n\n        // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer);\n\n      // Executes the func after delay time.\n      timer = setTimeout(func, delay);\n    },\n    btnWait: function btnWait(el, cls, message, disable) {\n      if (!el) {\n        return;\n      }\n      if (typeof disable !== 'undefined' && disable === true) {\n        KTUtil.attr(el, \"disabled\", true);\n      }\n      if (cls) {\n        KTUtil.addClass(el, cls);\n        KTUtil.attr(el, \"wait-class\", cls);\n      }\n      if (message) {\n        var caption = KTUtil.find(el, '.btn-caption');\n        if (caption) {\n          KTUtil.data(caption).set('caption', KTUtil.getHTML(caption));\n          KTUtil.setHTML(caption, message);\n        } else {\n          KTUtil.data(el).set('caption', KTUtil.getHTML(el));\n          KTUtil.setHTML(el, message);\n        }\n      }\n    },\n    btnRelease: function btnRelease(el) {\n      if (!el) {\n        return;\n      }\n\n      /// Show loading state on button\n      KTUtil.removeAttr(el, \"disabled\");\n      if (KTUtil.hasAttr(el, \"wait-class\")) {\n        KTUtil.removeClass(el, KTUtil.attr(el, \"wait-class\"));\n      }\n      var caption = KTUtil.find(el, '.btn-caption');\n      if (caption && KTUtil.data(caption).has('caption')) {\n        KTUtil.setHTML(caption, KTUtil.data(caption).get('caption'));\n      } else if (KTUtil.data(el).has('caption')) {\n        KTUtil.setHTML(el, KTUtil.data(el).get('caption'));\n      }\n    },\n    isOffscreen: function isOffscreen(el, direction, offset) {\n      offset = offset || 0;\n      var windowWidth = KTUtil.getViewPort().width;\n      var windowHeight = KTUtil.getViewPort().height;\n      var top = KTUtil.offset(el).top;\n      var height = KTUtil.outerHeight(el) + offset;\n      var left = KTUtil.offset(el).left;\n      var width = KTUtil.outerWidth(el) + offset;\n      if (direction == 'bottom') {\n        if (windowHeight < top + height) {\n          return true;\n        } else if (windowHeight > top + height * 1.5) {\n          return true;\n        }\n      }\n      if (direction == 'top') {\n        if (top < 0) {\n          return true;\n        } else if (top > height) {\n          return true;\n        }\n      }\n      if (direction == 'left') {\n        if (left < 0) {\n          return true;\n        } else if (left * 2 > width) {\n          //console.log('left 2');\n          //return true;\n        }\n      }\n      if (direction == 'right') {\n        if (windowWidth < left + width) {\n          return true;\n        } else {\n          //console.log('right 2');\n          //return true;\n        }\n      }\n      return false;\n    }\n  };\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n}\n\n// Initialize KTUtil class on document ready\nKTUtil.ready(function () {\n  if (typeof KTAppSettings !== 'undefined') {\n    KTUtil.init(KTAppSettings);\n  } else {\n    KTUtil.init();\n  }\n});\n\n// CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\nwindow.onload = function () {\n  var result = KTUtil.getByTagName('body');\n  if (result && result[0]) {\n    KTUtil.removeClass(result[0], 'page-loading');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/util.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/wizard.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/wizard.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Component Definition\nvar KTWizard = function KTWizard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false;\n\n  // Get element object\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    startStep: 1,\n    clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('wizard')) {\n        the = KTUtil.data(element).get('wizard');\n      } else {\n        // reset menu\n        Plugin.init(options);\n\n        // build menu\n        Plugin.build();\n        KTUtil.data(element).set('wizard', the);\n      }\n      return the;\n    },\n    /**\r\n     * Init wizard\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n      // Elements\n      the.steps = KTUtil.findAll(element, '[data-wizard-type=\"step\"]');\n      the.btnNext = KTUtil.find(element, '[data-wizard-type=\"action-next\"]');\n      the.btnPrev = KTUtil.find(element, '[data-wizard-type=\"action-prev\"]');\n      the.btnSubmit = KTUtil.find(element, '[data-wizard-type=\"action-submit\"]');\n\n      // Variables\n      the.events = [];\n      the.lastStep = 0;\n      the.currentStep = 1;\n      the.newStep = 0;\n      the.stopped = false;\n      the.totalSteps = the.steps.length;\n\n      // Init current step\n      if (the.options.startStep > 1) {\n        Plugin.goTo(the.options.startStep);\n      }\n\n      // Init UI\n      Plugin.updateUI();\n    },\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Next button event handler\n      KTUtil.addEvent(the.btnNext, 'click', function (e) {\n        e.preventDefault();\n\n        // Set new step number\n        Plugin.setNewStep(Plugin.getNextStep());\n\n        // Trigger change event\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getNextStep());\n        }\n      });\n\n      // Prev button event handler\n      KTUtil.addEvent(the.btnPrev, 'click', function (e) {\n        e.preventDefault();\n\n        // Set new step number\n        Plugin.setNewStep(Plugin.getPrevStep());\n\n        // Trigger change event\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getPrevStep());\n        }\n      });\n      if (the.options.clickableSteps === true) {\n        KTUtil.on(element, '[data-wizard-type=\"step\"]', 'click', function () {\n          var index = KTUtil.index(this) + 1;\n          if (index !== the.currentStep) {\n            Plugin.setNewStep(index);\n\n            // Trigger change event\n            if (Plugin.eventTrigger('change') !== false) {\n              Plugin.goTo(index);\n            }\n          }\n        });\n      }\n\n      // Submit button event handler\n      KTUtil.addEvent(the.btnSubmit, 'click', function (e) {\n        e.preventDefault();\n        Plugin.eventTrigger('submit');\n      });\n    },\n    /**\r\n     * Handles wizard click wizard\r\n     */\n    goTo: function goTo(number) {\n      // Skip if stopped\n      if (the.stopped === true) {\n        the.stopped = false;\n        return;\n      }\n\n      // Skip if this step is already shown\n      if (number === the.currentStep || number > the.totalSteps || number < 0) {\n        return;\n      }\n\n      // Validate step number\n      number = parseInt(number);\n\n      // Set current step\n      the.lastStep = the.currentStep;\n      the.currentStep = number;\n      the.newStep = 0;\n      Plugin.updateUI();\n      Plugin.eventTrigger('changed');\n      return the;\n    },\n    /**\r\n     * Stop wizard\r\n     */\n    stop: function stop() {\n      the.stopped = true;\n    },\n    /**\r\n     * Resume wizard\r\n     */\n    resume: function resume() {\n      the.stopped = false;\n    },\n    /**\r\n     * Check last step\r\n     */\n    isLastStep: function isLastStep() {\n      return the.currentStep === the.totalSteps;\n    },\n    /**\r\n     * Check first step\r\n     */\n    isFirstStep: function isFirstStep() {\n      return the.currentStep === 1;\n    },\n    /**\r\n     * Check between step\r\n     */\n    isBetweenStep: function isBetweenStep() {\n      return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\n    },\n    /**\r\n     * Update wizard UI after step change\r\n     */\n    updateUI: function updateUI() {\n      var stepType = '';\n      var index = the.currentStep - 1;\n      if (Plugin.isLastStep()) {\n        stepType = 'last';\n      } else if (Plugin.isFirstStep()) {\n        stepType = 'first';\n      } else {\n        stepType = 'between';\n      }\n      KTUtil.attr(the.element, 'data-wizard-state', stepType);\n\n      // Steps\n      var steps = KTUtil.findAll(the.element, '[data-wizard-type=\"step\"]');\n      if (steps && steps.length > 0) {\n        for (var i = 0, len = steps.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(steps[i], 'data-wizard-state', 'current');\n          } else {\n            if (i < index) {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'done');\n            } else {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'pending');\n            }\n          }\n        }\n      }\n\n      // Steps Info\n      var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type=\"step-info\"]');\n      if (stepsInfo && stepsInfo.length > 0) {\n        for (var i = 0, len = stepsInfo.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');\n          }\n        }\n      }\n\n      // Steps Content\n      var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type=\"step-content\"]');\n      if (stepsContent && stepsContent.length > 0) {\n        for (var i = 0, len = stepsContent.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');\n          }\n        }\n      }\n    },\n    /**\r\n     * Get next step number\r\n     */\n    getNextStep: function getNextStep() {\n      if (the.totalSteps >= the.currentStep + 1) {\n        return the.currentStep + 1;\n      } else {\n        return the.totalSteps;\n      }\n    },\n    /**\r\n     * Get prev step number\r\n     */\n    getPrevStep: function getPrevStep() {\n      if (the.currentStep - 1 >= 1) {\n        return the.currentStep - 1;\n      } else {\n        return 1;\n      }\n    },\n    /**\r\n     * Get new step number\r\n     */\n    getNewStep: function getNewStep() {\n      return the.newStep;\n    },\n    /**\r\n     * Set new step\r\n     */\n    setNewStep: function setNewStep(step) {\n      the.newStep = step;\n    },\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, nested) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  };\n\n  //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  /**\r\n   * Go to the next step\r\n   */\n  the.goNext = function () {\n    return Plugin.goTo(Plugin.getNextStep());\n  };\n\n  /**\r\n   * Go to the prev step\r\n   */\n  the.goPrev = function () {\n    return Plugin.goTo(Plugin.getPrevStep());\n  };\n\n  /**\r\n   * Go to the last step\r\n   */\n  the.goLast = function () {\n    return Plugin.goTo(Plugin.getLastStep());\n  };\n\n  /**\r\n   * Go to the first step\r\n   */\n  the.goFirst = function () {\n    return Plugin.goTo(Plugin.getFirstStep());\n  };\n\n  /**\r\n   * Go to a step\r\n   */\n  the.goTo = function (number) {\n    return Plugin.goTo(number);\n  };\n\n  /**\r\n   * Stop wizard\r\n   */\n  the.stop = function () {\n    return Plugin.stop();\n  };\n\n  /**\r\n   * Resume wizard\r\n   */\n  the.resume = function () {\n    return Plugin.resume();\n  };\n\n  /**\r\n   * Get current step number\r\n   */\n  the.getStep = function () {\n    return the.currentStep;\n  };\n\n  /**\r\n   * Get new step number\r\n   */\n  the.getNewStep = function () {\n    return Plugin.getNewStep();\n  };\n\n  /**\r\n   * Set new step number\r\n   */\n  the.setNewStep = function (number) {\n    Plugin.setNewStep(number);\n  };\n\n  /**\r\n   * Check last step\r\n   */\n  the.isLastStep = function () {\n    return Plugin.isLastStep();\n  };\n\n  /**\r\n   * Check first step\r\n   */\n  the.isFirstStep = function () {\n    return Plugin.isFirstStep();\n  };\n\n  /**\r\n   * Attach event(\"change\", \"changed\", \"submit\")\r\n   */\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  /**\r\n   * Attach event that will be fired once\r\n   */\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  };\n\n  // Construct plugin\n  Plugin.construct.apply(the, [options]);\n  return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTWizard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/wizard.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-menu.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-menu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideMenu = function () {\n  // Private properties\n  var _body;\n  var _element;\n  var _menuObject;\n\n  // Initialize\n  var _init = function _init() {\n    var menuDesktopMode = KTUtil.attr(_element, 'data-menu-dropdown') === '1' ? 'dropdown' : 'accordion';\n    var scroll;\n    if (KTUtil.attr(_element, 'data-menu-scroll') === '1') {\n      scroll = {\n        rememberPosition: true,\n        // remember position on page reload\n        height: function height() {\n          // calculate available scrollable area height\n          var height = parseInt(KTUtil.getViewPort().height);\n          if (KTUtil.isBreakpointUp('lg')) {\n            height = height - KTLayoutBrand.getHeight();\n          }\n          height = height - (parseInt(KTUtil.css(_element, 'marginBottom')) + parseInt(KTUtil.css(_element, 'marginTop')));\n          return height;\n        }\n      };\n    }\n    _menuObject = new KTMenu(_element, {\n      // Vertical scroll\n      scroll: scroll,\n      // Submenu setup\n      submenu: {\n        desktop: menuDesktopMode,\n        tablet: 'accordion',\n        // menu set to accordion in tablet mode\n        mobile: 'accordion' // menu set to accordion in mobile mode\n      },\n\n      // Accordion setup\n      accordion: {\n        expandAll: false // allow having multiple expanded accordions in the menu\n      }\n    });\n  };\n\n  var _initHover = function _initHover() {\n    // Handle Minimized Aside Hover\n    if (KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable')) {\n      var insideTm;\n      var outsideTm;\n\n      // Handle Aside Hover Mode\n      KTUtil.addEvent(_element, 'mouseenter', function (e) {\n        e.preventDefault();\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n        insideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize') && KTUtil.isBreakpointUp('lg')) {\n            // Hover class\n            KTUtil.addClass(_body, 'aside-minimize-hover');\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 50);\n      });\n      KTUtil.addEvent(KTLayoutAside.getElement(), 'mouseleave', function (e) {\n        e.preventDefault();\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n        outsideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize-hover') && KTUtil.isBreakpointUp('lg')) {\n            KTUtil.removeClass(_body, 'aside-minimize-hover');\n\n            // Hover class\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 100);\n      });\n    }\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _body = KTUtil.getBody();\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize menu\n      _init();\n      _initHover();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _menuObject.hide();\n      }\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutAsideMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-toggle.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-toggle.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideToggle = function () {\n  // Private properties\n  var _body;\n  var _element;\n  var _toggleObject;\n\n  // Initialize\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_element, _body, {\n      targetState: 'aside-minimize',\n      toggleState: 'active'\n    });\n    _toggleObject.on('toggle', function (toggle) {\n      // Update sticky card\n      if (typeof KTLayoutStickyCard !== 'undefined') {\n        KTLayoutStickyCard.update();\n      }\n\n      // Pause header menu dropdowns\n      if (typeof KTLayoutHeaderMenu !== 'undefined') {\n        KTLayoutHeaderMenu.pauseDropdownHover(800);\n      }\n\n      // Pause aside menu dropdowns\n      if (typeof KTLayoutAsideMenu !== 'undefined') {\n        KTLayoutAsideMenu.pauseDropdownHover(800);\n      }\n\n      // Remember state in cookie\n      KTCookie.setCookie('kt_aside_toggle_state', toggle.getState());\n      // to set default minimized left aside use this cookie value in your\n      // server side code and add \"kt-primary--minimize aside-minimize\" classes to\n      // the body tag in order to initialize the minimized left aside mode during page loading.\n    });\n\n    _toggleObject.on('beforeToggle', function (toggle) {\n      if (KTUtil.hasClass(_body, 'aside-minimize') === false && KTUtil.hasClass(_body, 'aside-minimize-hover')) {\n        KTUtil.removeClass(_body, 'aside-minimize-hover');\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getToggle: function getToggle() {\n      return _toggleObject;\n    },\n    onToggle: function onToggle(handler) {\n      if (typeof _toggleObject.element !== 'undefined') {\n        _toggleObject.on('toggle', handler);\n      }\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutAsideToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzPzA2NWQiXSwibmFtZXMiOlsiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIl9ib2R5IiwiX2VsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsInRhcmdldFN0YXRlIiwidG9nZ2xlU3RhdGUiLCJvbiIsInRvZ2dsZSIsIktUTGF5b3V0U3RpY2t5Q2FyZCIsInVwZGF0ZSIsIktUTGF5b3V0SGVhZGVyTWVudSIsInBhdXNlRHJvcGRvd25Ib3ZlciIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RDb29raWUiLCJzZXRDb29raWUiLCJnZXRTdGF0ZSIsIktUVXRpbCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRUb2dnbGUiLCJvblRvZ2dsZSIsImhhbmRsZXIiLCJlbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztFQUNqQztFQUNBLElBQUlDLEtBQUs7RUFDVCxJQUFJQyxRQUFRO0VBQ1osSUFBSUMsYUFBYTs7RUFFcEI7RUFDQSxJQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBSyxHQUFjO0lBQ3RCRCxhQUFhLEdBQUcsSUFBSUUsUUFBUSxDQUFDSCxRQUFRLEVBQUVELEtBQUssRUFBRTtNQUM3Q0ssV0FBVyxFQUFFLGdCQUFnQjtNQUM3QkMsV0FBVyxFQUFFO0lBQ2QsQ0FBQyxDQUFDO0lBRUZKLGFBQWEsQ0FBQ0ssRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFTQyxNQUFNLEVBQUU7TUFDbEM7TUFDQSxJQUFJLE9BQU9DLGtCQUFrQixLQUFLLFdBQVcsRUFBRTtRQUMzQ0Esa0JBQWtCLENBQUNDLE1BQU0sRUFBRTtNQUMvQjs7TUFFQTtNQUNBLElBQUksT0FBT0Msa0JBQWtCLEtBQUssV0FBVyxFQUFFO1FBQzNDQSxrQkFBa0IsQ0FBQ0Msa0JBQWtCLENBQUMsR0FBRyxDQUFDO01BQzlDOztNQUVBO01BQ0EsSUFBSSxPQUFPQyxpQkFBaUIsS0FBSyxXQUFXLEVBQUU7UUFDMUNBLGlCQUFpQixDQUFDRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7TUFDN0M7O01BRUE7TUFDVEUsUUFBUSxDQUFDQyxTQUFTLENBQUMsdUJBQXVCLEVBQUVQLE1BQU0sQ0FBQ1EsUUFBUSxFQUFFLENBQUM7TUFDOUQ7TUFDQTtNQUNBO0lBQ0QsQ0FBQyxDQUFDOztJQUVGZCxhQUFhLENBQUNLLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBU0MsTUFBTSxFQUFFO01BQ2pELElBQUlTLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDbEIsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEtBQUssS0FBSyxJQUFJaUIsTUFBTSxDQUFDQyxRQUFRLENBQUNsQixLQUFLLEVBQUUsc0JBQXNCLENBQUMsRUFBRTtRQUN6R2lCLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDbkIsS0FBSyxFQUFFLHNCQUFzQixDQUFDO01BQ2xEO0lBQ0QsQ0FBQyxDQUFDO0VBQ0gsQ0FBQzs7RUFFRTtFQUNILE9BQU87SUFDTm9CLElBQUksRUFBRSxjQUFTQyxFQUFFLEVBQUU7TUFDVHBCLFFBQVEsR0FBR2dCLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDRCxFQUFFLENBQUM7TUFDN0JyQixLQUFLLEdBQUdpQixNQUFNLENBQUNNLE9BQU8sRUFBRTtNQUV4QixJQUFJLENBQUN0QixRQUFRLEVBQUU7UUFDWDtNQUNKOztNQUVBO01BQ0FFLEtBQUssRUFBRTtJQUNqQixDQUFDO0lBRUtxQixVQUFVLEVBQUUsc0JBQVc7TUFDbkIsT0FBT3ZCLFFBQVE7SUFDbkIsQ0FBQztJQUVEd0IsU0FBUyxFQUFFLHFCQUFXO01BQzNCLE9BQU92QixhQUFhO0lBQ3JCLENBQUM7SUFFRHdCLFFBQVEsRUFBRSxrQkFBU0MsT0FBTyxFQUFFO01BQzNCLElBQUksT0FBT3pCLGFBQWEsQ0FBQzBCLE9BQU8sS0FBSyxXQUFXLEVBQUU7UUFDakQxQixhQUFhLENBQUNLLEVBQUUsQ0FBQyxRQUFRLEVBQUVvQixPQUFPLENBQUM7TUFDcEM7SUFDRDtFQUNELENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHL0IsbUJBQW1CO0FBQ3JDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2FzaWRlLXRvZ2dsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0QXNpZGVUb2dnbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9ib2R5O1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF90b2dnbGVPYmplY3Q7XHJcblxyXG5cdC8vIEluaXRpYWxpemVcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdF90b2dnbGVPYmplY3QgPSBuZXcgS1RUb2dnbGUoX2VsZW1lbnQsIF9ib2R5LCB7XHJcblx0XHRcdHRhcmdldFN0YXRlOiAnYXNpZGUtbWluaW1pemUnLFxyXG5cdFx0XHR0b2dnbGVTdGF0ZTogJ2FjdGl2ZSdcclxuXHRcdH0pO1xyXG5cclxuXHRcdF90b2dnbGVPYmplY3Qub24oJ3RvZ2dsZScsIGZ1bmN0aW9uKHRvZ2dsZSkge1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgc3RpY2t5IGNhcmRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLVExheW91dFN0aWNreUNhcmQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBLVExheW91dFN0aWNreUNhcmQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFBhdXNlIGhlYWRlciBtZW51IGRyb3Bkb3duc1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyTWVudSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0SGVhZGVyTWVudS5wYXVzZURyb3Bkb3duSG92ZXIoODAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGF1c2UgYXNpZGUgbWVudSBkcm9wZG93bnNcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLVExheW91dEFzaWRlTWVudSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0QXNpZGVNZW51LnBhdXNlRHJvcGRvd25Ib3Zlcig4MDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1lbWJlciBzdGF0ZSBpbiBjb29raWVcclxuXHRcdFx0S1RDb29raWUuc2V0Q29va2llKCdrdF9hc2lkZV90b2dnbGVfc3RhdGUnLCB0b2dnbGUuZ2V0U3RhdGUoKSk7XHJcblx0XHRcdC8vIHRvIHNldCBkZWZhdWx0IG1pbmltaXplZCBsZWZ0IGFzaWRlIHVzZSB0aGlzIGNvb2tpZSB2YWx1ZSBpbiB5b3VyXHJcblx0XHRcdC8vIHNlcnZlciBzaWRlIGNvZGUgYW5kIGFkZCBcImt0LXByaW1hcnktLW1pbmltaXplIGFzaWRlLW1pbmltaXplXCIgY2xhc3NlcyB0b1xyXG5cdFx0XHQvLyB0aGUgYm9keSB0YWcgaW4gb3JkZXIgdG8gaW5pdGlhbGl6ZSB0aGUgbWluaW1pemVkIGxlZnQgYXNpZGUgbW9kZSBkdXJpbmcgcGFnZSBsb2FkaW5nLlxyXG5cdFx0fSk7XHJcblxyXG5cdFx0X3RvZ2dsZU9iamVjdC5vbignYmVmb3JlVG9nZ2xlJywgZnVuY3Rpb24odG9nZ2xlKSB7XHJcblx0XHRcdGlmIChLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZScpID09PSBmYWxzZSAmJiBLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcicpKSB7XHJcblx0XHRcdFx0S1RVdGlsLnJlbW92ZUNsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXInKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0VG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF90b2dnbGVPYmplY3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdG9uVG9nZ2xlOiBmdW5jdGlvbihoYW5kbGVyKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgX3RvZ2dsZU9iamVjdC5lbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdF90b2dnbGVPYmplY3Qub24oJ3RvZ2dsZScsIGhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRBc2lkZVRvZ2dsZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAside = function () {\n  // Private properties\n  var _body;\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  // Initialize\n  var _init = function _init() {\n    var offcanvasClass = KTUtil.hasClass(_element, 'aside-offcanvas-default') ? 'aside-offcanvas-default' : 'aside';\n\n    // Initialize mobile aside offcanvas\n    _offcanvasObject = new KTOffcanvas(_element, {\n      baseClass: offcanvasClass,\n      overlay: true,\n      closeBy: 'kt_aside_close_btn',\n      toggleBy: {\n        target: 'kt_aside_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(_body, 'aside-fixed');\n    },\n    isMinimized: function isMinimized() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize');\n    },\n    isHoverable: function isHoverable() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable');\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutAside;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUuanM/ZWIxMSJdLCJuYW1lcyI6WyJLVExheW91dEFzaWRlIiwiX2JvZHkiLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsIm9mZmNhbnZhc0NsYXNzIiwiS1RVdGlsIiwiaGFzQ2xhc3MiLCJLVE9mZmNhbnZhcyIsImJhc2VDbGFzcyIsIm92ZXJsYXkiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJ0YXJnZXQiLCJzdGF0ZSIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRCb2R5IiwiZ2V0RWxlbWVudCIsImdldE9mZmNhbnZhcyIsImlzRml4ZWQiLCJpc01pbmltaXplZCIsImlzSG92ZXJhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsYUFBYSxHQUFHLFlBQVc7RUFDM0I7RUFDQSxJQUFJQyxLQUFLO0VBQ1QsSUFBSUMsUUFBUTtFQUNaLElBQUlDLGdCQUFnQjs7RUFFcEI7RUFDSDtFQUNBLElBQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFLLEdBQWM7SUFDdEIsSUFBSUMsY0FBYyxHQUFHQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0wsUUFBUSxFQUFFLHlCQUF5QixDQUFDLEdBQUcseUJBQXlCLEdBQUcsT0FBTzs7SUFFekc7SUFDTkMsZ0JBQWdCLEdBQUcsSUFBSUssV0FBVyxDQUFDTixRQUFRLEVBQUU7TUFDNUNPLFNBQVMsRUFBRUosY0FBYztNQUN6QkssT0FBTyxFQUFFLElBQUk7TUFDYkMsT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkMsUUFBUSxFQUFFO1FBQ1RDLE1BQU0sRUFBRSx3QkFBd0I7UUFDaENDLEtBQUssRUFBRTtNQUNSO0lBQ0QsQ0FBQyxDQUFDO0VBQ0gsQ0FBQzs7RUFFRTtFQUNILE9BQU87SUFDTkMsSUFBSSxFQUFFLGNBQVNDLEVBQUUsRUFBRTtNQUNUZCxRQUFRLEdBQUdJLE1BQU0sQ0FBQ1csT0FBTyxDQUFDRCxFQUFFLENBQUM7TUFDN0JmLEtBQUssR0FBR0ssTUFBTSxDQUFDWSxPQUFPLEVBQUU7TUFFeEIsSUFBSSxDQUFDaEIsUUFBUSxFQUFFO1FBQ1g7TUFDSjs7TUFFQTtNQUNBRSxLQUFLLEVBQUU7SUFDWCxDQUFDO0lBRURlLFVBQVUsRUFBRSxzQkFBVztNQUNuQixPQUFPakIsUUFBUTtJQUNuQixDQUFDO0lBRURrQixZQUFZLEVBQUUsd0JBQVc7TUFDckIsT0FBT2pCLGdCQUFnQjtJQUMzQixDQUFDO0lBRURrQixPQUFPLEVBQUUsbUJBQVc7TUFDaEIsT0FBT2YsTUFBTSxDQUFDQyxRQUFRLENBQUNOLEtBQUssRUFBRSxhQUFhLENBQUM7SUFDaEQsQ0FBQztJQUVEcUIsV0FBVyxFQUFFLHVCQUFXO01BQ3BCLE9BQVFoQixNQUFNLENBQUNDLFFBQVEsQ0FBQ04sS0FBSyxFQUFFLGFBQWEsQ0FBQyxJQUFJSyxNQUFNLENBQUNDLFFBQVEsQ0FBQ04sS0FBSyxFQUFFLGdCQUFnQixDQUFDO0lBQzdGLENBQUM7SUFFRHNCLFdBQVcsRUFBRSx1QkFBVztNQUNwQixPQUFRakIsTUFBTSxDQUFDQyxRQUFRLENBQUNOLEtBQUssRUFBRSxhQUFhLENBQUMsSUFBSUssTUFBTSxDQUFDQyxRQUFRLENBQUNOLEtBQUssRUFBRSwwQkFBMEIsQ0FBQztJQUN2RztFQUNQLENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbEN1QixNQUFNLENBQUNDLE9BQU8sR0FBR3pCLGFBQWE7QUFDL0IiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEFzaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfYm9keTtcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0Ly8gSW5pdGlhbGl6ZVxyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG9mZmNhbnZhc0NsYXNzID0gS1RVdGlsLmhhc0NsYXNzKF9lbGVtZW50LCAnYXNpZGUtb2ZmY2FudmFzLWRlZmF1bHQnKSA/ICdhc2lkZS1vZmZjYW52YXMtZGVmYXVsdCcgOiAnYXNpZGUnO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIG1vYmlsZSBhc2lkZSBvZmZjYW52YXNcclxuXHRcdF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuXHRcdFx0YmFzZUNsYXNzOiBvZmZjYW52YXNDbGFzcyxcclxuXHRcdFx0b3ZlcmxheTogdHJ1ZSxcclxuXHRcdFx0Y2xvc2VCeTogJ2t0X2FzaWRlX2Nsb3NlX2J0bicsXHJcblx0XHRcdHRvZ2dsZUJ5OiB7XHJcblx0XHRcdFx0dGFyZ2V0OiAna3RfYXNpZGVfbW9iaWxlX3RvZ2dsZScsXHJcblx0XHRcdFx0c3RhdGU6ICdtb2JpbGUtdG9nZ2xlLWFjdGl2ZSdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldE9mZmNhbnZhczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfb2ZmY2FudmFzT2JqZWN0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzRml4ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtZml4ZWQnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc01pbmltaXplZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtZml4ZWQnKSAmJiBLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZScpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0hvdmVyYWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtZml4ZWQnKSAmJiBLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcmFibGUnKSk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0QXNpZGU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/brand.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/brand.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutBrand = function () {\n  // Private properties\n  var _element;\n\n  // Private functions\n  var _getHeight = function _getHeight() {\n    var height = 0;\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n    return height;\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutBrand;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanM/NWM5OSJdLCJuYW1lcyI6WyJLVExheW91dEJyYW5kIiwiX2VsZW1lbnQiLCJfZ2V0SGVpZ2h0IiwiaGVpZ2h0IiwiS1RVdGlsIiwiYWN0dWFsSGVpZ2h0IiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUcsWUFBVztFQUMzQjtFQUNBLElBQUlDLFFBQVE7O0VBRVo7RUFDQSxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBVSxHQUFjO0lBQ3hCLElBQUlDLE1BQU0sR0FBRyxDQUFDO0lBRWQsSUFBSUYsUUFBUSxFQUFFO01BQ1ZFLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFZLENBQUNKLFFBQVEsQ0FBQztJQUMxQztJQUVBLE9BQU9FLE1BQU07RUFDakIsQ0FBQzs7RUFFRDtFQUNILE9BQU87SUFDTkcsSUFBSSxFQUFFLGNBQVNDLEVBQUUsRUFBRTtNQUNUTixRQUFRLEdBQUdHLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDRCxFQUFFLENBQUM7TUFFN0IsSUFBSSxDQUFDTixRQUFRLEVBQUU7UUFDWDtNQUNKO0lBQ1YsQ0FBQztJQUVLUSxVQUFVLEVBQUUsc0JBQVc7TUFDbkIsT0FBT1IsUUFBUTtJQUNuQixDQUFDO0lBRURTLFNBQVMsRUFBRSxxQkFBVztNQUNsQixPQUFPUixVQUFVLEVBQUU7SUFDdkI7RUFDUCxDQUFDO0FBQ0YsQ0FBQyxFQUFFOztBQUVIO0FBQ0EsSUFBSSxJQUE2QixFQUFFO0VBQ2xDUyxNQUFNLENBQUNDLE9BQU8sR0FBR1osYUFBYTtBQUMvQiIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9icmFuZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0QnJhbmQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBpZiAoX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChfZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0QnJhbmQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/brand.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/content.js":
/*!******************************************************!*\
  !*** ./resources/metronic/js/layout/base/content.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutContent = function () {\n  // Private properties\n  var _element;\n\n  // Private functions\n  var _getHeight = function _getHeight() {\n    var height;\n    height = KTUtil.getViewPort().height;\n    if (_element) {\n      height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    }\n    height = height - KTLayoutHeader.getHeight();\n    height = height - KTLayoutSubheader.getHeight();\n    height = height - KTLayoutFooter.getHeight();\n    return height;\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutContent;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvY29udGVudC5qcz9hNTFjIl0sIm5hbWVzIjpbIktUTGF5b3V0Q29udGVudCIsIl9lbGVtZW50IiwiX2dldEhlaWdodCIsImhlaWdodCIsIktUVXRpbCIsImdldFZpZXdQb3J0IiwicGFyc2VJbnQiLCJjc3MiLCJLVExheW91dEhlYWRlciIsImdldEhlaWdodCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiS1RMYXlvdXRGb290ZXIiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGVBQWUsR0FBRyxZQUFXO0VBQzdCO0VBQ0EsSUFBSUMsUUFBUTs7RUFFZjtFQUNBLElBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFVLEdBQWM7SUFDM0IsSUFBSUMsTUFBTTtJQUVWQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsV0FBVyxFQUFFLENBQUNGLE1BQU07SUFFOUIsSUFBSUYsUUFBUSxFQUFFO01BQ1ZFLE1BQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNGLE1BQU0sQ0FBQ0csR0FBRyxDQUFDTixRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsR0FBR0ssUUFBUSxDQUFDRixNQUFNLENBQUNHLEdBQUcsQ0FBQ04sUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3BIO0lBRUFFLE1BQU0sR0FBR0EsTUFBTSxHQUFHSyxjQUFjLENBQUNDLFNBQVMsRUFBRTtJQUM1Q04sTUFBTSxHQUFHQSxNQUFNLEdBQUdPLGlCQUFpQixDQUFDRCxTQUFTLEVBQUU7SUFDL0NOLE1BQU0sR0FBR0EsTUFBTSxHQUFHUSxjQUFjLENBQUNGLFNBQVMsRUFBRTtJQUVsRCxPQUFPTixNQUFNO0VBQ2QsQ0FBQzs7RUFFRTtFQUNILE9BQU87SUFDTlMsSUFBSSxFQUFFLGNBQVNDLEVBQUUsRUFBRTtNQUNUWixRQUFRLEdBQUdHLE1BQU0sQ0FBQ1UsT0FBTyxDQUFDRCxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVESixTQUFTLEVBQUUscUJBQVc7TUFDckIsT0FBT1AsVUFBVSxFQUFFO0lBQ3BCLENBQUM7SUFFS2EsVUFBVSxFQUFFLHNCQUFXO01BQ25CLE9BQU9kLFFBQVE7SUFDbkI7RUFDUCxDQUFDO0FBQ0YsQ0FBQyxFQUFFOztBQUVIO0FBQ0EsSUFBSSxJQUE2QixFQUFFO0VBQ2xDZSxNQUFNLENBQUNDLE9BQU8sR0FBR2pCLGVBQWU7QUFDakMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvY29udGVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0Q29udGVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoZWlnaHQ7XHJcblxyXG5cdFx0aGVpZ2h0ID0gS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodCgpO1xyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0U3ViaGVhZGVyLmdldEhlaWdodCgpO1xyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0Rm9vdGVyLmdldEhlaWdodCgpO1xyXG5cclxuXHRcdHJldHVybiBoZWlnaHQ7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX2dldEhlaWdodCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRDb250ZW50O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/content.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/footer.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/footer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutFooter = function () {\n  // Private properties\n  var _element;\n\n  // Private functions\n  var _getHeight = function _getHeight() {\n    var height = 0;\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n    return height;\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutFooter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzPzQ5ZTUiXSwibmFtZXMiOlsiS1RMYXlvdXRGb290ZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0SGVpZ2h0IiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0VBQzVCO0VBQ0EsSUFBSUMsUUFBUTs7RUFFZjtFQUNBLElBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFVLEdBQWM7SUFDM0IsSUFBSUMsTUFBTSxHQUFHLENBQUM7SUFFUixJQUFJRixRQUFRLEVBQUU7TUFDVkUsTUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVksQ0FBQ0osUUFBUSxDQUFDO0lBQzFDO0lBRU4sT0FBT0UsTUFBTTtFQUNkLENBQUM7O0VBRUU7RUFDSCxPQUFPO0lBQ05HLElBQUksRUFBRSxjQUFTQyxFQUFFLEVBQUU7TUFDVE4sUUFBUSxHQUFHRyxNQUFNLENBQUNJLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFREUsU0FBUyxFQUFFLHFCQUFXO01BQ3JCLE9BQU9QLFVBQVUsRUFBRTtJQUNwQixDQUFDO0lBRUtRLFVBQVUsRUFBRSxzQkFBVztNQUNuQixPQUFPVCxRQUFRO0lBQ25CO0VBQ1AsQ0FBQztBQUNGLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQ1UsTUFBTSxDQUFDQyxPQUFPLEdBQUdaLGNBQWM7QUFDaEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRGb290ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IEtUVXRpbC5hY3R1YWxIZWlnaHQoX2VsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcblx0XHRyZXR1cm4gaGVpZ2h0O1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0Rm9vdGVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/footer.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-menu.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-menu.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderMenu = function () {\n  // Private properties\n  var _menuElement;\n  var _menuObject;\n  var _offcanvasElement;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_offcanvasElement, {\n      overlay: true,\n      baseClass: 'header-menu-wrapper',\n      closeBy: 'kt_header_menu_mobile_close_btn',\n      toggleBy: {\n        target: 'kt_header_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n    _menuObject = new KTMenu(_menuElement, {\n      submenu: {\n        desktop: 'dropdown',\n        tablet: 'accordion',\n        mobile: 'accordion'\n      },\n      accordion: {\n        slideSpeed: 200,\n        // accordion toggle slide speed in milliseconds\n        expandAll: false // allow having multiple expanded accordions in the menu\n      }\n    });\n\n    // Close aside offcanvas panel before page reload On tablet and mobile\n    _menuObject.on('linkClick', function (menu) {\n      if (KTUtil.isBreakpointDown('lg')) {\n        // Tablet and mobile mode\n        _offcanvasObject.hide(); // Hide offcanvas after general link click\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(menuId, offcanvasId) {\n      _menuElement = KTUtil.getById(menuId);\n      _offcanvasElement = KTUtil.getById(offcanvasId);\n      if (!_menuElement) {\n        return;\n      }\n\n      // Initialize menu\n      _init();\n    },\n    getMenuElement: function getMenuElement() {\n      return _menuElement;\n    },\n    getOffcanvasElement: function getOffcanvasElement() {\n      return _offcanvasElement;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _offcanvasObject.hide();\n      }\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutHeaderMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanM/NjRkYiJdLCJuYW1lcyI6WyJLVExheW91dEhlYWRlck1lbnUiLCJfbWVudUVsZW1lbnQiLCJfbWVudU9iamVjdCIsIl9vZmZjYW52YXNFbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiS1RPZmZjYW52YXMiLCJvdmVybGF5IiwiYmFzZUNsYXNzIiwiY2xvc2VCeSIsInRvZ2dsZUJ5IiwidGFyZ2V0Iiwic3RhdGUiLCJLVE1lbnUiLCJzdWJtZW51IiwiZGVza3RvcCIsInRhYmxldCIsIm1vYmlsZSIsImFjY29yZGlvbiIsInNsaWRlU3BlZWQiLCJleHBhbmRBbGwiLCJvbiIsIm1lbnUiLCJLVFV0aWwiLCJpc0JyZWFrcG9pbnREb3duIiwiaGlkZSIsImluaXQiLCJtZW51SWQiLCJvZmZjYW52YXNJZCIsImdldEJ5SWQiLCJnZXRNZW51RWxlbWVudCIsImdldE9mZmNhbnZhc0VsZW1lbnQiLCJnZXRNZW51IiwicGF1c2VEcm9wZG93bkhvdmVyIiwidGltZSIsImdldE9mZmNhbnZhcyIsImNsb3NlTW9iaWxlT2ZmY2FudmFzIiwiaXNNb2JpbGVEZXZpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxrQkFBa0IsR0FBRyxZQUFXO0VBQ2hDO0VBQ0gsSUFBSUMsWUFBWTtFQUNiLElBQUlDLFdBQVc7RUFDZixJQUFJQyxpQkFBaUI7RUFDckIsSUFBSUMsZ0JBQWdCOztFQUVwQjtFQUNILElBQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFLLEdBQWM7SUFDdEJELGdCQUFnQixHQUFHLElBQUlFLFdBQVcsQ0FBQ0gsaUJBQWlCLEVBQUU7TUFDckRJLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFNBQVMsRUFBRSxxQkFBcUI7TUFDaENDLE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNDLFFBQVEsRUFBRTtRQUNUQyxNQUFNLEVBQUUseUJBQXlCO1FBQ2pDQyxLQUFLLEVBQUU7TUFDUjtJQUNELENBQUMsQ0FBQztJQUVGVixXQUFXLEdBQUcsSUFBSVcsTUFBTSxDQUFDWixZQUFZLEVBQUU7TUFDdENhLE9BQU8sRUFBRTtRQUNSQyxPQUFPLEVBQUUsVUFBVTtRQUNuQkMsTUFBTSxFQUFFLFdBQVc7UUFDbkJDLE1BQU0sRUFBRTtNQUNULENBQUM7TUFDREMsU0FBUyxFQUFFO1FBQ1ZDLFVBQVUsRUFBRSxHQUFHO1FBQUU7UUFDakJDLFNBQVMsRUFBRSxLQUFLLENBQUM7TUFDbEI7SUFDRCxDQUFDLENBQUM7O0lBRUY7SUFDTWxCLFdBQVcsQ0FBQ21CLEVBQUUsQ0FBQyxXQUFXLEVBQUUsVUFBU0MsSUFBSSxFQUFFO01BQ3ZDLElBQUlDLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFBRTtRQUNqQ3BCLGdCQUFnQixDQUFDcUIsSUFBSSxFQUFFLENBQUMsQ0FBQztNQUM3QjtJQUNKLENBQUMsQ0FBQztFQUNULENBQUM7O0VBRUU7RUFDSCxPQUFPO0lBQ0FDLElBQUksRUFBRSxjQUFTQyxNQUFNLEVBQUVDLFdBQVcsRUFBRTtNQUNoQzNCLFlBQVksR0FBR3NCLE1BQU0sQ0FBQ00sT0FBTyxDQUFDRixNQUFNLENBQUM7TUFDckN4QixpQkFBaUIsR0FBR29CLE1BQU0sQ0FBQ00sT0FBTyxDQUFDRCxXQUFXLENBQUM7TUFFL0MsSUFBSSxDQUFDM0IsWUFBWSxFQUFFO1FBQ2Y7TUFDSjs7TUFFQTtNQUNBSSxLQUFLLEVBQUU7SUFDakIsQ0FBQztJQUVEeUIsY0FBYyxFQUFFLDBCQUFXO01BQzFCLE9BQU83QixZQUFZO0lBQ3BCLENBQUM7SUFFSzhCLG1CQUFtQixFQUFFLCtCQUFXO01BQ3JDLE9BQU81QixpQkFBaUI7SUFDekIsQ0FBQztJQUVLNkIsT0FBTyxFQUFFLG1CQUFXO01BQ3pCLE9BQU85QixXQUFXO0lBQ25CLENBQUM7SUFFRCtCLGtCQUFrQixFQUFFLDRCQUFTQyxJQUFJLEVBQUU7TUFDbEMsSUFBSWhDLFdBQVcsRUFBRTtRQUNoQkEsV0FBVyxDQUFDK0Isa0JBQWtCLENBQUNDLElBQUksQ0FBQztNQUNyQztJQUNELENBQUM7SUFFS0MsWUFBWSxFQUFFLHdCQUFXO01BQzlCLE9BQU8vQixnQkFBZ0I7SUFDeEIsQ0FBQztJQUVEZ0Msb0JBQW9CLEVBQUUsZ0NBQVc7TUFDaEMsSUFBSWxDLFdBQVcsSUFBSXFCLE1BQU0sQ0FBQ2MsY0FBYyxFQUFFLEVBQUU7UUFDM0NqQyxnQkFBZ0IsQ0FBQ3FCLElBQUksRUFBRTtNQUN4QjtJQUNEO0VBQ0QsQ0FBQztBQUNGLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQ2EsTUFBTSxDQUFDQyxPQUFPLEdBQUd2QyxrQkFBa0I7QUFDcEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEhlYWRlck1lbnUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfbWVudUVsZW1lbnQ7XHJcbiAgICB2YXIgX21lbnVPYmplY3Q7XHJcbiAgICB2YXIgX29mZmNhbnZhc0VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0X29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfb2ZmY2FudmFzRWxlbWVudCwge1xyXG5cdFx0XHRvdmVybGF5OiB0cnVlLFxyXG5cdFx0XHRiYXNlQ2xhc3M6ICdoZWFkZXItbWVudS13cmFwcGVyJyxcclxuXHRcdFx0Y2xvc2VCeTogJ2t0X2hlYWRlcl9tZW51X21vYmlsZV9jbG9zZV9idG4nLFxyXG5cdFx0XHR0b2dnbGVCeToge1xyXG5cdFx0XHRcdHRhcmdldDogJ2t0X2hlYWRlcl9tb2JpbGVfdG9nZ2xlJyxcclxuXHRcdFx0XHRzdGF0ZTogJ21vYmlsZS10b2dnbGUtYWN0aXZlJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0X21lbnVPYmplY3QgPSBuZXcgS1RNZW51KF9tZW51RWxlbWVudCwge1xyXG5cdFx0XHRzdWJtZW51OiB7XHJcblx0XHRcdFx0ZGVza3RvcDogJ2Ryb3Bkb3duJyxcclxuXHRcdFx0XHR0YWJsZXQ6ICdhY2NvcmRpb24nLFxyXG5cdFx0XHRcdG1vYmlsZTogJ2FjY29yZGlvbidcclxuXHRcdFx0fSxcclxuXHRcdFx0YWNjb3JkaW9uOiB7XHJcblx0XHRcdFx0c2xpZGVTcGVlZDogMjAwLCAvLyBhY2NvcmRpb24gdG9nZ2xlIHNsaWRlIHNwZWVkIGluIG1pbGxpc2Vjb25kc1xyXG5cdFx0XHRcdGV4cGFuZEFsbDogZmFsc2UgLy8gYWxsb3cgaGF2aW5nIG11bHRpcGxlIGV4cGFuZGVkIGFjY29yZGlvbnMgaW4gdGhlIG1lbnVcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQ2xvc2UgYXNpZGUgb2ZmY2FudmFzIHBhbmVsIGJlZm9yZSBwYWdlIHJlbG9hZCBPbiB0YWJsZXQgYW5kIG1vYmlsZVxyXG4gICAgICAgIF9tZW51T2JqZWN0Lm9uKCdsaW5rQ2xpY2snLCBmdW5jdGlvbihtZW51KSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSkgeyAvLyBUYWJsZXQgYW5kIG1vYmlsZSBtb2RlXHJcbiAgICAgICAgICAgICAgICBfb2ZmY2FudmFzT2JqZWN0LmhpZGUoKTsgLy8gSGlkZSBvZmZjYW52YXMgYWZ0ZXIgZ2VuZXJhbCBsaW5rIGNsaWNrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG1lbnVJZCwgb2ZmY2FudmFzSWQpIHtcclxuICAgICAgICAgICAgX21lbnVFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQobWVudUlkKTtcclxuICAgICAgICAgICAgX29mZmNhbnZhc0VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChvZmZjYW52YXNJZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9tZW51RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIG1lbnVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0TWVudUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX21lbnVFbGVtZW50O1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0T2ZmY2FudmFzRWxlbWVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfb2ZmY2FudmFzRWxlbWVudDtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE1lbnU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX21lbnVPYmplY3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdHBhdXNlRHJvcGRvd25Ib3ZlcjogZnVuY3Rpb24odGltZSkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QpIHtcclxuXHRcdFx0XHRfbWVudU9iamVjdC5wYXVzZURyb3Bkb3duSG92ZXIodGltZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE9mZmNhbnZhczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRjbG9zZU1vYmlsZU9mZmNhbnZhczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmIChfbWVudU9iamVjdCAmJiBLVFV0aWwuaXNNb2JpbGVEZXZpY2UoKSkge1xyXG5cdFx0XHRcdF9vZmZjYW52YXNPYmplY3QuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXJNZW51O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-topbar.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-topbar.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderTopbar = function () {\n  // Private properties\n  var _toggleElement;\n  var _toggleObject;\n\n  // Private functions\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_toggleElement, KTUtil.getBody(), {\n      targetState: 'topbar-mobile-on',\n      toggleState: 'active'\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _toggleElement = KTUtil.getById(id);\n      if (!_toggleElement) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getToggleElement: function getToggleElement() {\n      return _toggleElement;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutHeaderTopbar;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcz9iZmVmIl0sIm5hbWVzIjpbIktUTGF5b3V0SGVhZGVyVG9wYmFyIiwiX3RvZ2dsZUVsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsIktUVXRpbCIsImdldEJvZHkiLCJ0YXJnZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldFRvZ2dsZUVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxvQkFBb0IsR0FBRyxZQUFXO0VBQ2xDO0VBQ0gsSUFBSUMsY0FBYztFQUNmLElBQUlDLGFBQWE7O0VBRWpCO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUN4QkQsYUFBYSxHQUFHLElBQUlFLFFBQVEsQ0FBQ0gsY0FBYyxFQUFFSSxNQUFNLENBQUNDLE9BQU8sRUFBRSxFQUFFO01BQzlEQyxXQUFXLEVBQUUsa0JBQWtCO01BQy9CQyxXQUFXLEVBQUU7SUFDZCxDQUFDLENBQUM7RUFDRCxDQUFDOztFQUVEO0VBQ0gsT0FBTztJQUNOQyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ1RULGNBQWMsR0FBR0ksTUFBTSxDQUFDTSxPQUFPLENBQUNELEVBQUUsQ0FBQztNQUU1QyxJQUFJLENBQUNULGNBQWMsRUFBRTtRQUNSO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ2pCLENBQUM7SUFFS1MsZ0JBQWdCLEVBQUUsNEJBQVc7TUFDekIsT0FBT1gsY0FBYztJQUN6QjtFQUNQLENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENZLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHZCxvQkFBb0I7QUFDdEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0SGVhZGVyVG9wYmFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX3RvZ2dsZUVsZW1lbnQ7XHJcbiAgICB2YXIgX3RvZ2dsZU9iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdF90b2dnbGVPYmplY3QgPSBuZXcgS1RUb2dnbGUoX3RvZ2dsZUVsZW1lbnQsIEtUVXRpbC5nZXRCb2R5KCksIHtcclxuXHRcdFx0XHR0YXJnZXRTdGF0ZTogJ3RvcGJhci1tb2JpbGUtb24nLFxyXG5cdFx0XHRcdHRvZ2dsZVN0YXRlOiAnYWN0aXZlJyxcclxuXHRcdFx0fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX3RvZ2dsZUVsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG5cdFx0XHRpZiAoIV90b2dnbGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldFRvZ2dsZUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RvZ2dsZUVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0SGVhZGVyVG9wYmFyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-topbar.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/header.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeader = function () {\n  // Private properties\n  var _element;\n  var _elementForMobile;\n  var _object;\n\n  // Private functions\n  // Get Height\n  var _getHeight = function _getHeight() {\n    var height = 0;\n    if (_element) {\n      height = KTUtil.actualHeight(_element) + 1;\n    }\n    return height;\n  };\n\n  // Get Height\n  var _getHeightForMobile = function _getHeightForMobile() {\n    var height;\n    height = KTUtil.actualHeight(_elementForMobile);\n    return height;\n  };\n\n  // Public Methods\n  return {\n    init: function init(id, idForMobile) {\n      _element = KTUtil.getById(id);\n      _elementForMobile = KTUtil.getById(idForMobile);\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-fixed');\n    },\n    isFixedForMobile: function isFixedForMobile() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-mobile-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getElementForMobile: function getElementForMobile() {\n      return _elementForMobile;\n    },\n    getHeader: function getHeader() {\n      return _object;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getHeightForMobile: function getHeightForMobile() {\n      return _getHeightForMobile();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLmpzPzUyODYiXSwibmFtZXMiOlsiS1RMYXlvdXRIZWFkZXIiLCJfZWxlbWVudCIsIl9lbGVtZW50Rm9yTW9iaWxlIiwiX29iamVjdCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJfZ2V0SGVpZ2h0Rm9yTW9iaWxlIiwiaW5pdCIsImlkIiwiaWRGb3JNb2JpbGUiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImlzRml4ZWRGb3JNb2JpbGUiLCJnZXRFbGVtZW50IiwiZ2V0RWxlbWVudEZvck1vYmlsZSIsImdldEhlYWRlciIsImdldEhlaWdodCIsImdldEhlaWdodEZvck1vYmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0VBQzVCO0VBQ0EsSUFBSUMsUUFBUTtFQUNaLElBQUlDLGlCQUFpQjtFQUNyQixJQUFJQyxPQUFPOztFQUVkO0VBQ0c7RUFDQSxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBVSxHQUFjO0lBQ3hCLElBQUlDLE1BQU0sR0FBRyxDQUFDO0lBRWQsSUFBSUosUUFBUSxFQUFFO01BQ1ZJLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFZLENBQUNOLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDOUM7SUFFQSxPQUFPSSxNQUFNO0VBQ2pCLENBQUM7O0VBRUQ7RUFDQSxJQUFJRyxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQW1CLEdBQWM7SUFDakMsSUFBSUgsTUFBTTtJQUVWQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDTCxpQkFBaUIsQ0FBQztJQUUvQyxPQUFPRyxNQUFNO0VBQ2pCLENBQUM7O0VBRUQ7RUFDSCxPQUFPO0lBQ05JLElBQUksRUFBRSxjQUFTQyxFQUFFLEVBQUVDLFdBQVcsRUFBRTtNQUN0QlYsUUFBUSxHQUFHSyxNQUFNLENBQUNNLE9BQU8sQ0FBQ0YsRUFBRSxDQUFDO01BQzdCUixpQkFBaUIsR0FBR0ksTUFBTSxDQUFDTSxPQUFPLENBQUNELFdBQVcsQ0FBQztNQUUvQyxJQUFJLENBQUNWLFFBQVEsRUFBRTtRQUNYO01BQ0o7SUFDVixDQUFDO0lBRUtZLE9BQU8sRUFBRSxtQkFBVztNQUNoQixPQUFPUCxNQUFNLENBQUNRLFFBQVEsQ0FBQ1IsTUFBTSxDQUFDUyxPQUFPLEVBQUUsRUFBRSxjQUFjLENBQUM7SUFDNUQsQ0FBQztJQUVEQyxnQkFBZ0IsRUFBRSw0QkFBVztNQUN6QixPQUFPVixNQUFNLENBQUNRLFFBQVEsQ0FBQ1IsTUFBTSxDQUFDUyxPQUFPLEVBQUUsRUFBRSxxQkFBcUIsQ0FBQztJQUNuRSxDQUFDO0lBRURFLFVBQVUsRUFBRSxzQkFBVztNQUNuQixPQUFPaEIsUUFBUTtJQUNuQixDQUFDO0lBRURpQixtQkFBbUIsRUFBRSwrQkFBVztNQUM1QixPQUFPaEIsaUJBQWlCO0lBQzVCLENBQUM7SUFFRGlCLFNBQVMsRUFBRSxxQkFBVztNQUNsQixPQUFPaEIsT0FBTztJQUNsQixDQUFDO0lBRURpQixTQUFTLEVBQUUscUJBQVc7TUFDbEIsT0FBT2hCLFVBQVUsRUFBRTtJQUN2QixDQUFDO0lBRURpQixrQkFBa0IsRUFBRSw4QkFBVztNQUMzQixPQUFPYixtQkFBbUIsRUFBRTtJQUNoQztFQUNQLENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENjLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsY0FBYztBQUNoQyIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9oZWFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEhlYWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX2VsZW1lbnRGb3JNb2JpbGU7XHJcbiAgICB2YXIgX29iamVjdDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIC8vIEdldCBIZWlnaHRcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBIZWlnaHRcclxuICAgIHZhciBfZ2V0SGVpZ2h0Rm9yTW9iaWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodDtcclxuXHJcbiAgICAgICAgaGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChfZWxlbWVudEZvck1vYmlsZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIE1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQsIGlkRm9yTW9iaWxlKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfZWxlbWVudEZvck1vYmlsZSA9IEtUVXRpbC5nZXRCeUlkKGlkRm9yTW9iaWxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgaXNGaXhlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuaGFzQ2xhc3MoS1RVdGlsLmdldEJvZHkoKSwgJ2hlYWRlci1maXhlZCcpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNGaXhlZEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuaGFzQ2xhc3MoS1RVdGlsLmdldEJvZHkoKSwgJ2hlYWRlci1tb2JpbGUtZml4ZWQnKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudEZvck1vYmlsZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWFkZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29iamVjdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0Rm9yTW9iaWxlKCk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0SGVhZGVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/sticky-card.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/sticky-card.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStickyCard = function () {\n  // Private properties\n  var _element;\n  var _object;\n\n  // Private functions\n  var _init = function _init() {\n    var offset = 300;\n    if (typeof KTLayoutHeader !== 'undefined') {\n      offset = KTLayoutHeader.getHeight();\n    }\n    _object = new KTCard(_element, {\n      sticky: {\n        offset: offset,\n        zIndex: 90,\n        position: {\n          top: function top() {\n            var pos = 0;\n            var body = KTUtil.getBody();\n            if (KTUtil.isBreakpointUp('lg')) {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixed()) {\n                pos = pos + KTLayoutHeader.getHeight();\n              }\n              if (typeof KTLayoutSubheader !== 'undefined' && KTLayoutSubheader.isFixed()) {\n                pos = pos + KTLayoutSubheader.getHeight();\n              }\n            } else {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixedForMobile()) {\n                pos = pos + KTLayoutHeader.getHeightForMobile();\n              }\n            }\n            pos = pos - 1; // remove header border width\n\n            return pos;\n          },\n          left: function left(card) {\n            return KTUtil.offset(_element).left;\n          },\n          right: function right(card) {\n            var body = KTUtil.getBody();\n            var cardWidth = parseInt(KTUtil.css(_element, 'width'));\n            var bodyWidth = parseInt(KTUtil.css(body, 'width'));\n            var cardOffsetLeft = KTUtil.offset(_element).left;\n            return bodyWidth - cardWidth - cardOffsetLeft;\n          }\n        }\n      }\n    });\n    _object.initSticky();\n    KTUtil.addResizeHandler(function () {\n      _object.updateSticky();\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    update: function update() {\n      if (_object) {\n        _object.updateSticky();\n      }\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutStickyCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanM/ODdhMSJdLCJuYW1lcyI6WyJLVExheW91dFN0aWNreUNhcmQiLCJfZWxlbWVudCIsIl9vYmplY3QiLCJfaW5pdCIsIm9mZnNldCIsIktUTGF5b3V0SGVhZGVyIiwiZ2V0SGVpZ2h0IiwiS1RDYXJkIiwic3RpY2t5IiwiekluZGV4IiwicG9zaXRpb24iLCJ0b3AiLCJwb3MiLCJib2R5IiwiS1RVdGlsIiwiZ2V0Qm9keSIsImlzQnJlYWtwb2ludFVwIiwiaXNGaXhlZCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiaXNGaXhlZEZvck1vYmlsZSIsImdldEhlaWdodEZvck1vYmlsZSIsImxlZnQiLCJjYXJkIiwicmlnaHQiLCJjYXJkV2lkdGgiLCJwYXJzZUludCIsImNzcyIsImJvZHlXaWR0aCIsImNhcmRPZmZzZXRMZWZ0IiwiaW5pdFN0aWNreSIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGVTdGlja3kiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwidXBkYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsa0JBQWtCLEdBQUcsWUFBVztFQUNoQztFQUNILElBQUlDLFFBQVE7RUFDVCxJQUFJQyxPQUFPOztFQUVkO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUN0QixJQUFJQyxNQUFNLEdBQUcsR0FBRztJQUVoQixJQUFJLE9BQU9DLGNBQWMsS0FBSyxXQUFXLEVBQUU7TUFDMUNELE1BQU0sR0FBR0MsY0FBYyxDQUFDQyxTQUFTLEVBQUU7SUFDcEM7SUFFTUosT0FBTyxHQUFHLElBQUlLLE1BQU0sQ0FBQ04sUUFBUSxFQUFFO01BQ3BDTyxNQUFNLEVBQUU7UUFDUEosTUFBTSxFQUFFQSxNQUFNO1FBQ2RLLE1BQU0sRUFBRSxFQUFFO1FBQ1ZDLFFBQVEsRUFBRTtVQUNUQyxHQUFHLEVBQUUsZUFBVztZQUNmLElBQUlDLEdBQUcsR0FBRyxDQUFDO1lBQ08sSUFBSUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQU8sRUFBRTtZQUU3QyxJQUFJRCxNQUFNLENBQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtjQUNoQyxJQUFJLE9BQU9YLGNBQWMsS0FBSyxXQUFXLElBQUlBLGNBQWMsQ0FBQ1ksT0FBTyxFQUFFLEVBQUU7Z0JBQ3RFTCxHQUFHLEdBQUdBLEdBQUcsR0FBR1AsY0FBYyxDQUFDQyxTQUFTLEVBQUU7Y0FDdkM7Y0FFQSxJQUFJLE9BQU9ZLGlCQUFpQixLQUFLLFdBQVcsSUFBSUEsaUJBQWlCLENBQUNELE9BQU8sRUFBRSxFQUFFO2dCQUM1RUwsR0FBRyxHQUFHQSxHQUFHLEdBQUdNLGlCQUFpQixDQUFDWixTQUFTLEVBQUU7Y0FDMUM7WUFDRCxDQUFDLE1BQU07Y0FDTixJQUFJLE9BQU9ELGNBQWMsS0FBSyxXQUFXLElBQUlBLGNBQWMsQ0FBQ2MsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDL0VQLEdBQUcsR0FBR0EsR0FBRyxHQUFHUCxjQUFjLENBQUNlLGtCQUFrQixFQUFFO2NBQ2hEO1lBQ0Q7WUFFQVIsR0FBRyxHQUFHQSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7O1lBRWYsT0FBT0EsR0FBRztVQUNYLENBQUM7VUFDRFMsSUFBSSxFQUFFLGNBQVNDLElBQUksRUFBRTtZQUNwQixPQUFPUixNQUFNLENBQUNWLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDLENBQUNvQixJQUFJO1VBQ3BDLENBQUM7VUFDREUsS0FBSyxFQUFFLGVBQVNELElBQUksRUFBRTtZQUNyQixJQUFJVCxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO1lBRTNCLElBQUlTLFNBQVMsR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQUNZLEdBQUcsQ0FBQ3pCLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2RCxJQUFJMEIsU0FBUyxHQUFHRixRQUFRLENBQUNYLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDYixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSWUsY0FBYyxHQUFHZCxNQUFNLENBQUNWLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDLENBQUNvQixJQUFJO1lBRWpELE9BQU9NLFNBQVMsR0FBR0gsU0FBUyxHQUFHSSxjQUFjO1VBQzlDO1FBQ0Q7TUFDRDtJQUNELENBQUMsQ0FBQztJQUVGMUIsT0FBTyxDQUFDMkIsVUFBVSxFQUFFO0lBRXBCZixNQUFNLENBQUNnQixnQkFBZ0IsQ0FBQyxZQUFXO01BQ2xDNUIsT0FBTyxDQUFDNkIsWUFBWSxFQUFFO0lBQ3ZCLENBQUMsQ0FBQztFQUNILENBQUM7O0VBRUU7RUFDSCxPQUFPO0lBQ05DLElBQUksRUFBRSxjQUFTQyxFQUFFLEVBQUU7TUFDVGhDLFFBQVEsR0FBR2EsTUFBTSxDQUFDb0IsT0FBTyxDQUFDRCxFQUFFLENBQUM7TUFFN0IsSUFBSSxDQUFDaEMsUUFBUSxFQUFFO1FBQ1g7TUFDSjs7TUFFQTtNQUNURSxLQUFLLEVBQUU7SUFDUixDQUFDO0lBRURnQyxNQUFNLEVBQUUsa0JBQVc7TUFDbEIsSUFBSWpDLE9BQU8sRUFBRTtRQUNaQSxPQUFPLENBQUM2QixZQUFZLEVBQUU7TUFDdkI7SUFDRDtFQUNELENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHckMsa0JBQWtCO0FBQ3BDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0aWNreS1jYXJkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdGlja3lDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29iamVjdDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBvZmZzZXQgPSAzMDA7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBLVExheW91dEhlYWRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0b2Zmc2V0ID0gS1RMYXlvdXRIZWFkZXIuZ2V0SGVpZ2h0KCk7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIF9vYmplY3QgPSBuZXcgS1RDYXJkKF9lbGVtZW50LCB7XHJcblx0XHRcdHN0aWNreToge1xyXG5cdFx0XHRcdG9mZnNldDogb2Zmc2V0LFxyXG5cdFx0XHRcdHpJbmRleDogOTAsXHJcblx0XHRcdFx0cG9zaXRpb246IHtcclxuXHRcdFx0XHRcdHRvcDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBwb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoS1RVdGlsLmlzQnJlYWtwb2ludFVwKCdsZycpKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBLVExheW91dEhlYWRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgS1RMYXlvdXRIZWFkZXIuaXNGaXhlZCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwb3MgKyBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgS1RMYXlvdXRTdWJoZWFkZXIgIT09ICd1bmRlZmluZWQnICYmIEtUTGF5b3V0U3ViaGVhZGVyLmlzRml4ZWQoKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zID0gcG9zICsgS1RMYXlvdXRTdWJoZWFkZXIuZ2V0SGVpZ2h0KCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgS1RMYXlvdXRIZWFkZXIgIT09ICd1bmRlZmluZWQnICYmIEtUTGF5b3V0SGVhZGVyLmlzRml4ZWRGb3JNb2JpbGUoKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zID0gcG9zICsgS1RMYXlvdXRIZWFkZXIuZ2V0SGVpZ2h0Rm9yTW9iaWxlKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRwb3MgPSBwb3MgLSAxOyAvLyByZW1vdmUgaGVhZGVyIGJvcmRlciB3aWR0aFxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHBvcztcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRsZWZ0OiBmdW5jdGlvbihjYXJkKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBLVFV0aWwub2Zmc2V0KF9lbGVtZW50KS5sZWZ0O1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHJpZ2h0OiBmdW5jdGlvbihjYXJkKSB7XHJcblx0XHRcdFx0XHRcdHZhciBib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBjYXJkV2lkdGggPSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAnd2lkdGgnKSk7XHJcblx0XHRcdFx0XHRcdHZhciBib2R5V2lkdGggPSBwYXJzZUludChLVFV0aWwuY3NzKGJvZHksICd3aWR0aCcpKTtcclxuXHRcdFx0XHRcdFx0dmFyIGNhcmRPZmZzZXRMZWZ0ID0gS1RVdGlsLm9mZnNldChfZWxlbWVudCkubGVmdDtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBib2R5V2lkdGggLSBjYXJkV2lkdGggLSBjYXJkT2Zmc2V0TGVmdDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdF9vYmplY3QuaW5pdFN0aWNreSgpO1xyXG5cclxuXHRcdEtUVXRpbC5hZGRSZXNpemVIYW5kbGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRfb2JqZWN0LnVwZGF0ZVN0aWNreSgpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcblx0XHRcdF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmIChfb2JqZWN0KSB7XHJcblx0XHRcdFx0X29iamVjdC51cGRhdGVTdGlja3koKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0U3RpY2t5Q2FyZDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/sticky-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/stretched-card.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/base/stretched-card.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStretchedCard = function () {\n  // Private properties\n  var _element;\n\n  // Private functions\n  var _init = function _init() {\n    var scroll = KTUtil.find(_element, '.card-scroll');\n    var cardBody = KTUtil.find(_element, '.card-body');\n    var cardHeader = KTUtil.find(_element, '.card-header');\n    var height = KTLayoutContent.getHeight();\n    height = height - parseInt(KTUtil.actualHeight(cardHeader));\n    height = height - parseInt(KTUtil.css(_element, 'marginTop')) - parseInt(KTUtil.css(_element, 'marginBottom'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'paddingTop')) - parseInt(KTUtil.css(cardBody, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'marginTop')) - parseInt(KTUtil.css(cardBody, 'marginBottom'));\n    height = height - 3;\n    KTUtil.css(scroll, 'height', height + 'px');\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n\n      // Re-calculate on window resize\n      KTUtil.addResizeHandler(function () {\n        _init();\n      });\n    },\n    update: function update() {\n      _init();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutStretchedCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RyZXRjaGVkLWNhcmQuanM/ZWQ4MiJdLCJuYW1lcyI6WyJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJfZWxlbWVudCIsIl9pbml0Iiwic2Nyb2xsIiwiS1RVdGlsIiwiZmluZCIsImNhcmRCb2R5IiwiY2FyZEhlYWRlciIsImhlaWdodCIsIktUTGF5b3V0Q29udGVudCIsImdldEhlaWdodCIsInBhcnNlSW50IiwiYWN0dWFsSGVpZ2h0IiwiY3NzIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxxQkFBcUIsR0FBRyxZQUFXO0VBQ25DO0VBQ0gsSUFBSUMsUUFBUTs7RUFFWjtFQUNBLElBQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFLLEdBQWM7SUFDdEIsSUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ0osUUFBUSxFQUFFLGNBQWMsQ0FBQztJQUNsRCxJQUFJSyxRQUFRLEdBQUdGLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSixRQUFRLEVBQUUsWUFBWSxDQUFDO0lBQ2xELElBQUlNLFVBQVUsR0FBR0gsTUFBTSxDQUFDQyxJQUFJLENBQUNKLFFBQVEsRUFBRSxjQUFjLENBQUM7SUFFdEQsSUFBSU8sTUFBTSxHQUFHQyxlQUFlLENBQUNDLFNBQVMsRUFBRTtJQUV4Q0YsTUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUSxZQUFZLENBQUNMLFVBQVUsQ0FBQyxDQUFDO0lBRTNEQyxNQUFNLEdBQUdBLE1BQU0sR0FBR0csUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQUcsQ0FBQ1osUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEdBQUdVLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFHLENBQUNaLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM5R08sTUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFHLENBQUNaLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHVSxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBRyxDQUFDWixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFaEhPLE1BQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBRyxDQUFDUCxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsR0FBR0ssUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQUcsQ0FBQ1AsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ2hIRSxNQUFNLEdBQUdBLE1BQU0sR0FBR0csUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQUcsQ0FBQ1AsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEdBQUdLLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFHLENBQUNQLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUU5R0UsTUFBTSxHQUFHQSxNQUFNLEdBQUcsQ0FBQztJQUVuQkosTUFBTSxDQUFDUyxHQUFHLENBQUNWLE1BQU0sRUFBRSxRQUFRLEVBQUVLLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDNUMsQ0FBQzs7RUFFRTtFQUNILE9BQU87SUFDTk0sSUFBSSxFQUFFLGNBQVNDLEVBQUUsRUFBRTtNQUNUZCxRQUFRLEdBQUdHLE1BQU0sQ0FBQ1ksT0FBTyxDQUFDRCxFQUFFLENBQUM7TUFFN0IsSUFBSSxDQUFDZCxRQUFRLEVBQUU7UUFDWDtNQUNKOztNQUVBO01BQ1RDLEtBQUssRUFBRTs7TUFFRTtNQUNBRSxNQUFNLENBQUNhLGdCQUFnQixDQUFDLFlBQVc7UUFDM0NmLEtBQUssRUFBRTtNQUNSLENBQUMsQ0FBQztJQUNILENBQUM7SUFFRGdCLE1BQU0sRUFBRSxrQkFBVztNQUNsQmhCLEtBQUssRUFBRTtJQUNSO0VBQ0QsQ0FBQztBQUNGLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQ2lCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIscUJBQXFCO0FBQ3ZDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdHJldGNoZWRDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2Nyb2xsID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcuY2FyZC1zY3JvbGwnKTtcclxuXHRcdHZhciBjYXJkQm9keSA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLmNhcmQtYm9keScpO1xyXG5cdFx0dmFyIGNhcmRIZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5jYXJkLWhlYWRlcicpO1xyXG5cclxuXHRcdHZhciBoZWlnaHQgPSBLVExheW91dENvbnRlbnQuZ2V0SGVpZ2h0KCk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChjYXJkSGVhZGVyKSk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ21hcmdpblRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuXHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEJvZHksICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5LCAnbWFyZ2luVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ21hcmdpbkJvdHRvbScpKTtcclxuXHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSAzO1xyXG5cclxuXHRcdEtUVXRpbC5jc3Moc2Nyb2xsLCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcblx0XHRcdF9pbml0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZS1jYWxjdWxhdGUgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRfaW5pdCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN0cmV0Y2hlZENhcmQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/stretched-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/subheader.js":
/*!********************************************************!*\
  !*** ./resources/metronic/js/layout/base/subheader.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutSubheader = function () {\n  // Private properties\n  var _element;\n\n  // Private functions\n  var _getHeight = function _getHeight() {\n    var height = 0;\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n    return height;\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'subheader-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutSubheader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3ViaGVhZGVyLmpzPzNhNTgiXSwibmFtZXMiOlsiS1RMYXlvdXRTdWJoZWFkZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0VBQy9CO0VBQ0EsSUFBSUMsUUFBUTs7RUFFWjtFQUNBLElBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFVLEdBQWM7SUFDeEIsSUFBSUMsTUFBTSxHQUFHLENBQUM7SUFFZCxJQUFJRixRQUFRLEVBQUU7TUFDVkUsTUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVksQ0FBQ0osUUFBUSxDQUFDO0lBQzFDO0lBRUEsT0FBT0UsTUFBTTtFQUNqQixDQUFDOztFQUVEO0VBQ0gsT0FBTztJQUNORyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ1ROLFFBQVEsR0FBR0csTUFBTSxDQUFDSSxPQUFPLENBQUNELEVBQUUsQ0FBQztNQUU3QixJQUFJLENBQUNOLFFBQVEsRUFBRTtRQUNYO01BQ0o7SUFDVixDQUFDO0lBRUtRLE9BQU8sRUFBRSxtQkFBVztNQUNoQixPQUFPTCxNQUFNLENBQUNNLFFBQVEsQ0FBQ04sTUFBTSxDQUFDTyxPQUFPLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQztJQUMvRCxDQUFDO0lBRURDLFVBQVUsRUFBRSxzQkFBVztNQUNuQixPQUFPWCxRQUFRO0lBQ25CLENBQUM7SUFFRFksU0FBUyxFQUFFLHFCQUFXO01BQ2xCLE9BQU9YLFVBQVUsRUFBRTtJQUN2QjtFQUNQLENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENZLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHZixpQkFBaUI7QUFDbkMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3ViaGVhZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdWJoZWFkZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBpZiAoX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChfZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnc3ViaGVhZGVyLWZpeGVkJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN1YmhlYWRlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/subheader.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/chat.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/layout/extended/chat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Class definition\nvar KTLayoutChat = function () {\n  // Private functions\n  var _init = function _init(element) {\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var cardBodyEl = KTUtil.find(element, '.card-body');\n    var cardHeaderEl = KTUtil.find(element, '.card-header');\n    var cardFooterEl = KTUtil.find(element, '.card-footer');\n    if (!scrollEl) {\n      return;\n    }\n\n    // initialize perfect scrollbar(see:  https://github.com/utatti/perfect-scrollbar)\n    KTUtil.scrollInit(scrollEl, {\n      windowScroll: false,\n      // allow browser scroll when the scroll reaches the end of the side\n      mobileNativeScroll: true,\n      // enable native scroll for mobile\n      desktopNativeScroll: false,\n      // disable native scroll and use custom scroll for desktop\n      resetHeightOnDestroy: true,\n      // reset css height on scroll feature destroyed\n      handleWindowResize: true,\n      // recalculate hight on window resize\n      rememberPosition: true,\n      // remember scroll position in cookie\n      height: function height() {\n        // calculate height\n        var height;\n        if (KTUtil.isBreakpointDown('lg')) {\n          // Mobile mode\n          return KTUtil.hasAttr(scrollEl, 'data-mobile-height') ? parseInt(KTUtil.attr(scrollEl, 'data-mobile-height')) : 400;\n        } else if (KTUtil.isBreakpointUp('lg') && KTUtil.hasAttr(scrollEl, 'data-height')) {\n          // Desktop Mode\n          return parseInt(KTUtil.attr(scrollEl, 'data-height'));\n        } else {\n          height = KTLayoutContent.getHeight();\n          if (scrollEl) {\n            height = height - parseInt(KTUtil.css(scrollEl, 'margin-top')) - parseInt(KTUtil.css(scrollEl, 'margin-bottom'));\n          }\n          if (cardHeaderEl) {\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'margin-top')) - parseInt(KTUtil.css(cardHeaderEl, 'margin-bottom'));\n          }\n          if (cardBodyEl) {\n            height = height - parseInt(KTUtil.css(cardBodyEl, 'padding-top')) - parseInt(KTUtil.css(cardBodyEl, 'padding-bottom'));\n          }\n          if (cardFooterEl) {\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'margin-top')) - parseInt(KTUtil.css(cardFooterEl, 'margin-bottom'));\n          }\n        }\n\n        // Remove additional space\n        height = height - 2;\n        return height;\n      }\n    });\n\n    // attach events\n    KTUtil.on(element, '.card-footer textarea', 'keydown', function (e) {\n      if (e.keyCode == 13) {\n        _handeMessaging(element);\n        e.preventDefault();\n        return false;\n      }\n    });\n    KTUtil.on(element, '.card-footer .chat-send', 'click', function (e) {\n      _handeMessaging(element);\n    });\n  };\n  var _handeMessaging = function _handeMessaging(element) {\n    var messagesEl = KTUtil.find(element, '.messages');\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var textarea = KTUtil.find(element, 'textarea');\n    if (textarea.value.length === 0) {\n      return;\n    }\n    var node = document.createElement(\"DIV\");\n    KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-end');\n    var html = '';\n    html += '<div class=\"d-flex align-items-center\">';\n    html += '\t<div>';\n    html += '\t\t<span class=\"text-muted font-size-sm\">2 Hours</span>';\n    html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">You</a>';\n    html += '\t</div>';\n    html += '\t<div class=\"symbol symbol-circle symbol-40 ml-3\">';\n    html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n    html += '\t</div>';\n    html += '</div>';\n    html += '<div class=\"mt-2 rounded p-5 bg-light-primary text-dark-50 font-weight-bold font-size-lg text-right max-w-400px\">' + textarea.value + '</div>';\n    KTUtil.setHTML(node, html);\n    messagesEl.appendChild(node);\n    textarea.value = '';\n    scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n    var ps;\n    if (ps = KTUtil.data(scrollEl).get('ps')) {\n      ps.update();\n    }\n    setTimeout(function () {\n      var node = document.createElement(\"DIV\");\n      KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-start');\n      var html = '';\n      html += '<div class=\"d-flex align-items-center\">';\n      html += '\t<div class=\"symbol symbol-circle symbol-40 mr-3\">';\n      html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n      html += '\t</div>';\n      html += '\t<div>';\n      html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">Matt Pears</a>';\n      html += '\t\t<span class=\"text-muted font-size-sm\">Just now</span>';\n      html += '\t</div>';\n      html += '</div>';\n      html += '<div class=\"mt-2 rounded p-5 bg-light-success text-dark-50 font-weight-bold font-size-lg text-left max-w-400px\">';\n      html += 'Right before vacation season we have the next Big Deal for you.';\n      html += '</div>';\n      KTUtil.setHTML(node, html);\n      messagesEl.appendChild(node);\n      textarea.value = '';\n      scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n      var ps;\n      if (ps = KTUtil.data(scrollEl).get('ps')) {\n        ps.update();\n      }\n    }, 2000);\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      // Init modal chat example\n      _init(KTUtil.getById(id));\n\n      // Trigger click to show popup modal chat on page load\n      if (encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com') {\n        setTimeout(function () {\n          if (!KTCookie.getCookie('kt_app_chat_shown')) {\n            var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n\n            KTCookie.setCookie('kt_app_chat_shown', 1, {\n              expires: expires\n            });\n            if (KTUtil.getById('kt_app_chat_launch_btn')) {\n              KTUtil.getById('kt_app_chat_launch_btn').click();\n            }\n          }\n        }, 2000);\n      }\n    },\n    setup: function setup(element) {\n      _init(element);\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutChat;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/chat.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/demo-panel.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/demo-panel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutDemoPanel = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_demo_panel_close',\n      toggleBy: 'kt_demo_panel_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n    if (typeof offcanvas !== 'undefined' && offcanvas.length === 0) {\n      offcanvas.on('hide', function () {\n        var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n      });\n    }\n  };\n  var _remind = function _remind() {\n    if (!(encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com')) {\n      return;\n    }\n    setTimeout(function () {\n      if (!KTCookie.getCookie('kt_demo_panel_shown')) {\n        var expires = new Date(new Date().getTime() + 15 * 60 * 1000); // expire in 15 minutes from now\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n        if (typeof _offcanvasObject !== 'undefined') {\n          _offcanvasObject.show();\n        }\n      }\n    }, 4000);\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n\n      // Remind\n      _remind();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutDemoPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/demo-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/examples.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/examples.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutExamples = function () {\n  var initDefaultMode = function initDefaultMode(element) {\n    var elements = element;\n    if (typeof elements === 'undefined') {\n      elements = document.querySelectorAll('.example:not(.example-compact):not(.example-hover):not(.example-basic)');\n    }\n    for (var i = 0; i < elements.length; ++i) {\n      var example = elements[i];\n      var copy = KTUtil.find(example, '.example-copy');\n      var clipboard = new ClipboardJS(copy, {\n        target: function target(trigger) {\n          var example = trigger.closest('.example');\n          var el = KTUtil.find(example, '.example-code .tab-pane.active');\n          if (!el) {\n            el = KTUtil.find(example, '.example-code');\n          }\n          return el;\n        }\n      });\n      clipboard.on('success', function (e) {\n        KTUtil.addClass(e.trigger, 'example-copied');\n        e.clearSelection();\n        setTimeout(function () {\n          KTUtil.removeClass(e.trigger, 'example-copied');\n        }, 2000);\n      });\n    }\n  };\n  var initCompactMode = function initCompactMode(element) {\n    var example, code, toggle, copy, clipboard;\n    var elements = element;\n    if (typeof elements === 'undefined') {\n      var elements = document.querySelectorAll('.example.example-compact');\n    }\n    for (var i = 0; i < elements.length; ++i) {\n      var example = elements[i];\n      var toggle = KTUtil.find(example, '.example-toggle');\n      var copy = KTUtil.find(example, '.example-copy');\n\n      // Handle toggle\n      KTUtil.addEvent(toggle, 'click', function () {\n        var example = this.closest('.example');\n        var code = KTUtil.find(example, '.example-code');\n        var the = this;\n        if (KTUtil.hasClass(this, 'example-toggled')) {\n          KTUtil.slideUp(code, 300, function () {\n            KTUtil.removeClass(the, 'example-toggled');\n            KTUtil.removeClass(code, 'example-code-on');\n            KTUtil.hide(code);\n          });\n        } else {\n          KTUtil.addClass(code, 'example-code-on');\n          KTUtil.addClass(this, 'example-toggled');\n          KTUtil.slideDown(code, 300, function () {\n            KTUtil.show(code);\n          });\n        }\n      });\n\n      // Handle copy\n      var clipboard = new ClipboardJS(copy, {\n        target: function target(trigger) {\n          var example = trigger.closest('.example');\n          var el = KTUtil.find(example, '.example-code .tab-pane.active');\n          if (!el) {\n            el = KTUtil.find(example, '.example-code');\n          }\n          return el;\n        }\n      });\n      clipboard.on('success', function (e) {\n        KTUtil.addClass(e.trigger, 'example-copied');\n        e.clearSelection();\n        setTimeout(function () {\n          KTUtil.removeClass(e.trigger, 'example-copied');\n        }, 2000);\n      });\n    }\n  };\n  return {\n    init: function init(element, options) {\n      initDefaultMode(element);\n      initCompactMode(element);\n    }\n  };\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTLayoutExamples;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/examples.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-actions.js":
/*!****************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-actions.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickActions = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_actions_close',\n      toggleBy: 'kt_quick_actions_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickActions;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWFjdGlvbnMuanM/NzFlNyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQWN0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsb0JBQW9CLEdBQUcsWUFBVztFQUNsQztFQUNBLElBQUlDLFFBQVE7RUFDWixJQUFJQyxnQkFBZ0I7O0VBRXBCO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUNuQixJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFDdkQsSUFBSU0sT0FBTyxHQUFHRixNQUFNLENBQUNDLElBQUksQ0FBQ0wsUUFBUSxFQUFFLG9CQUFvQixDQUFDO0lBRXpEQyxnQkFBZ0IsR0FBRyxJQUFJTSxXQUFXLENBQUNQLFFBQVEsRUFBRTtNQUN6Q1EsT0FBTyxFQUFFLElBQUk7TUFDYkMsU0FBUyxFQUFFLFdBQVc7TUFDdEJDLFNBQVMsRUFBRSxPQUFPO01BQ2xCQyxPQUFPLEVBQUUsd0JBQXdCO01BQ2pDQyxRQUFRLEVBQUU7SUFDZCxDQUFDLENBQUM7SUFFRlIsTUFBTSxDQUFDUyxVQUFVLENBQUNQLE9BQU8sRUFBRTtNQUN2QlEsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsb0JBQW9CLEVBQUUsSUFBSTtNQUMxQkMsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsTUFBTSxFQUFFLGtCQUFXO1FBQ2YsSUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2UsV0FBVyxFQUFFLENBQUNGLE1BQU0sQ0FBQztRQUVsRCxJQUFJZCxNQUFNLEVBQUU7VUFDUmMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZ0IsWUFBWSxDQUFDakIsTUFBTSxDQUFDLENBQUM7VUFDdkRjLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2xCLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUMzRGMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBRyxDQUFDbEIsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xFO1FBRUEsSUFBSUcsT0FBTyxFQUFFO1VBQ1RXLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2YsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzVEVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNmLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRTtRQUVBVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDOURpQixNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakVpQixNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFDO1FBRW5CLE9BQU9BLE1BQU07TUFDakI7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDOztFQUVEO0VBQ0EsT0FBTztJQUNISyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ2Z2QixRQUFRLEdBQUdJLE1BQU0sQ0FBQ29CLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ3ZCLFFBQVEsRUFBRTtRQUNYO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUVEdUIsVUFBVSxFQUFFLHNCQUFXO01BQ25CLE9BQU96QixRQUFRO0lBQ25CO0VBQ0osQ0FBQztBQUNMLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQzBCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHNUIsb0JBQW9CO0FBQ3RDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1hY3Rpb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRRdWlja0FjdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG5cclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX2FjdGlvbnNfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX2FjdGlvbnNfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChjb250ZW50LCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSk7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja0FjdGlvbnM7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-actions.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-cart.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-cart.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickCartPanel = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_cart_close',\n      toggleBy: 'kt_quick_cart_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickCartPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanM/ZGMwMCJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQ2FydFBhbmVsIiwiX2VsZW1lbnQiLCJfb2ZmY2FudmFzT2JqZWN0IiwiX2luaXQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJoZWFkZXIiLCJLVFV0aWwiLCJmaW5kIiwiY29udGVudCIsIndyYXBwZXIiLCJmb290ZXIiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxzQkFBc0IsR0FBRyxZQUFXO0VBQ3BDO0VBQ0EsSUFBSUMsUUFBUTtFQUNaLElBQUlDLGdCQUFnQjs7RUFFcEI7RUFDQSxJQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBSyxHQUFjO0lBQ25CRCxnQkFBZ0IsR0FBRyxJQUFJRSxXQUFXLENBQUNILFFBQVEsRUFBRTtNQUN6Q0ksT0FBTyxFQUFFLElBQUk7TUFDYkMsU0FBUyxFQUFFLFdBQVc7TUFDdEJDLFNBQVMsRUFBRSxPQUFPO01BQ2xCQyxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxRQUFRLEVBQUU7SUFDZCxDQUFDLENBQUM7SUFFRixJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDWCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFDdkQsSUFBSVksT0FBTyxHQUFHRixNQUFNLENBQUNDLElBQUksQ0FBQ1gsUUFBUSxFQUFFLG9CQUFvQixDQUFDO0lBQ3pELElBQUlhLE9BQU8sR0FBR0gsTUFBTSxDQUFDQyxJQUFJLENBQUNYLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQztJQUN6RCxJQUFJYyxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDWCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFFdkRVLE1BQU0sQ0FBQ0ssVUFBVSxDQUFDRixPQUFPLEVBQUU7TUFDdkJHLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLG9CQUFvQixFQUFFLElBQUk7TUFDMUJDLGtCQUFrQixFQUFFLElBQUk7TUFDeEJDLE1BQU0sRUFBRSxrQkFBVztRQUNmLElBQUlBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNXLFdBQVcsRUFBRSxDQUFDRixNQUFNLENBQUM7UUFFbEQsSUFBSVYsTUFBTSxFQUFFO1VBQ1JVLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ1ksWUFBWSxDQUFDYixNQUFNLENBQUMsQ0FBQztVQUN2RFUsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFHLENBQUNkLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUMzRFUsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFHLENBQUNkLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRTtRQUVBLElBQUlHLE9BQU8sRUFBRTtVQUNUTyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNhLEdBQUcsQ0FBQ1gsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzVETyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNhLEdBQUcsQ0FBQ1gsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ25FO1FBRUEsSUFBSUMsT0FBTyxFQUFFO1VBQ1RNLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDVixPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7VUFDNURNLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDVixPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbkU7UUFFQSxJQUFJQyxNQUFNLEVBQUU7VUFDUkssTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDWSxZQUFZLENBQUNSLE1BQU0sQ0FBQyxDQUFDO1VBQ3ZESyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNhLEdBQUcsQ0FBQ1QsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzNESyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNhLEdBQUcsQ0FBQ1QsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xFO1FBRUFLLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDdkIsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzlEbUIsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFHLENBQUN2QixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakVtQixNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFDO1FBRW5CLE9BQU9BLE1BQU07TUFDakI7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDOztFQUVEO0VBQ0EsT0FBTztJQUNISyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ2Z6QixRQUFRLEdBQUdVLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ3pCLFFBQVEsRUFBRTtRQUNYO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ1g7RUFDSixDQUFDO0FBQ0wsQ0FBQyxFQUFFOztBQUVIO0FBQ0EsSUFBSSxJQUE2QixFQUFFO0VBQ2xDeUIsTUFBTSxDQUFDQyxPQUFPLEdBQUc3QixzQkFBc0I7QUFDeEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrQ2FydFBhbmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX2NhcnRfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX2NhcnRfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy13cmFwcGVyJyk7XHJcbiAgICAgICAgdmFyIGZvb3RlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1mb290ZXInKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQod3JhcHBlciwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyh3cmFwcGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3Mod3JhcHBlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb290ZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja0NhcnRQYW5lbDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-cart.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-notifications.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-notifications.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickNotifications = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_notifications_close',\n      toggleBy: 'kt_quick_notifications_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickNotifications;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLW5vdGlmaWNhdGlvbnMuanM/M2FhMyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsMEJBQTBCLEdBQUcsWUFBVztFQUN4QztFQUNBLElBQUlDLFFBQVE7RUFDWixJQUFJQyxnQkFBZ0I7O0VBRXBCO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUNuQixJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFDdkQsSUFBSU0sT0FBTyxHQUFHRixNQUFNLENBQUNDLElBQUksQ0FBQ0wsUUFBUSxFQUFFLG9CQUFvQixDQUFDO0lBRXpEQyxnQkFBZ0IsR0FBRyxJQUFJTSxXQUFXLENBQUNQLFFBQVEsRUFBRTtNQUN6Q1EsT0FBTyxFQUFFLElBQUk7TUFDYkMsU0FBUyxFQUFFLFdBQVc7TUFDdEJDLFNBQVMsRUFBRSxPQUFPO01BQ2xCQyxPQUFPLEVBQUUsOEJBQThCO01BQ3ZDQyxRQUFRLEVBQUU7SUFDZCxDQUFDLENBQUM7SUFFRlIsTUFBTSxDQUFDUyxVQUFVLENBQUNQLE9BQU8sRUFBRTtNQUN2QlEsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsb0JBQW9CLEVBQUUsSUFBSTtNQUMxQkMsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsTUFBTSxFQUFFLGtCQUFXO1FBQ2YsSUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2UsV0FBVyxFQUFFLENBQUNGLE1BQU0sQ0FBQztRQUVsRCxJQUFJZCxNQUFNLEVBQUU7VUFDUmMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZ0IsWUFBWSxDQUFDakIsTUFBTSxDQUFDLENBQUM7VUFDdkRjLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2xCLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUMzRGMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBRyxDQUFDbEIsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xFO1FBRUEsSUFBSUcsT0FBTyxFQUFFO1VBQ1RXLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2YsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzVEVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNmLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRTtRQUVBVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDOURpQixNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakVpQixNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFDO1FBRW5CLE9BQU9BLE1BQU07TUFDakI7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDOztFQUVEO0VBQ0EsT0FBTztJQUNISyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ2Z2QixRQUFRLEdBQUdJLE1BQU0sQ0FBQ29CLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ3ZCLFFBQVEsRUFBRTtRQUNYO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUVEdUIsVUFBVSxFQUFFLHNCQUFXO01BQ25CLE9BQU96QixRQUFRO0lBQ25CO0VBQ0osQ0FBQztBQUNMLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQzBCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHNUIsMEJBQTBCO0FBQzVDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1ub3RpZmljYXRpb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRRdWlja05vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG5cclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX25vdGlmaWNhdGlvbnNfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX25vdGlmaWNhdGlvbnNfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChjb250ZW50LCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSk7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja05vdGlmaWNhdGlvbnM7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-notifications.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-panel.js":
/*!**************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickPanel = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n  var _notificationsElement;\n  var _logsElement;\n  var _settingsElement;\n\n  // Private functions\n  var _getContentHeight = function _getContentHeight() {\n    var height;\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var height = parseInt(KTUtil.getViewPort().height);\n    if (header) {\n      height = height - parseInt(KTUtil.actualHeight(header));\n      height = height - parseInt(KTUtil.css(header, 'marginTop'));\n      height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n    }\n    if (content) {\n      height = height - parseInt(KTUtil.css(content, 'marginTop'));\n      height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n    }\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - 2;\n    return height;\n  };\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_panel_close',\n      toggleBy: 'kt_quick_panel_toggle'\n    });\n  };\n  var _initNotifications = function _initNotifications() {\n    KTUtil.scrollInit(_notificationsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n  var _initLogs = function _initLogs() {\n    KTUtil.scrollInit(_logsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n  var _initSettings = function _initSettings() {\n    KTUtil.scrollInit(_settingsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n  var _updateScrollbars = function _updateScrollbars() {\n    $(_element).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n      KTUtil.scrollUpdate(_notificationsElement);\n      KTUtil.scrollUpdate(_logsElement);\n      KTUtil.scrollUpdate(_settingsElement);\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _notificationsElement = KTUtil.getById('kt_quick_panel_notifications');\n      _logsElement = KTUtil.getById('kt_quick_panel_logs');\n      _settingsElement = KTUtil.getById('kt_quick_panel_settings');\n      _init();\n      _initNotifications();\n      _initLogs();\n      _initSettings();\n      _updateScrollbars();\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-search.js":
/*!***************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-search.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickSearch = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var form = KTUtil.find(_element, '.quick-search-form');\n    var results = KTUtil.find(_element, '.quick-search-wrapper');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_search_close',\n      toggleBy: 'kt_quick_search_toggle'\n    });\n    KTUtil.scrollInit(results, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        if (results) {\n          height = height - parseInt(KTUtil.actualHeight(form));\n          height = height - parseInt(KTUtil.css(form, 'marginTop'));\n          height = height - parseInt(KTUtil.css(form, 'marginBottom'));\n          height = height - parseInt(KTUtil.css(results, 'marginTop'));\n          height = height - parseInt(KTUtil.css(results, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcz8xYzdlIl0sIm5hbWVzIjpbIktUTGF5b3V0UXVpY2tTZWFyY2giLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsImhlYWRlciIsIktUVXRpbCIsImZpbmQiLCJjb250ZW50IiwiZm9ybSIsInJlc3VsdHMiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztFQUNqQztFQUNBLElBQUlDLFFBQVE7RUFDWixJQUFJQyxnQkFBZ0I7O0VBRXBCO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUNuQixJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFDdkQsSUFBSU0sT0FBTyxHQUFHRixNQUFNLENBQUNDLElBQUksQ0FBQ0wsUUFBUSxFQUFFLG9CQUFvQixDQUFDO0lBQ3pELElBQUlPLElBQUksR0FBR0gsTUFBTSxDQUFDQyxJQUFJLENBQUNMLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQztJQUN0RCxJQUFJUSxPQUFPLEdBQUdKLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRLEVBQUUsdUJBQXVCLENBQUM7SUFFNURDLGdCQUFnQixHQUFHLElBQUlRLFdBQVcsQ0FBQ1QsUUFBUSxFQUFFO01BQ3pDVSxPQUFPLEVBQUUsSUFBSTtNQUNiQyxTQUFTLEVBQUUsV0FBVztNQUN0QkMsU0FBUyxFQUFFLE9BQU87TUFDbEJDLE9BQU8sRUFBRSx1QkFBdUI7TUFDaENDLFFBQVEsRUFBRTtJQUNkLENBQUMsQ0FBQztJQUVGVixNQUFNLENBQUNXLFVBQVUsQ0FBQ1AsT0FBTyxFQUFFO01BQ3ZCUSxnQkFBZ0IsRUFBRSxJQUFJO01BQ3RCQyxvQkFBb0IsRUFBRSxJQUFJO01BQzFCQyxrQkFBa0IsRUFBRSxJQUFJO01BQ3hCQyxNQUFNLEVBQUUsa0JBQVc7UUFDZixJQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ2lCLFdBQVcsRUFBRSxDQUFDRixNQUFNLENBQUM7UUFFbEQsSUFBSWhCLE1BQU0sRUFBRTtVQUNSZ0IsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ2tCLFlBQVksQ0FBQ25CLE1BQU0sQ0FBQyxDQUFDO1VBQ3ZEZ0IsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ3BCLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUMzRGdCLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNoQixNQUFNLENBQUNtQixHQUFHLENBQUNwQixNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbEU7UUFFQSxJQUFJRyxPQUFPLEVBQUU7VUFDVGEsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ2pCLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUM1RGEsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ2pCLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRTtRQUVBLElBQUlFLE9BQU8sRUFBRTtVQUNUVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDa0IsWUFBWSxDQUFDZixJQUFJLENBQUMsQ0FBQztVQUNyRFksTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ2hCLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztVQUN6RFksTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ2hCLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztVQUU1RFksTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ2YsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzVEVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDbUIsR0FBRyxDQUFDZixPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbkU7UUFFQVcsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQUcsQ0FBQ3ZCLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM5RG1CLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNoQixNQUFNLENBQUNtQixHQUFHLENBQUN2QixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakVtQixNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFDO1FBRW5CLE9BQU9BLE1BQU07TUFDakI7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDOztFQUVEO0VBQ0EsT0FBTztJQUNISyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ2Z6QixRQUFRLEdBQUdJLE1BQU0sQ0FBQ3NCLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ3pCLFFBQVEsRUFBRTtRQUNYO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUVEeUIsVUFBVSxFQUFFLHNCQUFXO01BQ25CLE9BQU8zQixRQUFRO0lBQ25CO0VBQ0osQ0FBQztBQUNMLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQzRCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHOUIsbUJBQW1CO0FBQ3JDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1zZWFyY2guanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrU2VhcmNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuICAgICAgICB2YXIgZm9ybSA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLnF1aWNrLXNlYXJjaC1mb3JtJyk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5xdWljay1zZWFyY2gtd3JhcHBlcicpO1xyXG5cclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX3NlYXJjaF9jbG9zZScsXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3RfcXVpY2tfc2VhcmNoX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQocmVzdWx0cywge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb3JtKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoZm9ybSwgJ21hcmdpbkJvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhyZXN1bHRzLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocmVzdWx0cywgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFF1aWNrU2VhcmNoO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-user.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickUser = function () {\n  // Private properties\n  var _element;\n  var _offcanvasObject;\n\n  // Private functions\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_user_close',\n      toggleBy: 'kt_quick_user_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutQuickUser;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXVzZXIuanM/ODA5YSJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrVXNlciIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsaUJBQWlCLEdBQUcsWUFBVztFQUMvQjtFQUNBLElBQUlDLFFBQVE7RUFDWixJQUFJQyxnQkFBZ0I7O0VBRXBCO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQUssR0FBYztJQUNuQixJQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRLEVBQUUsbUJBQW1CLENBQUM7SUFDdkQsSUFBSU0sT0FBTyxHQUFHRixNQUFNLENBQUNDLElBQUksQ0FBQ0wsUUFBUSxFQUFFLG9CQUFvQixDQUFDO0lBRXpEQyxnQkFBZ0IsR0FBRyxJQUFJTSxXQUFXLENBQUNQLFFBQVEsRUFBRTtNQUN6Q1EsT0FBTyxFQUFFLElBQUk7TUFDYkMsU0FBUyxFQUFFLFdBQVc7TUFDdEJDLFNBQVMsRUFBRSxPQUFPO01BQ2xCQyxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxRQUFRLEVBQUU7SUFDZCxDQUFDLENBQUM7SUFFRlIsTUFBTSxDQUFDUyxVQUFVLENBQUNQLE9BQU8sRUFBRTtNQUN2QlEsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsb0JBQW9CLEVBQUUsSUFBSTtNQUMxQkMsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsTUFBTSxFQUFFLGtCQUFXO1FBQ2YsSUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2UsV0FBVyxFQUFFLENBQUNGLE1BQU0sQ0FBQztRQUVsRCxJQUFJZCxNQUFNLEVBQUU7VUFDUmMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZ0IsWUFBWSxDQUFDakIsTUFBTSxDQUFDLENBQUM7VUFDdkRjLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2xCLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztVQUMzRGMsTUFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBRyxDQUFDbEIsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2xFO1FBRUEsSUFBSUcsT0FBTyxFQUFFO1VBQ1RXLE1BQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQ2YsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1VBQzVEVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNmLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRTtRQUVBVyxNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDOURpQixNQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFHLENBQUNyQixRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFakVpQixNQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFDO1FBRW5CLE9BQU9BLE1BQU07TUFDakI7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDOztFQUVEO0VBQ0EsT0FBTztJQUNISyxJQUFJLEVBQUUsY0FBU0MsRUFBRSxFQUFFO01BQ2Z2QixRQUFRLEdBQUdJLE1BQU0sQ0FBQ29CLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ3ZCLFFBQVEsRUFBRTtRQUNYO01BQ0o7O01BRUE7TUFDQUUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUVEdUIsVUFBVSxFQUFFLHNCQUFXO01BQ25CLE9BQU96QixRQUFRO0lBQ25CO0VBQ0osQ0FBQztBQUNMLENBQUMsRUFBRTs7QUFFSDtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNsQzBCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHNUIsaUJBQWlCO0FBQ25DIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay11c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRRdWlja1VzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG5cclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX3VzZXJfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX3VzZXJfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChjb250ZW50LCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSk7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja1VzZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-user.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/scrolltop.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/scrolltop.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutScrolltop = function () {\n  // Private properties\n  var _element;\n  var _object;\n\n  // Private functions\n  var _init = function _init() {\n    _object = new KTScrolltop(_element, {\n      offset: 300,\n      speed: 600\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      if (!_element) {\n        return;\n      }\n\n      // Initialize\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}();\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3Njcm9sbHRvcC5qcz8yOTUyIl0sIm5hbWVzIjpbIktUTGF5b3V0U2Nyb2xsdG9wIiwiX2VsZW1lbnQiLCJfb2JqZWN0IiwiX2luaXQiLCJLVFNjcm9sbHRvcCIsIm9mZnNldCIsInNwZWVkIiwiaW5pdCIsImlkIiwiS1RVdGlsIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0VBQy9CO0VBQ0EsSUFBSUMsUUFBUTtFQUNaLElBQUlDLE9BQU87O0VBRVg7RUFDQSxJQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBSyxHQUFjO0lBQ25CRCxPQUFPLEdBQUcsSUFBSUUsV0FBVyxDQUFDSCxRQUFRLEVBQUU7TUFDbENJLE1BQU0sRUFBRSxHQUFHO01BQ1hDLEtBQUssRUFBRTtJQUNULENBQUMsQ0FBQztFQUNOLENBQUM7O0VBRUQ7RUFDSCxPQUFPO0lBQ05DLElBQUksRUFBRSxjQUFTQyxFQUFFLEVBQUU7TUFDVFAsUUFBUSxHQUFHUSxNQUFNLENBQUNDLE9BQU8sQ0FBQ0YsRUFBRSxDQUFDO01BRTdCLElBQUksQ0FBQ1AsUUFBUSxFQUFFO1FBQ1g7TUFDSjs7TUFFQTtNQUNBRSxLQUFLLEVBQUU7SUFDakIsQ0FBQztJQUVLUSxVQUFVLEVBQUUsc0JBQVc7TUFDbkIsT0FBT1YsUUFBUTtJQUNuQjtFQUNQLENBQUM7QUFDRixDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLElBQTZCLEVBQUU7RUFDbENXLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHYixpQkFBaUI7QUFDbkMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3Njcm9sbHRvcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0U2Nyb2xsdG9wID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2JqZWN0ID0gbmV3IEtUU2Nyb2xsdG9wKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICBvZmZzZXQ6IDMwMCxcclxuICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0U2Nyb2xsdG9wO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/search.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/search.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//\n// Handle User Quick Search For Dropdown, Inline and Offcanvas Search Panels\n//\nvar KTLayoutSearch = function KTLayoutSearch() {\n  // Private properties\n  var _target;\n  var _form;\n  var _input;\n  var _closeIcon;\n  var _resultWrapper;\n  var _resultDropdown;\n  var _resultDropdownToggle;\n  var _closeIconContainer;\n  var _inputGroup;\n  var _query = '';\n  var _hasResult = false;\n  var _timeout = false;\n  var _isProcessing = false;\n  var _requestTimeout = 200; // ajax request fire timeout in milliseconds\n  var _spinnerClass = 'spinner spinner-sm spinner-primary';\n  var _resultClass = 'quick-search-has-result';\n  var _minLength = 2;\n\n  // Private functions\n  var _showProgress = function _showProgress() {\n    _isProcessing = true;\n    KTUtil.addClass(_closeIconContainer, _spinnerClass);\n    if (_closeIcon) {\n      KTUtil.hide(_closeIcon);\n    }\n  };\n  var _hideProgress = function _hideProgress() {\n    _isProcessing = false;\n    KTUtil.removeClass(_closeIconContainer, _spinnerClass);\n    if (_closeIcon) {\n      if (_input.value.length < _minLength) {\n        KTUtil.hide(_closeIcon);\n      } else {\n        KTUtil.show(_closeIcon, 'flex');\n      }\n    }\n  };\n  var _showDropdown = function _showDropdown() {\n    if (_resultDropdownToggle && !KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n      $(_resultDropdownToggle).dropdown('update');\n    }\n  };\n  var _hideDropdown = function _hideDropdown() {\n    if (_resultDropdownToggle && KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n    }\n  };\n  var _processSearch = function _processSearch() {\n    if (_hasResult && _query === _input.value) {\n      _hideProgress();\n      KTUtil.addClass(_target, _resultClass);\n      _showDropdown();\n      KTUtil.scrollUpdate(_resultWrapper);\n      return;\n    }\n    _query = _input.value;\n    KTUtil.removeClass(_target, _resultClass);\n    _showProgress();\n    _hideDropdown();\n    setTimeout(function () {\n      $.ajax({\n        url: HOST_URL + '',\n        data: {\n          query: _query\n        },\n        dataType: 'html',\n        success: function success(res) {\n          _hasResult = true;\n          _hideProgress();\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, res);\n          _showDropdown();\n          KTUtil.scrollUpdate(_resultWrapper);\n        },\n        error: function error(res) {\n          _hasResult = false;\n          _hideProgress();\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, '<span class=\"font-weight-bold text-muted\">Connection error. Please try again later..</div>');\n          _showDropdown();\n          KTUtil.scrollUpdate(_resultWrapper);\n        }\n      });\n    }, 1000);\n  };\n  var _handleCancel = function _handleCancel(e) {\n    _input.value = '';\n    _query = '';\n    _hasResult = false;\n    KTUtil.hide(_closeIcon);\n    KTUtil.removeClass(_target, _resultClass);\n    _hideDropdown();\n  };\n  var _handleSearch = function _handleSearch() {\n    if (_input.value.length < _minLength) {\n      _hideProgress();\n      _hideDropdown();\n      return;\n    }\n    if (_isProcessing == true) {\n      return;\n    }\n    if (_timeout) {\n      clearTimeout(_timeout);\n    }\n    _timeout = setTimeout(function () {\n      _processSearch();\n    }, _requestTimeout);\n  };\n\n  // Public methods\n  return {\n    init: function init(id) {\n      _target = KTUtil.getById(id);\n      if (!_target) {\n        return;\n      }\n      _form = KTUtil.find(_target, '.quick-search-form');\n      _input = KTUtil.find(_target, '.form-control');\n      _closeIcon = KTUtil.find(_target, '.quick-search-close');\n      _resultWrapper = KTUtil.find(_target, '.quick-search-wrapper');\n      _resultDropdown = KTUtil.find(_target, '.dropdown-menu');\n      _resultDropdownToggle = KTUtil.find(_target, '[data-toggle=\"dropdown\"]');\n      _inputGroup = KTUtil.find(_target, '.input-group');\n      _closeIconContainer = KTUtil.find(_target, '.input-group .input-group-append');\n\n      // Attach input keyup handler\n      KTUtil.addEvent(_input, 'keyup', _handleSearch);\n      KTUtil.addEvent(_input, 'focus', _handleSearch);\n\n      // Prevent enter click\n      _form.onkeypress = function (e) {\n        var key = e.charCode || e.keyCode || 0;\n        if (key == 13) {\n          e.preventDefault();\n        }\n      };\n      KTUtil.addEvent(_closeIcon, 'click', _handleCancel);\n    }\n  };\n};\n\n// Webpack support\nif (true) {\n  module.exports = KTLayoutSearch;\n}\nvar KTLayoutSearchInline = KTLayoutSearch;\nvar KTLayoutSearchOffcanvas = KTLayoutSearch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/initialize.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/initialize.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Initialization\nKTUtil.ready(function () {\n  ////////////////////////////////////////////////////\n  // Layout Base Partials(mandatory for core layout)//\n  ////////////////////////////////////////////////////\n\n  // Init Desktop & Mobile Headers\n  if (typeof KTLayoutHeader !== 'undefined') {\n    KTLayoutHeader.init('kt_header', 'kt_header_mobile');\n  }\n\n  // Init Header Menu\n  if (typeof KTLayoutHeaderMenu !== 'undefined') {\n    KTLayoutHeaderMenu.init('kt_header_menu', 'kt_header_menu_wrapper');\n  }\n\n  // Init Header Topbar For Mobile Mode\n  if (typeof KTLayoutHeaderTopbar !== 'undefined') {\n    KTLayoutHeaderTopbar.init('kt_header_mobile_topbar_toggle');\n  }\n\n  // Init Brand Panel For Logo\n  if (typeof KTLayoutBrand !== 'undefined') {\n    KTLayoutBrand.init('kt_brand');\n  }\n\n  // Init Aside\n  if (typeof KTLayoutAside !== 'undefined') {\n    KTLayoutAside.init('kt_aside');\n  }\n\n  // Init Aside Menu Toggle\n  if (typeof KTLayoutAsideToggle !== 'undefined') {\n    KTLayoutAsideToggle.init('kt_aside_toggle');\n  }\n\n  // Init Aside Menu\n  if (typeof KTLayoutAsideMenu !== 'undefined') {\n    KTLayoutAsideMenu.init('kt_aside_menu');\n  }\n\n  // Init Subheader\n  if (typeof KTLayoutSubheader !== 'undefined') {\n    KTLayoutSubheader.init('kt_subheader');\n  }\n\n  // Init Content\n  if (typeof KTLayoutContent !== 'undefined') {\n    KTLayoutContent.init('kt_content');\n  }\n\n  // Init Footer\n  if (typeof KTLayoutFooter !== 'undefined') {\n    KTLayoutFooter.init('kt_footer');\n  }\n\n  //////////////////////////////////////////////\n  // Layout Extended Partials(optional to use)//\n  //////////////////////////////////////////////\n\n  // Init Scrolltop\n  if (typeof KTLayoutScrolltop !== 'undefined') {\n    KTLayoutScrolltop.init('kt_scrolltop');\n  }\n\n  // Init Sticky Card\n  if (typeof KTLayoutStickyCard !== 'undefined') {\n    KTLayoutStickyCard.init('kt_page_sticky_card');\n  }\n\n  // Init Stretched Card\n  if (typeof KTLayoutStretchedCard !== 'undefined') {\n    KTLayoutStretchedCard.init('kt_page_stretched_card');\n  }\n\n  // Init Code Highlighter & Preview Blocks(used to demonstrate the theme features)\n  if (typeof KTLayoutExamples !== 'undefined') {\n    KTLayoutExamples.init();\n  }\n\n  // Init Demo Selection Panel\n  if (typeof KTLayoutDemoPanel !== 'undefined') {\n    KTLayoutDemoPanel.init('kt_demo_panel');\n  }\n\n  // Init Chat App(quick modal chat)\n  if (typeof KTLayoutChat !== 'undefined') {\n    KTLayoutChat.init('kt_chat_modal');\n  }\n\n  // Init Quick Actions Offcanvas Panel\n  if (typeof KTLayoutQuickActions !== 'undefined') {\n    KTLayoutQuickActions.init('kt_quick_actions');\n  }\n\n  // Init Quick Notifications Offcanvas Panel\n  if (typeof KTLayoutQuickNotifications !== 'undefined') {\n    KTLayoutQuickNotifications.init('kt_quick_notifications');\n  }\n\n  // Init Quick Offcanvas Panel\n  if (typeof KTLayoutQuickPanel !== 'undefined') {\n    KTLayoutQuickPanel.init('kt_quick_panel');\n  }\n\n  // Init Quick User Panel\n  if (typeof KTLayoutQuickUser !== 'undefined') {\n    KTLayoutQuickUser.init('kt_quick_user');\n  }\n\n  // Init Quick Search Panel\n  if (typeof KTLayoutQuickSearch !== 'undefined') {\n    KTLayoutQuickSearch.init('kt_quick_search');\n  }\n\n  // Init Quick Cart Panel\n  if (typeof KTLayoutQuickCartPanel !== 'undefined') {\n    KTLayoutQuickCartPanel.init('kt_quick_cart');\n  }\n\n  // Init Search For Quick Search Dropdown\n  if (typeof KTLayoutSearch !== 'undefined') {\n    KTLayoutSearch().init('kt_quick_search_dropdown');\n  }\n\n  // Init Search For Quick Search Offcanvas Panel\n  if (typeof KTLayoutSearchOffcanvas !== 'undefined') {\n    KTLayoutSearchOffcanvas().init('kt_quick_search_offcanvas');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/initialize.js\n");

/***/ }),

/***/ 2:
/*!***************************************!*\
  !*** multi ./resources/js/scripts.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\WorkDir\Projects\metronic-laravel\resources\js\scripts.js */"./resources/js/scripts.js");


/***/ })

/******/ });